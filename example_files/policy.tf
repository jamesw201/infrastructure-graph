
# ==============================================
# Terraform file generated by create-infra.py
# Generation time: 2019-11-27T00:41:55.349630
# ==============================================
provider "aws" {
    region                  = "us-east-1"
    shared_credentials_file = "/Users/james.n.wilson/.aws/credentials"
    profile                 = "sandbox1"
}
terraform {
  required_version = "= 0.11.2"
  backend "s3" {
    bucket  = "acp-platform-s-policy-sandbox1"
    key     = "infrastructure/terraform.tfstate"
    region  = "us-east-1"
  }
}
# ----------------------------------------------
data "terraform_remote_state" "acp-platform-s-policy-sandbox1_remote_state" {
    config {
      bucket             = "acp-platform-s-policy-sandbox1"
      key                = "infrastructure/terraform.tfstate"
      region             = "us-east-1"
    }
    backend              = "s3"
}


# ==============================================
# Generated from YAML files

# ==============================================
# aws_sqs_queue : ../service-policy/infrastructure/aws_sqs_queue.yaml

# ----------------------------------------------
resource "aws_sqs_queue" "policy_execution-queue" {
    name                 = "policy_execution-queue"
    lifecycle {
      prevent_destroy    = true
    }
    message_retention_seconds = 3600
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
    visibility_timeout_seconds = 60
    policy               = "{ \"Version\": \"2012-10-17\", \"Id\": \"arn:aws:sqs:us-east-1:309983114184:policy_execution-queue/SNStoSQSPolicy\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"*\" }, \"Action\": \"SQS:SendMessage\", \"Resource\": \"arn:aws:sqs:us-east-1:309983114184:policy_execution-queue\", \"Condition\": { \"ArnEquals\": { \"aws:SourceArn\": \"arn:aws:sns:us-east-1:309983114184:policy_execution-notifier-topic\" } } } ] }"
    redrive_policy       = "{\"deadLetterTargetArn\":\"${aws_sqs_queue.policy_execution-deadletter-queue.arn}\",\"maxReceiveCount\":2}"
}

# ----------------------------------------------
resource "aws_sqs_queue" "policy_execution-deadletter-queue" {
    lifecycle {
      prevent_destroy    = true
    }
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-deadletter-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
    name                 = "policy_execution-deadletter-queue"
    message_retention_seconds = 604800
}


# ==============================================
# aws_sns_topic : ../service-policy/infrastructure/aws_sns_topic.yaml

# ----------------------------------------------
resource "aws_sns_topic" "policy_scheduled-policy-topic" {
    name                 = "policy_scheduled-policy-topic"
}

# ----------------------------------------------
resource "aws_sns_topic" "policy_trigger-policy-scheduler-topic" {
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Principal": {
        "Service": "events.amazonaws.com"
      }, 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:policy_trigger-policy-scheduler-topic"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_trigger-policy-scheduler-topic"
}

# Generating aws_lambda_permission for aws_sns_topic
# ----------------------------------------------
resource "aws_lambda_permission" "policy_trigger-policy-scheduler-topic_invoke" {
    statement_id         = "policy_trigger-policy-scheduler-topic_invoke"
    action               = "lambda:InvokeFunction"
    source_arn           = "${aws_sns_topic.policy_trigger-policy-scheduler-topic.arn}"
    function_name        = "${aws_lambda_function.policy_scheduler.arn}"
    principal            = "sns.amazonaws.com"
}

# ----------------------------------------------
resource "aws_sns_topic" "policy_compliance-watch-violations-topic" {
    name                 = "policy_compliance-watch-violations-topic"
}

# ----------------------------------------------
resource "aws_sns_topic" "policy_execution-notifier-topic" {
    policy = <<EOF
{
  "Version": "2012-10-17", 
  "Statement": [
    {
      "Action": "SNS:Publish", 
      "Resource": "arn:aws:sns:*:*:policy_execution-notifier-topic", 
      "Effect": "Allow", 
      "Condition": {
        "ArnLike": {
          "aws:SourceArn": "arn:aws:s3:::acp-platform-s-policy-sandbox1"
        }
      }, 
      "Principal": {
        "Service": "s3.amazonaws.com"
      }
    }
  ]
}
EOF
    name                 = "policy_execution-notifier-topic"
}

# Generating aws_sns_topic_subscription for aws_sns_topic
# ----------------------------------------------
resource "aws_sns_topic_subscription" "policy_execution-notifier-topic_Sub_sqs_policy_execution-queue" {
    protocol             = "sqs"
    endpoint             = "${aws_sqs_queue.policy_execution-queue.arn}"
    topic_arn            = "${aws_sns_topic.policy_execution-notifier-topic.arn}"
}


# ==============================================
# aws_dynamodb_table : ../service-policy/infrastructure/aws_dynamodb_table.yaml

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_condition_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "policy_condition" }
    alarm_name           = "policy_condition_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_condition_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_condition_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "policy_condition" }
    alarm_name           = "policy_condition_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_condition_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "policy_condition" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 2
    hash_key             = "id"
    name                 = "policy_condition"
    lifecycle {
      prevent_destroy    = true
    }
    write_capacity       = 2
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_condition"
      CreatedBy          = "Platform.S create-infra.py"
    }
    attribute {
      name               = "id"
      type               = "S"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_action_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "policy_action" }
    alarm_name           = "policy_action_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_action_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_action_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "policy_action" }
    alarm_name           = "policy_action_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_action_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "policy_action" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 2
    hash_key             = "id"
    name                 = "policy_action"
    lifecycle {
      prevent_destroy    = true
    }
    write_capacity       = 2
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_action"
      CreatedBy          = "Platform.S create-infra.py"
    }
    attribute {
      name               = "id"
      type               = "S"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_policy_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "policy_policy" }
    alarm_name           = "policy_policy_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_policy_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_policy_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "policy_policy" }
    alarm_name           = "policy_policy_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_policy_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "policy_policy" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 2
    range_key            = "id"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_policy"
      CreatedBy          = "Platform.S create-infra.py"
    }
    write_capacity       = 2
    hash_key             = "tenantId"
    name                 = "policy_policy"
    lifecycle {
      prevent_destroy    = true
    }
    stream_view_type     = "NEW_AND_OLD_IMAGES"
    attribute {
      name               = "id"
      type               = "S"
    }
    attribute {
      name               = "tenantId"
      type               = "S"
    }
    stream_enabled       = true
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_whitelist_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "policy_whitelist" }
    alarm_name           = "policy_whitelist_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_whitelist_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_whitelist_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "policy_whitelist" }
    alarm_name           = "policy_whitelist_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_whitelist_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "policy_whitelist" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 2
    hash_key             = "tenantId"
    name                 = "policy_whitelist"
    lifecycle {
      prevent_destroy    = true
    }
    write_capacity       = 2
    range_key            = "accountId"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_whitelist"
      CreatedBy          = "Platform.S create-infra.py"
    }
    attribute {
      name               = "accountId"
      type               = "S"
    }
    attribute {
      name               = "tenantId"
      type               = "S"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_definition_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "policy_definition" }
    alarm_name           = "policy_definition_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_definition_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_definition_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "policy_definition" }
    alarm_name           = "policy_definition_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_definition_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "policy_definition" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 2
    hash_key             = "tenantId"
    name                 = "policy_definition"
    lifecycle {
      prevent_destroy    = true
    }
    write_capacity       = 2
    range_key            = "id"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_definition"
      CreatedBy          = "Platform.S create-infra.py"
    }
    global_secondary_index {
      name               = "lastExecutionDate"
      hash_key           = "state"
      range_key          = "lastExecution"
      projection_type    = "ALL"
      write_capacity     = 2
      read_capacity      = 2
    }
    global_secondary_index {
      name               = "nextExecutionDate"
      hash_key           = "state"
      range_key          = "nextExecution"
      projection_type    = "ALL"
      write_capacity     = 2
      read_capacity      = 2
    }
    attribute {
      name               = "tenantId"
      type               = "S"
    }
    attribute {
      name               = "id"
      type               = "S"
    }
    attribute {
      name               = "state"
      type               = "S"
    }
    attribute {
      name               = "lastExecution"
      type               = "N"
    }
    attribute {
      name               = "nextExecution"
      type               = "N"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_executions_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "policy_executions" }
    alarm_name           = "policy_executions_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_executions_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_executions_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "policy_executions" }
    alarm_name           = "policy_executions_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_executions_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "policy_executions" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 2
    ttl {
      attribute_name     = "ttl"
      enabled            = true
    }
    hash_key             = "tenantId"
    name                 = "policy_executions"
    lifecycle {
      prevent_destroy    = false
    }
    write_capacity       = 2
    range_key            = "id"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_executions"
      CreatedBy          = "Platform.S create-infra.py"
    }
    stream_view_type     = "NEW_AND_OLD_IMAGES"
    global_secondary_index {
      name               = "policyIdDate"
      hash_key           = "policyId"
      range_key          = "stateChangeDate"
      projection_type    = "ALL"
      write_capacity     = 2
      read_capacity      = 2
    }
    global_secondary_index {
      name               = "policyIdState"
      hash_key           = "policyId"
      range_key          = "state"
      projection_type    = "ALL"
      write_capacity     = 2
      read_capacity      = 2
    }
    global_secondary_index {
      name               = "tenantIdStateChangeDate"
      hash_key           = "tenantId"
      range_key          = "stateChangeDate"
      projection_type    = "ALL"
      write_capacity     = 2
      read_capacity      = 2
    }
    global_secondary_index {
      name               = "tenantIdState"
      hash_key           = "tenantId"
      range_key          = "state"
      projection_type    = "ALL"
      write_capacity     = 2
      read_capacity      = 2
    }
    attribute {
      name               = "tenantId"
      type               = "S"
    }
    attribute {
      name               = "id"
      type               = "S"
    }
    attribute {
      name               = "policyId"
      type               = "S"
    }
    attribute {
      name               = "stateChangeDate"
      type               = "N"
    }
    attribute {
      name               = "state"
      type               = "S"
    }
    stream_enabled       = true
}


# ==============================================
# aws_lambda_function : ../service-policy/infrastructure/aws_lambda_function.yaml

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "policy_scheduler_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_scheduler_role"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_scheduler_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_scheduler_role_policy" {
    depends_on           = [ "aws_iam_role.policy_scheduler_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*policy_scheduler*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan", 
        "dynamodb:Query", 
        "dynamodb:BatchGetItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_condition/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_condition", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_policy/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_policy", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_action/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_action"
      ]
    }, 
    {
      "Action": [
        "dynamodb:UpdateItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_policy/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_policy"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:policy_scheduled-policy-topic"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_scheduler_role.id}"
    name                 = "policy_scheduler_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_scheduler_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "policy_scheduler"
    }
    alarm_name           = "policy_scheduler_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_scheduler_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_scheduler_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "policy_scheduler" }
    alarm_name           = "policy_scheduler_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_scheduler_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "policy_scheduler" {
    function_name        = "policy_scheduler"
    depends_on           = [ "aws_iam_role.policy_scheduler_role" ]
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_scheduler"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    memory_size          = 128
    timeout              = 180
    role                 = "${aws_iam_role.policy_scheduler_role.arn}"
    runtime              = "nodejs8.10"
    description          = "This will identify all scheduled policies and schedule them to run."
}

# Generating aws_lambda_permission for SNS ${aws_sns_topic.policy_trigger-policy-scheduler-topic.arn}
# ----------------------------------------------
resource "aws_lambda_permission" "policy_scheduler__trigger--scheduler-topic_sns_invoke_lambda_permission" {
    statement_id         = "policy_scheduler__trigger--scheduler-topic_sns_invoke_lambda_permission"
    depends_on           = [ "aws_lambda_function.policy_scheduler" ]
    source_arn           = "${aws_sns_topic.policy_trigger-policy-scheduler-topic.arn}"
    action               = "lambda:InvokeFunction"
    function_name        = "${aws_lambda_function.policy_scheduler.arn}"
    principal            = "sns.amazonaws.com"
}

# Generating aws_sns_topic_subscription for aws_lambda_function
# ----------------------------------------------
resource "aws_sns_topic_subscription" "policy_scheduler_Sub_policy_trigger-policy-scheduler-topic" {
    depends_on           = [ "aws_lambda_function.policy_scheduler" ]
    topic_arn            = "${aws_sns_topic.policy_trigger-policy-scheduler-topic.arn}"
    endpoint             = "${aws_lambda_function.policy_scheduler.arn}"
    protocol             = "lambda"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "policy_executor_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_executor_role"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_executor_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_executor_role_policy" {
    depends_on           = [ "aws_iam_role.policy_executor_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*policy_executor*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_condition/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_condition", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_action/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_action"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:UpdateItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_policy/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_policy"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:action_send-email-topic", 
        "arn:aws:sns:us-east-1:309983114184:action_post-to-slack-topic"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:policy_compliance-watch-violations-topic"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-action-sandbox1"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject", 
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-action-sandbox1/report/*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject", 
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-action-sandbox1/tracker-sync/*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket", 
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-policy-sandbox1", 
        "arn:aws:s3:::acp-platform-s-policy-sandbox1/env/*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_executor_role.id}"
    name                 = "policy_executor_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_executor_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "policy_executor"
    }
    alarm_name           = "policy_executor_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_executor_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_executor_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "policy_executor" }
    alarm_name           = "policy_executor_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_executor_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "policy_executor" {
    depends_on           = [ "aws_iam_role.policy_executor_role" ]
    role                 = "${aws_iam_role.policy_executor_role.arn}"
    description          = "Evaluate a policy and execute actions"
    function_name        = "policy_executor"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_executor"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    memory_size          = 1536
    timeout              = 900
    runtime              = "nodejs8.10"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
}

# Generating aws_lambda_permission for SNS ${aws_sns_topic.policy_scheduled-policy-topic.arn}
# ----------------------------------------------
resource "aws_lambda_permission" "policy_executor__scheduled--topic_sns_invoke_lambda_permission" {
    statement_id         = "policy_executor__scheduled--topic_sns_invoke_lambda_permission"
    depends_on           = [ "aws_lambda_function.policy_executor" ]
    source_arn           = "${aws_sns_topic.policy_scheduled-policy-topic.arn}"
    action               = "lambda:InvokeFunction"
    function_name        = "${aws_lambda_function.policy_executor.arn}"
    principal            = "sns.amazonaws.com"
}

# Generating aws_sns_topic_subscription for aws_lambda_function
# ----------------------------------------------
resource "aws_sns_topic_subscription" "policy_executor_Sub_policy_scheduled-policy-topic" {
    depends_on           = [ "aws_lambda_function.policy_executor" ]
    topic_arn            = "${aws_sns_topic.policy_scheduled-policy-topic.arn}"
    endpoint             = "${aws_lambda_function.policy_executor.arn}"
    protocol             = "lambda"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "policy_api_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_api_role"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_api_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_api_role_policy" {
    depends_on           = [ "aws_iam_role.policy_api_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*policy_api*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query", 
        "dynamodb:UpdateItem", 
        "dynamodb:PutItem", 
        "dynamodb:DeleteItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_policy/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_policy"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_api_role.id}"
    name                 = "policy_api_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_api_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "policy_api"
    }
    alarm_name           = "policy_api_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_api_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_api_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "policy_api" }
    alarm_name           = "policy_api_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_api_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "policy_api" {
    function_name        = "policy_api"
    depends_on           = [ "aws_iam_role.policy_api_role" ]
    role                 = "${aws_iam_role.policy_api_role.arn}"
    filename             = "/tmp/python_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_api"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    memory_size          = 1024
    timeout              = 30
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "python3.6"
    description          = "Policy API"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "policy_update-violations_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_update-violations_role"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_update-violations_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_update-violations_role_policy" {
    depends_on           = [ "aws_iam_role.policy_update-violations_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*policy_update-violations*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetRecords", 
        "dynamodb:GetShardIterator", 
        "dynamodb:DescribeStream", 
        "dynamodb:ListStreams"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_policy/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_policy"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject", 
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-action-sandbox1/tracker-sync/*"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:policy_compliance-watch-violations-topic"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_update-violations_role.id}"
    name                 = "policy_update-violations_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_update-violations_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "policy_update-violations"
    }
    alarm_name           = "policy_update-violations_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_update-violations_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_update-violations_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "policy_update-violations" }
    alarm_name           = "policy_update-violations_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_update-violations_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "policy_update-violations" {
    function_name        = "policy_update-violations"
    depends_on           = [ "aws_iam_role.policy_update-violations_role" ]
    role                 = "${aws_iam_role.policy_update-violations_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_update-violations"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    memory_size          = 128
    timeout              = 60
    runtime              = "nodejs8.10"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    description          = "Updates violations with changes to a policy"
}

# Generating aws_lambda_event_source_mapping for aws_lambda_function
# ----------------------------------------------
resource "aws_lambda_event_source_mapping" "policy_update-violations_EvtMap_policy_stream" {
    depends_on           = [ "aws_lambda_function.policy_update-violations" ]
    starting_position    = "TRIM_HORIZON"
    batch_size           = 100
    event_source_arn     = "${aws_dynamodb_table.policy_policy.stream_arn}"
    function_name        = "policy_update-violations"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "policy_whitelist-sync_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_whitelist-sync_role"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_whitelist-sync_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_whitelist-sync_role_policy" {
    depends_on           = [ "aws_iam_role.policy_whitelist-sync_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*policy_whitelist-sync*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan", 
        "dynamodb:GetItem", 
        "dynamodb:PutItem", 
        "dynamodb:DeleteItem", 
        "dynamodb:UpdateItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_whitelist-sync_role.id}"
    name                 = "policy_whitelist-sync_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_whitelist-sync_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "policy_whitelist-sync"
    }
    alarm_name           = "policy_whitelist-sync_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 500
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_whitelist-sync_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_whitelist-sync_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "policy_whitelist-sync" }
    alarm_name           = "policy_whitelist-sync_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_whitelist-sync_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "policy_whitelist-sync" {
    function_name        = "policy_whitelist-sync"
    depends_on           = [ "aws_iam_role.policy_whitelist-sync_role" ]
    role                 = "${aws_iam_role.policy_whitelist-sync_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_whitelist-sync"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 300
    memory_size          = 128
    runtime              = "nodejs8.10"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    description          = "Synchronizes whitelist based on account_account data"
}

# Generating aws_lambda_permission for SNS arn:aws:sns:us-east-1:309983114184:account_account-topic
# ----------------------------------------------
resource "aws_lambda_permission" "policy_whitelist-sync_account_account-topic_sns_invoke_lambda_permission" {
    statement_id         = "policy_whitelist-sync_account_account-topic_sns_invoke_lambda_permission"
    depends_on           = [ "aws_lambda_function.policy_whitelist-sync" ]
    source_arn           = "arn:aws:sns:us-east-1:309983114184:account_account-topic"
    action               = "lambda:InvokeFunction"
    function_name        = "${aws_lambda_function.policy_whitelist-sync.arn}"
    principal            = "sns.amazonaws.com"
}

# Generating aws_sns_topic_subscription for aws_lambda_function
# ----------------------------------------------
resource "aws_sns_topic_subscription" "policy_whitelist-sync_Sub_account_account-topic" {
    depends_on           = [ "aws_lambda_function.policy_whitelist-sync" ]
    topic_arn            = "arn:aws:sns:us-east-1:309983114184:account_account-topic"
    endpoint             = "${aws_lambda_function.policy_whitelist-sync.arn}"
    protocol             = "lambda"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "policy_whitelist-suspended-accounts_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_whitelist-suspended-accounts_role"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_whitelist-suspended-accounts_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_whitelist-suspended-accounts_role_policy" {
    depends_on           = [ "aws_iam_role.policy_whitelist-suspended-accounts_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*policy_whitelist-suspended-accounts*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan", 
        "dynamodb:GetItem", 
        "dynamodb:PutItem", 
        "dynamodb:DeleteItem", 
        "dynamodb:UpdateItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket", 
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-policy-sandbox1", 
        "arn:aws:s3:::acp-platform-s-policy-sandbox1/env/*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_whitelist-suspended-accounts_role.id}"
    name                 = "policy_whitelist-suspended-accounts_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_whitelist-suspended-accounts_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "policy_whitelist-suspended-accounts"
    }
    alarm_name           = "policy_whitelist-suspended-accounts_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_whitelist-suspended-accounts_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_whitelist-suspended-accounts_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "policy_whitelist-suspended-accounts" }
    alarm_name           = "policy_whitelist-suspended-accounts_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_whitelist-suspended-accounts_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "policy_whitelist-suspended-accounts" {
    depends_on           = [ "aws_iam_role.policy_whitelist-suspended-accounts_role" ]
    role                 = "${aws_iam_role.policy_whitelist-suspended-accounts_role.arn}"
    description          = "Synchronizes whitelist based on suspended account discovery endpoint data"
    function_name        = "policy_whitelist-suspended-accounts"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_whitelist-suspended-accounts"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    memory_size          = 128
    timeout              = 300
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "nodejs8.10"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "policy_execution-scheduler_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_execution-scheduler_role"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-scheduler_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_execution-scheduler_role_policy" {
    depends_on           = [ "aws_iam_role.policy_execution-scheduler_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*policy_execution-scheduler*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:UpdateItem", 
        "dynamodb:PutItem", 
        "dynamodb:Query", 
        "dynamodb:Scan"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_definition/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_definition"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query", 
        "dynamodb:Scan", 
        "dynamodb:PutItem", 
        "dynamodb:BatchWriteItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_executions/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_executions"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:policy_execution-notifier-topic"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_execution-scheduler_role.id}"
    name                 = "policy_execution-scheduler_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_execution-scheduler_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "policy_execution-scheduler"
    }
    alarm_name           = "policy_execution-scheduler_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-scheduler_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_execution-scheduler_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "policy_execution-scheduler" }
    alarm_name           = "policy_execution-scheduler_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-scheduler_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "policy_execution-scheduler" {
    function_name        = "policy_execution-scheduler"
    depends_on           = [ "aws_iam_role.policy_execution-scheduler_role" ]
    role                 = "${aws_iam_role.policy_execution-scheduler_role.arn}"
    filename             = "/tmp/python_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-scheduler"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    memory_size          = 1024
    timeout              = 30
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "python3.6"
    description          = "Schedules policy definitions for execution"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "policy_execution-processor_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_execution-processor_role"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-processor_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_execution-processor_role_policy" {
    depends_on           = [ "aws_iam_role.policy_execution-processor_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*policy_execution-processor*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket", 
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-policy-sandbox1", 
        "arn:aws:s3:::acp-platform-s-policy-sandbox1/env/*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-action-sandbox1"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject", 
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-action-sandbox1/tracker-sync/*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject", 
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-action-sandbox1/report/*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query", 
        "dynamodb:Scan", 
        "dynamodb:UpdateItem", 
        "dynamodb:PutItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_executions/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_executions"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query", 
        "dynamodb:Scan", 
        "dynamodb:UpdateItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_definition/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_definition"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist"
      ]
    }, 
    {
      "Action": [
        "sqs:GetQueueAttributes", 
        "sqs:DeleteMessage", 
        "sqs:ChangeMessageVisibility", 
        "sqs:DeleteMessageBatch", 
        "sqs:ChangeMessageVisibilityBatch", 
        "sqs:ReceiveMessage"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_sqs_queue.policy_execution-queue.arn}", 
        "${aws_sqs_queue.policy_execution-deadletter-queue.arn}"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:action_send-email-topic"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:policy_compliance-watch-violations-topic"
      ]
    }, 
    {
      "Action": [
        "es:ESHttpGet"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:es:us-east-1:309983114184:domain/governance/*"
      ]
    }, 
    {
      "Action": [
        "es:DescribeElasticsearchDomain"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:es:us-east-1:309983114184:domain/governance"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_execution-processor_role.id}"
    name                 = "policy_execution-processor_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_execution-processor_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "policy_execution-processor"
    }
    alarm_name           = "policy_execution-processor_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-processor_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_execution-processor_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "policy_execution-processor" }
    alarm_name           = "policy_execution-processor_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-processor_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "policy_execution-processor" {
    role                 = "${aws_iam_role.policy_execution-processor_role.arn}"
    depends_on           = [ "aws_iam_role.policy_execution-processor_role" ]
    description          = "Executes sheduled policy"
    function_name        = "policy_execution-processor"
    filename             = "/tmp/python_lambda_stub.zip"
    reserved_concurrent_executions = 10
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-processor"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    timeout              = 60
    memory_size          = 1024
    runtime              = "python3.6"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
}

# Generating aws_lambda_event_source_mapping for aws_lambda_function
# ----------------------------------------------
resource "aws_lambda_event_source_mapping" "policy_execution-processor_EvtMap_policy_execution" {
    depends_on           = [ "aws_lambda_function.policy_execution-processor" ]
    batch_size           = 10
    event_source_arn     = "${aws_sqs_queue.policy_execution-queue.arn}"
    function_name        = "policy_execution-processor"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "policy_definition-validator_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_definition-validator_role"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_definition-validator_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_definition-validator_role_policy" {
    depends_on           = [ "aws_iam_role.policy_definition-validator_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*policy_definition-validator*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket", 
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-policy-sandbox1", 
        "arn:aws:s3:::acp-platform-s-policy-sandbox1/env/*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query", 
        "dynamodb:UpdateItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_definition/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_definition"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_definition-validator_role.id}"
    name                 = "policy_definition-validator_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_definition-validator_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "policy_definition-validator"
    }
    alarm_name           = "policy_definition-validator_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_definition-validator_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_definition-validator_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "policy_definition-validator" }
    alarm_name           = "policy_definition-validator_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_definition-validator_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "policy_definition-validator" {
    depends_on           = [ "aws_iam_role.policy_definition-validator_role" ]
    role                 = "${aws_iam_role.policy_definition-validator_role.arn}"
    description          = "Policy validator"
    function_name        = "policy_definition-validator"
    filename             = "/tmp/python_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_definition-validator"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    memory_size          = 1024
    timeout              = 30
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "python3.6"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "policy_definition-api_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_definition-api_role"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_definition-api_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_definition-api_role_policy" {
    depends_on           = [ "aws_iam_role.policy_definition-api_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*policy_definition-api*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket", 
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-policy-sandbox1", 
        "arn:aws:s3:::acp-platform-s-policy-sandbox1/env/*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query", 
        "dynamodb:UpdateItem", 
        "dynamodb:PutItem", 
        "dynamodb:DeleteItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_definition/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_definition"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist"
      ]
    }, 
    {
      "Action": [
        "lambda:InvokeFunction"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:lambda:us-east-1:309983114184:function:policy_definition-validator"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_definition-api_role.id}"
    name                 = "policy_definition-api_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_definition-api_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "policy_definition-api"
    }
    alarm_name           = "policy_definition-api_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_definition-api_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_definition-api_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "policy_definition-api" }
    alarm_name           = "policy_definition-api_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_definition-api_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "policy_definition-api" {
    depends_on           = [ "aws_iam_role.policy_definition-api_role" ]
    role                 = "${aws_iam_role.policy_definition-api_role.arn}"
    description          = "Policy definition API for CRUD operations"
    function_name        = "policy_definition-api"
    filename             = "/tmp/python_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_definition-api"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    memory_size          = 1024
    timeout              = 30
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "python3.6"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "policy_execution-api_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_execution-api_role"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-api_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_execution-api_role_policy" {
    depends_on           = [ "aws_iam_role.policy_execution-api_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*policy_execution-api*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query", 
        "dynamodb:UpdateItem", 
        "dynamodb:UpdateItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_executions/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_executions"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_whitelist"
      ]
    }, 
    {
      "Action": [
        "es:ESHttpGet", 
        "es:ESHttpDelete", 
        "es:ESHttpHead", 
        "es:ESHttpPost", 
        "es:ESHttpPut"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:es:us-east-1:309983114184:domain/governance/*"
      ]
    }, 
    {
      "Action": [
        "es:DescribeElasticsearchDomain"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:es:us-east-1:309983114184:domain/governance"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_execution-api_role.id}"
    name                 = "policy_execution-api_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_execution-api_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "policy_execution-api"
    }
    alarm_name           = "policy_execution-api_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-api_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_execution-api_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "policy_execution-api" }
    alarm_name           = "policy_execution-api_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-api_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "policy_execution-api" {
    function_name        = "policy_execution-api"
    depends_on           = [ "aws_iam_role.policy_execution-api_role" ]
    role                 = "${aws_iam_role.policy_execution-api_role.arn}"
    filename             = "/tmp/python_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-api"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    memory_size          = 1024
    timeout              = 30
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "python3.6"
    description          = "API for listing and updating Policy execution records"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "policy_execution-stream-processor_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_execution-stream-processor_role"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-stream-processor_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_execution-stream-processor_role_policy" {
    depends_on           = [ "aws_iam_role.policy_execution-stream-processor_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*policy_execution-stream-processor*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetRecords", 
        "dynamodb:GetShardIterator", 
        "dynamodb:DescribeStream", 
        "dynamodb:ListStreams"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_executions/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/policy_executions"
      ]
    }, 
    {
      "Action": [
        "es:ESHttpGet", 
        "es:ESHttpDelete", 
        "es:ESHttpHead", 
        "es:ESHttpPost", 
        "es:ESHttpPut"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:es:us-east-1:309983114184:domain/governance/*"
      ]
    }, 
    {
      "Action": [
        "es:DescribeElasticsearchDomain"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:es:us-east-1:309983114184:domain/governance"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_execution-stream-processor_role.id}"
    name                 = "policy_execution-stream-processor_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_execution-stream-processor_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "policy_execution-stream-processor"
    }
    alarm_name           = "policy_execution-stream-processor_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-stream-processor_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "policy_execution-stream-processor_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "policy_execution-stream-processor" }
    alarm_name           = "policy_execution-stream-processor_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-stream-processor_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "policy_execution-stream-processor" {
    function_name        = "policy_execution-stream-processor"
    depends_on           = [ "aws_iam_role.policy_execution-stream-processor_role" ]
    role                 = "${aws_iam_role.policy_execution-stream-processor_role.arn}"
    filename             = "/tmp/python_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-stream-processor"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    memory_size          = 1024
    timeout              = 60
    runtime              = "python3.6"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    description          = "Syncs policy execution data from policy_executions DynamoDb table into Elasticsearch"
}

# Generating aws_lambda_event_source_mapping for aws_lambda_function
# ----------------------------------------------
resource "aws_lambda_event_source_mapping" "policy_execution-stream-processor_EvtMap_policy_execution" {
    depends_on           = [ "aws_lambda_function.policy_execution-stream-processor" ]
    starting_position    = "TRIM_HORIZON"
    batch_size           = 100
    event_source_arn     = "${aws_dynamodb_table.policy_executions.stream_arn}"
    function_name        = "policy_execution-stream-processor"
}


# ==============================================
# aws_api_gateway_deployment : ../service-policy/infrastructure/aws_api_gateway_deployment.yaml

# ----------------------------------------------
resource "aws_iam_role" "policy_gateway-invoke-lambda" {
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_gateway-invoke-lambda"
      CreatedBy          = "Platform.S create-infra.py"
    }
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": "apigateway.amazonaws.com"
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "policy_gateway-invoke-lambda"
}

# Generating aws_iam_role_policy for aws_iam_role
# ----------------------------------------------
resource "aws_iam_role_policy" "policy_gateway-invoke-lambda_role_policy" {
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "lambda:InvokeFunction"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:lambda:us-east-1:309983114184:function:policy_api", 
        "arn:aws:lambda:us-east-1:309983114184:function:policy_definition-api", 
        "arn:aws:lambda:us-east-1:309983114184:function:policy_definition-validator", 
        "arn:aws:lambda:us-east-1:309983114184:function:policy_execution-api", 
        "arn:aws:lambda:us-east-1:309983114184:function:policy_execution-processor"
      ]
    }, 
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.policy_gateway-invoke-lambda.id}"
    name                 = "policy_gateway-invoke-lambda_role_policy"
}



# Generating aws_api_gateway_rest_api for aws_api_gateway_deployment
# ----------------------------------------------
resource "aws_api_gateway_rest_api" "policy" {
    name = "policy"
    binary_media_types = []
}


# Generating aws_api_gateway_resource for path part v1
# ----------------------------------------------
resource "aws_api_gateway_resource" "policy_deployment-v1_resource" {
    parent_id = "${aws_api_gateway_rest_api.policy.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    path_part="v1"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "policy_deployment-v1_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.policy_deployment-v1_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "policy_integration_policy_deployment-v1_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    resource_id = "${aws_api_gateway_resource.policy_deployment-v1_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "policy_integration_policy_deployment-v1_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.policy_deployment-v1_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.policy_api.arn}/invocations"
    http_method = "${aws_api_gateway_method.policy_integration_policy_deployment-v1_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    credentials = "${aws_iam_role.policy_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part definition
# ----------------------------------------------
resource "aws_api_gateway_resource" "policy_deployment-definition_resource" {
    parent_id = "${aws_api_gateway_rest_api.policy.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    path_part="definition"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "policy_deployment-definition_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.policy_deployment-definition_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "policy_integration_policy_deployment-definition_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    resource_id = "${aws_api_gateway_resource.policy_deployment-definition_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "policy_integration_policy_deployment-definition_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.policy_deployment-definition_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.policy_definition-api.arn}/invocations"
    http_method = "${aws_api_gateway_method.policy_integration_policy_deployment-definition_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    credentials = "${aws_iam_role.policy_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part validation
# ----------------------------------------------
resource "aws_api_gateway_resource" "policy_deployment-validation_resource" {
    parent_id = "${aws_api_gateway_rest_api.policy.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    path_part="validation"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "policy_deployment-validation_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.policy_deployment-validation_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "policy_integration_policy_deployment-validation_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    resource_id = "${aws_api_gateway_resource.policy_deployment-validation_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "policy_integration_policy_deployment-validation_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.policy_deployment-validation_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.policy_definition-validator.arn}/invocations"
    http_method = "${aws_api_gateway_method.policy_integration_policy_deployment-validation_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    credentials = "${aws_iam_role.policy_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part execution
# ----------------------------------------------
resource "aws_api_gateway_resource" "policy_deployment-execution_resource" {
    parent_id = "${aws_api_gateway_rest_api.policy.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    path_part="execution"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "policy_deployment-execution_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.policy_deployment-execution_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "policy_integration_policy_deployment-execution_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    resource_id = "${aws_api_gateway_resource.policy_deployment-execution_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "policy_integration_policy_deployment-execution_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.policy_deployment-execution_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.policy_execution-api.arn}/invocations"
    http_method = "${aws_api_gateway_method.policy_integration_policy_deployment-execution_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    credentials = "${aws_iam_role.policy_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part processor
# ----------------------------------------------
resource "aws_api_gateway_resource" "policy_deployment-processor_resource" {
    parent_id = "${aws_api_gateway_rest_api.policy.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    path_part="processor"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "policy_deployment-processor_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.policy_deployment-processor_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "policy_integration_policy_deployment-processor_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    resource_id = "${aws_api_gateway_resource.policy_deployment-processor_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "policy_integration_policy_deployment-processor_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.policy_deployment-processor_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.policy_execution-processor.arn}/invocations"
    http_method = "${aws_api_gateway_method.policy_integration_policy_deployment-processor_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.policy.id}"
    credentials = "${aws_iam_role.policy_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}

# Generating base path mapping for component
# ----------------------------------------------
resource "aws_api_gateway_base_path_mapping" "policy_deployment-base-path-mapping" {
    stage_name           = "sandbox1"
    depends_on           = [ "aws_api_gateway_deployment.policy_deployment" ]
    domain_name          = "api.sandbox1.cloudplatform.accenture.com"
    api_id               = "${aws_api_gateway_rest_api.policy.id}"
    base_path            = "policy"
}

# ----------------------------------------------
resource "aws_api_gateway_deployment" "policy_deployment" {
    stage_name           = "sandbox1"
    rest_api_id          = "${aws_api_gateway_rest_api.policy.id}"
    depends_on           = [ "aws_api_gateway_integration.policy_integration_policy_deployment-v1_resource_ANY_int","aws_api_gateway_integration.policy_integration_policy_deployment-definition_resource_ANY_int","aws_api_gateway_integration.policy_integration_policy_deployment-validation_resource_ANY_int","aws_api_gateway_integration.policy_integration_policy_deployment-execution_resource_ANY_int","aws_api_gateway_integration.policy_integration_policy_deployment-processor_resource_ANY_int" ]
}


# ==============================================
# aws_cloudwatch_event_rule : ../service-policy/infrastructure/aws_cloudwatch_event_rule.yaml

# Generating aws_cloudwatch_event_target for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_cloudwatch_event_target" "policy_scheduler-rule_target" {
    depends_on           = [ "aws_cloudwatch_event_rule.policy_scheduler-rule","aws_sns_topic.policy_trigger-policy-scheduler-topic" ]
    target_id            = "policy_scheduler-rule_target"
    arn                  = "${aws_sns_topic.policy_trigger-policy-scheduler-topic.arn}"
    rule                 = "policy_scheduler-rule"
}

# ----------------------------------------------
resource "aws_cloudwatch_event_rule" "policy_scheduler-rule" {
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_scheduler-rule"
      CreatedBy          = "Platform.S create-infra.py"
    }
    description          = "Schedule invocation of the scheduler lambda"
    schedule_expression  = "rate(5 minutes)"
    name                 = "policy_scheduler-rule"
}

# Generating aws_cloudwatch_event_target for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_cloudwatch_event_target" "policy_execution-scheduler-rule_target" {
    depends_on           = [ "aws_cloudwatch_event_rule.policy_execution-scheduler-rule","aws_lambda_function.policy_execution-scheduler" ]
    target_id            = "policy_execution-scheduler-rule_target"
    arn                  = "${aws_lambda_function.policy_execution-scheduler.arn}"
    rule                 = "policy_execution-scheduler-rule"
}

# ----------------------------------------------
resource "aws_cloudwatch_event_rule" "policy_execution-scheduler-rule" {
    description          = "Schedules policy for execution"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_execution-scheduler-rule"
      CreatedBy          = "Platform.S create-infra.py"
    }
    schedule_expression  = "rate(1 minute)"
    name                 = "policy_execution-scheduler-rule"
}

# Generating aws_lambda_permission for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_lambda_permission" "policy_execution-scheduler-rule_invoke" {
    statement_id         = "policy_execution-scheduler-rule_invoke"
    action               = "lambda:InvokeFunction"
    source_arn           = "${aws_cloudwatch_event_rule.policy_execution-scheduler-rule.arn}"
    function_name        = "${aws_lambda_function.policy_execution-scheduler.arn}"
    principal            = "events.amazonaws.com"
}

# Generating aws_cloudwatch_event_target for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_cloudwatch_event_target" "policy_whitelist-suspended-accounts-rule_target" {
    depends_on           = [ "aws_cloudwatch_event_rule.policy_whitelist-suspended-accounts-rule","aws_lambda_function.policy_whitelist-suspended-accounts" ]
    target_id            = "policy_whitelist-suspended-accounts-rule_target"
    arn                  = "${aws_lambda_function.policy_whitelist-suspended-accounts.arn}"
    rule                 = "policy_whitelist-suspended-accounts-rule"
}

# ----------------------------------------------
resource "aws_cloudwatch_event_rule" "policy_whitelist-suspended-accounts-rule" {
    description          = "Schedules policy for whitelisting suspended accounts"
    tags {
      Environment        = "sandbox1"
      Component          = "policy"
      Name               = "policy_whitelist-suspended-accounts-rule"
      CreatedBy          = "Platform.S create-infra.py"
    }
    schedule_expression  = "rate(60 minutes)"
    name                 = "policy_whitelist-suspended-accounts-rule"
}

# Generating aws_lambda_permission for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_lambda_permission" "policy_whitelist-suspended-accounts-rule_invoke" {
    statement_id         = "policy_whitelist-suspended-accounts-rule_invoke"
    action               = "lambda:InvokeFunction"
    source_arn           = "${aws_cloudwatch_event_rule.policy_whitelist-suspended-accounts-rule.arn}"
    function_name        = "${aws_lambda_function.policy_whitelist-suspended-accounts.arn}"
    principal            = "events.amazonaws.com"
}


# ==============================================
# Summary: 
# 1/6]  ../service-policy/infrastructure/aws_sqs_queue.yaml 2 resources
# 2/6]  ../service-policy/infrastructure/aws_sns_topic.yaml 4 resources
# 3/6]  ../service-policy/infrastructure/aws_dynamodb_table.yaml 6 resources
# 4/6]  ../service-policy/infrastructure/aws_lambda_function.yaml 12 resources
# 5/6]  ../service-policy/infrastructure/aws_api_gateway_deployment.yaml 1 resources
# 6/6]  ../service-policy/infrastructure/aws_cloudwatch_event_rule.yaml 3 resources
# total resources: 28

# Resources:
# 1] aws_api_gateway_base_path_mapping.policy_deployment-base-path-mapping
# 2] aws_api_gateway_deployment.policy_deployment
# 3] aws_cloudwatch_event_rule.policy_execution-scheduler-rule
# 4] aws_cloudwatch_event_rule.policy_scheduler-rule
# 5] aws_cloudwatch_event_rule.policy_whitelist-suspended-accounts-rule
# 6] aws_cloudwatch_event_target.policy_execution-scheduler-rule_target
# 7] aws_cloudwatch_event_target.policy_scheduler-rule_target
# 8] aws_cloudwatch_event_target.policy_whitelist-suspended-accounts-rule_target
# 9] aws_cloudwatch_metric_alarm.policy_action_ReadThrottleEvents_capacityAlarm
# 10] aws_cloudwatch_metric_alarm.policy_action_WriteThrottleEvents_capacityAlarm
# 11] aws_cloudwatch_metric_alarm.policy_api_lambda-errors
# 12] aws_cloudwatch_metric_alarm.policy_api_runaway_alarm
# 13] aws_cloudwatch_metric_alarm.policy_condition_ReadThrottleEvents_capacityAlarm
# 14] aws_cloudwatch_metric_alarm.policy_condition_WriteThrottleEvents_capacityAlarm
# 15] aws_cloudwatch_metric_alarm.policy_definition-api_lambda-errors
# 16] aws_cloudwatch_metric_alarm.policy_definition-api_runaway_alarm
# 17] aws_cloudwatch_metric_alarm.policy_definition-validator_lambda-errors
# 18] aws_cloudwatch_metric_alarm.policy_definition-validator_runaway_alarm
# 19] aws_cloudwatch_metric_alarm.policy_definition_ReadThrottleEvents_capacityAlarm
# 20] aws_cloudwatch_metric_alarm.policy_definition_WriteThrottleEvents_capacityAlarm
# 21] aws_cloudwatch_metric_alarm.policy_execution-api_lambda-errors
# 22] aws_cloudwatch_metric_alarm.policy_execution-api_runaway_alarm
# 23] aws_cloudwatch_metric_alarm.policy_execution-processor_lambda-errors
# 24] aws_cloudwatch_metric_alarm.policy_execution-processor_runaway_alarm
# 25] aws_cloudwatch_metric_alarm.policy_execution-scheduler_lambda-errors
# 26] aws_cloudwatch_metric_alarm.policy_execution-scheduler_runaway_alarm
# 27] aws_cloudwatch_metric_alarm.policy_execution-stream-processor_lambda-errors
# 28] aws_cloudwatch_metric_alarm.policy_execution-stream-processor_runaway_alarm
# 29] aws_cloudwatch_metric_alarm.policy_executions_ReadThrottleEvents_capacityAlarm
# 30] aws_cloudwatch_metric_alarm.policy_executions_WriteThrottleEvents_capacityAlarm
# 31] aws_cloudwatch_metric_alarm.policy_executor_lambda-errors
# 32] aws_cloudwatch_metric_alarm.policy_executor_runaway_alarm
# 33] aws_cloudwatch_metric_alarm.policy_policy_ReadThrottleEvents_capacityAlarm
# 34] aws_cloudwatch_metric_alarm.policy_policy_WriteThrottleEvents_capacityAlarm
# 35] aws_cloudwatch_metric_alarm.policy_scheduler_lambda-errors
# 36] aws_cloudwatch_metric_alarm.policy_scheduler_runaway_alarm
# 37] aws_cloudwatch_metric_alarm.policy_update-violations_lambda-errors
# 38] aws_cloudwatch_metric_alarm.policy_update-violations_runaway_alarm
# 39] aws_cloudwatch_metric_alarm.policy_whitelist-suspended-accounts_lambda-errors
# 40] aws_cloudwatch_metric_alarm.policy_whitelist-suspended-accounts_runaway_alarm
# 41] aws_cloudwatch_metric_alarm.policy_whitelist-sync_lambda-errors
# 42] aws_cloudwatch_metric_alarm.policy_whitelist-sync_runaway_alarm
# 43] aws_cloudwatch_metric_alarm.policy_whitelist_ReadThrottleEvents_capacityAlarm
# 44] aws_cloudwatch_metric_alarm.policy_whitelist_WriteThrottleEvents_capacityAlarm
# 45] aws_dynamodb_table.policy_action
# 46] aws_dynamodb_table.policy_condition
# 47] aws_dynamodb_table.policy_definition
# 48] aws_dynamodb_table.policy_executions
# 49] aws_dynamodb_table.policy_policy
# 50] aws_dynamodb_table.policy_whitelist
# 51] aws_iam_role.policy_api_role
# 52] aws_iam_role.policy_definition-api_role
# 53] aws_iam_role.policy_definition-validator_role
# 54] aws_iam_role.policy_execution-api_role
# 55] aws_iam_role.policy_execution-processor_role
# 56] aws_iam_role.policy_execution-scheduler_role
# 57] aws_iam_role.policy_execution-stream-processor_role
# 58] aws_iam_role.policy_executor_role
# 59] aws_iam_role.policy_gateway-invoke-lambda
# 60] aws_iam_role.policy_scheduler_role
# 61] aws_iam_role.policy_update-violations_role
# 62] aws_iam_role.policy_whitelist-suspended-accounts_role
# 63] aws_iam_role.policy_whitelist-sync_role
# 64] aws_iam_role_policy.policy_api_role_policy
# 65] aws_iam_role_policy.policy_definition-api_role_policy
# 66] aws_iam_role_policy.policy_definition-validator_role_policy
# 67] aws_iam_role_policy.policy_execution-api_role_policy
# 68] aws_iam_role_policy.policy_execution-processor_role_policy
# 69] aws_iam_role_policy.policy_execution-scheduler_role_policy
# 70] aws_iam_role_policy.policy_execution-stream-processor_role_policy
# 71] aws_iam_role_policy.policy_executor_role_policy
# 72] aws_iam_role_policy.policy_gateway-invoke-lambda_role_policy
# 73] aws_iam_role_policy.policy_scheduler_role_policy
# 74] aws_iam_role_policy.policy_update-violations_role_policy
# 75] aws_iam_role_policy.policy_whitelist-suspended-accounts_role_policy
# 76] aws_iam_role_policy.policy_whitelist-sync_role_policy
# 77] aws_lambda_event_source_mapping.policy_execution-processor_EvtMap_policy_execution
# 78] aws_lambda_event_source_mapping.policy_execution-stream-processor_EvtMap_policy_execution
# 79] aws_lambda_event_source_mapping.policy_update-violations_EvtMap_policy_stream
# 80] aws_lambda_function.policy_api
# 81] aws_lambda_function.policy_definition-api
# 82] aws_lambda_function.policy_definition-validator
# 83] aws_lambda_function.policy_execution-api
# 84] aws_lambda_function.policy_execution-processor
# 85] aws_lambda_function.policy_execution-scheduler
# 86] aws_lambda_function.policy_execution-stream-processor
# 87] aws_lambda_function.policy_executor
# 88] aws_lambda_function.policy_scheduler
# 89] aws_lambda_function.policy_update-violations
# 90] aws_lambda_function.policy_whitelist-suspended-accounts
# 91] aws_lambda_function.policy_whitelist-sync
# 92] aws_lambda_permission.policy_execution-scheduler-rule_invoke
# 93] aws_lambda_permission.policy_executor__scheduled--topic_sns_invoke_lambda_permission
# 94] aws_lambda_permission.policy_scheduler__trigger--scheduler-topic_sns_invoke_lambda_permission
# 95] aws_lambda_permission.policy_trigger-policy-scheduler-topic_invoke
# 96] aws_lambda_permission.policy_whitelist-suspended-accounts-rule_invoke
# 97] aws_lambda_permission.policy_whitelist-sync_account_account-topic_sns_invoke_lambda_permission
# 98] aws_sns_topic.policy_compliance-watch-violations-topic
# 99] aws_sns_topic.policy_execution-notifier-topic
# 100] aws_sns_topic.policy_scheduled-policy-topic
# 101] aws_sns_topic.policy_trigger-policy-scheduler-topic
# 102] aws_sns_topic_subscription.policy_execution-notifier-topic_Sub_sqs_policy_execution-queue
# 103] aws_sns_topic_subscription.policy_executor_Sub_policy_scheduled-policy-topic
# 104] aws_sns_topic_subscription.policy_scheduler_Sub_policy_trigger-policy-scheduler-topic
# 105] aws_sns_topic_subscription.policy_whitelist-sync_Sub_account_account-topic
# 106] aws_sqs_queue.policy_execution-deadletter-queue
# 107] aws_sqs_queue.policy_execution-queue
# 108] terraform_remote_state.acp-platform-s-policy-sandbox1_remote_state
# Resources generated: 80