
# ==============================================
# Terraform file generated by create-infra.py
# Generation time: 2020-08-21T13:04:24.269291
# ==============================================
provider "aws" {
    region                  = "us-east-1"
    shared_credentials_file = "/Users/james.n.wilson/.aws/credentials"
    profile                 = "stage-env1"
}
terraform {
  required_version = "= 0.11.2"
  backend "s3" {
    bucket  = "acp-platform-s-authorisation-stage-env1"
    key     = "infrastructure/terraform.tfstate"
    region  = "us-east-1"
  }
}
# ----------------------------------------------
data "terraform_remote_state" "acp-platform-s-authorisation-stage-env1_remote_state" {
    backend              = "s3"
    config {
      bucket             = "acp-platform-s-authorisation-stage-env1"
      key                = "infrastructure/terraform.tfstate"
      region             = "us-east-1"
    }
}


# ==============================================
# Imported from Terraform files

# Imported from ../service-authorisation//infrastructure/aws_cognito_user_pool.tf
# ==============================================
# Create authorisation_userpool userpool
# ==============================================
resource "aws_cognito_user_pool" "authorisation_userpool" {
  name                                = "authorisation_userpool"
  password_policy {
    minimum_length                    = 8
    require_lowercase                 = true
    require_numbers                   = true
    require_symbols                   = true
    require_uppercase                 = true
    temporary_password_validity_days  = 7
  }
  lambda_config {
    post_authentication               = "${aws_lambda_function.authorisation_cognito-post-confirmation.arn}"
  }
  schema {
    name = "email"
    attribute_data_type = "String"
    developer_only_attribute = false
    mutable = true
    required = true
    string_attribute_constraints {
      min_length = 1
      max_length = 100
    }
  }
  schema {
    name = "given_name"
    attribute_data_type = "String"
    developer_only_attribute = false
    mutable = true
    required = true
    string_attribute_constraints {
      min_length = 1
      max_length = 100
    }
  }
  schema {
    name = "family_name"
    attribute_data_type = "String"
    developer_only_attribute = false
    mutable = true
    required = true
    string_attribute_constraints {
      min_length = 1
      max_length = 100
    }
  }
  admin_create_user_config {
    allow_admin_create_user_only = false
    invite_message_template {
      email_message = "${file("/Users/james.n.wilson/code/work/repos/cd-pipeline/../service-authorisation//infrastructure/templates/userpool_email_notification.html")}"
      email_subject = "Welcome to Accenture Cloud Platform"
      sms_message = "Your username is {username} and temporary password is {####}."
    }
  }
  user_pool_add_ons {
    advanced_security_mode = "AUDIT"
  }
  username_configuration {
    case_sensitive = true
  }
  lifecycle {
    prevent_destroy = true
  }
}

# Imported from ../service-authorisation//infrastructure/aws_cognito_identity_provider.tf
# ==============================================
# Create aws_cognito_identity_provider userpool identity provider
# ==============================================
resource "aws_cognito_identity_provider" "authorisation_accenture-identity-provider" {
  user_pool_id                        = "${aws_cognito_user_pool.authorisation_userpool.id}"
  provider_name                       = "accenture.com"
  provider_type                       = "SAML"
  provider_details {
    MetadataURL                       = "https://login.microsoftonline.com/f3211d0e-125b-42c3-86db-322b19a65a22/federationmetadata/2007-06/federationmetadata.xml?appid=e56ef520-b21e-4137-9a0b-3a3850898b64"
  }
  attribute_mapping {
    email                             = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
    given_name                        = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname"
    family_name                       = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname"
  }
  lifecycle {
    prevent_destroy = true
  }
}

# ==============================================
# Generated from YAML files

# ==============================================
# aws_iam_role : ../service-authorisation//infrastructure/aws_iam_role.yaml

# ----------------------------------------------
resource "aws_iam_role" "authorisation_token-readwrite" {
    name                 = "authorisation_token-readwrite"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "AWS": "618061107238",
        "Service": "ec2.amazonaws.com"
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_token-readwrite"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role_policy for aws_iam_role
# ----------------------------------------------
resource "aws_iam_role_policy" "authorisation_token-readwrite_role_policy" {
    name                 = "authorisation_token-readwrite_role_policy"
    role                 = "${aws_iam_role.authorisation_token-readwrite.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "dynamodb:GetItem",
        "dynamodb:UpdateItem",
        "dynamodb:PutItem",
        "dynamodb:DeleteItem"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token"
      ]
    },
    {
      "Action": [
        "logs:DescribeLogStreams"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:us-east-1:148354739297:log-group:authorisation:log-stream:*"
      ]
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:us-east-1:148354739297:log-group:authorisation:log-stream:authorisation*"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
}

# ----------------------------------------------
resource "aws_iam_role" "authorisation_token-readonly" {
    name                 = "authorisation_token-readonly"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "AWS": "618061107238",
        "Service": "ec2.amazonaws.com"
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_token-readonly"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role_policy for aws_iam_role
# ----------------------------------------------
resource "aws_iam_role_policy" "authorisation_token-readonly_role_policy" {
    name                 = "authorisation_token-readonly_role_policy"
    role                 = "${aws_iam_role.authorisation_token-readonly.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "dynamodb:GetItem"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token"
      ]
    },
    {
      "Action": [
        "logs:DescribeLogStreams"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:us-east-1:148354739297:log-group:authorisation:log-stream:*"
      ]
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:us-east-1:148354739297:log-group:authorisation:log-stream:authorisation*"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
}


# ==============================================
# aws_sqs_queue : ../service-authorisation//infrastructure/aws_sqs_queue.yaml

# ----------------------------------------------
resource "aws_sqs_queue" "authorisation-okta-user-creation-queue" {
    name                 = "authorisation-okta-user-creation-queue"
    message_retention_seconds = 3600
    visibility_timeout_seconds = 1800
    redrive_policy       = "{\"deadLetterTargetArn\":\"${aws_sqs_queue.authorisation-okta-user-creation-deadletter-queue.arn}\",\"maxReceiveCount\":5}"
    policy               = "{ \"Version\": \"2012-10-17\", \"Id\": \"arn:aws:sqs:us-east-1:148354739297:authorisation-okta-user-creation-queue/SQSDefaultPolicy\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"*\" }, \"Action\": [\"SQS:SendMessage\", \"SQS:GetQueueUrl\"], \"Resource\": \"arn:aws:sqs:us-east-1:148354739297:authorisation-okta-user-creation-queue\", \"Condition\": { \"ArnEquals\": { \"aws:SourceArn\": \"arn:aws:lambda:us-east-1:148354739297:function:authorisation_oktausersource\" } } }, { \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"*\" }, \"Action\": [ \"SQS:ReceiveMessage\", \"SQS:GetQueueUrl\" ], \"Resource\": \"arn:aws:sqs:us-east-1:%%accountId%%:authorisation-okta-user-creation-queue\", \"Condition\": { \"ArnEquals\": { \"aws:SourceArn\": \"arn:aws:lambda:us-east-1:148354739297:function:authorisation_oktausertarget\" } } } ] }"
    lifecycle {
      prevent_destroy    = true
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation-okta-user-creation-queue"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
    kms_master_key_id    = "${aws_kms_key.authorisation_master-key.arn}"
    kms_data_key_reuse_period_seconds = 3600
}

# ----------------------------------------------
resource "aws_sqs_queue" "authorisation-okta-user-creation-deadletter-queue" {
    name                 = "authorisation-okta-user-creation-deadletter-queue"
    message_retention_seconds = 604800
    visibility_timeout_seconds = 1000
    lifecycle {
      prevent_destroy    = true
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation-okta-user-creation-deadletter-queue"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
    kms_master_key_id    = "${aws_kms_key.authorisation_master-key.arn}"
    kms_data_key_reuse_period_seconds = 3600
}


# ==============================================
# aws_sns_topic : ../service-authorisation//infrastructure/aws_sns_topic.yaml

# ----------------------------------------------
resource "aws_sns_topic" "authorisation_oktausersource-s3-upload-topic" {
    name                 = "authorisation_oktausersource-s3-upload-topic"
    policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "s3.amazonaws.com"
      },
      "Action": "SNS:Publish",
      "Resource": "arn:aws:sns:*:*:authorisation_oktausersource-s3-upload-topic",
      "Condition": {
        "ArnLike": {
          "aws:SourceArn": "arn:aws:s3:::acp-platform-s-authorisation-stage-env1"
        }
      }
    }
  ]
}
EOF
}

# Generating aws_lambda_permission for aws_sns_topic
# ----------------------------------------------
resource "aws_lambda_permission" "authorisation_oktausersource-s3-upload-topic_invoke" {
    source_arn           = "${aws_sns_topic.authorisation_oktausersource-s3-upload-topic.arn}"
    statement_id         = "authorisation_oktausersource-s3-upload-topic_invoke"
    action               = "lambda:InvokeFunction"
    principal            = "sns.amazonaws.com"
    function_name        = "${aws_lambda_function.authorisation_oktausersource.arn}"
}


# ==============================================
# aws_dynamodb_table : ../service-authorisation//infrastructure/aws_dynamodb_table.yaml

# ----------------------------------------------
resource "aws_dynamodb_table" "authorisation_token" {
    name                 = "authorisation_token"
    attribute {
      name               = "Token"
      type               = "S"
    }
    attribute {
      name               = "AccessTime"
      type               = "N"
    }
    attribute {
      name               = "Active"
      type               = "S"
    }
    attribute {
      name               = "UserId"
      type               = "S"
    }
    attribute {
      name               = "jwtHash"
      type               = "S"
    }
    hash_key             = "Token"
    ttl {
      attribute_name     = "ExpirationTime"
      enabled            = true
    }
    global_secondary_index {
      name               = "AccessTime"
      hash_key           = "Active"
      range_key          = "AccessTime"
      projection_type    = "ALL"
      write_capacity     = 10
      read_capacity      = 5
    }
    global_secondary_index {
      name               = "UserTokens"
      hash_key           = "UserId"
      range_key          = "AccessTime"
      projection_type    = "ALL"
      write_capacity     = 10
      read_capacity      = 5
    }
    global_secondary_index {
      name               = "jwtHash"
      hash_key           = "jwtHash"
      range_key          = "AccessTime"
      projection_type    = "ALL"
      write_capacity     = 10
      read_capacity      = 5
    }
    read_capacity        = 5
    write_capacity       = 10
    lifecycle {
      prevent_destroy    = true
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_token"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
    point_in_time_recovery {
      enabled            = true
    }
}

# ----------------------------------------------
resource "aws_dynamodb_table" "authorisation_role" {
    name                 = "authorisation_role"
    attribute {
      name               = "id"
      type               = "S"
    }
    hash_key             = "id"
    read_capacity        = 5
    write_capacity       = 5
    lifecycle {
      prevent_destroy    = true
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_role"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
    point_in_time_recovery {
      enabled            = true
    }
}

# ----------------------------------------------
resource "aws_dynamodb_table" "authorisation_permission" {
    name                 = "authorisation_permission"
    attribute {
      name               = "component"
      type               = "S"
    }
    hash_key             = "component"
    read_capacity        = 5
    write_capacity       = 5
    lifecycle {
      prevent_destroy    = true
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_permission"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
    point_in_time_recovery {
      enabled            = true
    }
}

# ----------------------------------------------
resource "aws_dynamodb_table" "authorisation_idp" {
    name                 = "authorisation_idp"
    attribute {
      name               = "domain"
      type               = "S"
    }
    hash_key             = "domain"
    read_capacity        = 5
    write_capacity       = 5
    lifecycle {
      prevent_destroy    = true
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_idp"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
    point_in_time_recovery {
      enabled            = true
    }
}


# ==============================================
# aws_lambda_function : ../service-authorisation//infrastructure/aws_lambda_function.yaml

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "authorisation_authenticate_role" {
    name                 = "authorisation_authenticate_role"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "AWS": "618061107238",
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_authenticate_role"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "authorisation_authenticate_role_policy" {
    name                 = "authorisation_authenticate_role_policy"
    role                 = "${aws_iam_role.authorisation_authenticate_role.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*authorisation_authenticate*"
      ]
    },
    {
      "Action": [
        "dynamodb:Query",
        "dynamodb:GetItem"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authentication_key/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authentication_key"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
    depends_on           = [ "aws_iam_role.authorisation_authenticate_role" ]
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_authenticate_runaway_alarm" {
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    evaluation_periods   = 6
    datapoints_to_alarm  = 6
    metric_name          = "Invocations"
    namespace            = "AWS/Lambda"
    period               = 300
    statistic            = "SampleCount"
    threshold            = 100
    alarm_description    = "This metric monitors an individual lambda's invocations"
    treat_missing_data   = "notBreaching"
    dimensions = {
        FunctionName = "authorisation_authenticate"
    }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_authenticate_runaway_alarm"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_authenticate_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_authenticate_lambda-errors" {
    comparison_operator  = "GreaterThanThreshold"
    evaluation_periods   = 1
    datapoints_to_alarm  = 1
    metric_name          = "Errors"
    namespace            = "AWS/Lambda"
    period               = 3600
    statistic            = "Sum"
    threshold            = 0
    alarm_description    = "This metric monitors an individual lambdas invocations"
    treat_missing_data   = "notBreaching"
    dimensions = { FunctionName = "authorisation_authenticate" }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_authenticate_lambda-errors"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_authenticate_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_lambda_function" "authorisation_authenticate" {
    description          = "API to authenticate a key or token, which returns scope or allowedOperations records"
    handler              = "index.handler"
    runtime              = "python3.6"
    memory_size          = 512
    timeout              = 30
    filename             = "/tmp/python_lambda_stub.zip"
    role                 = "${aws_iam_role.authorisation_authenticate_role.arn}"
    depends_on           = [ "aws_iam_role.authorisation_authenticate_role" ]
    function_name        = "authorisation_authenticate"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_authenticate"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "authorisation_api_role" {
    name                 = "authorisation_api_role"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "AWS": "618061107238",
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_api_role"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "authorisation_api_role_policy" {
    name                 = "authorisation_api_role_policy"
    role                 = "${aws_iam_role.authorisation_api_role.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*authorisation_api*"
      ]
    },
    {
      "Action": [
        "dynamodb:GetItem"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token"
      ]
    },
    {
      "Action": [
        "dynamodb:Query"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authentication_key/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authentication_key"
      ]
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/*"
      ]
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/env/*"
      ]
    },
    {
      "Action": [
        "cognito-idp:DescribeUserPoolClient",
        "cognito-idp:ListIdentityProviders"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:cognito-idp:us-east-1:148354739297:*"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
    depends_on           = [ "aws_iam_role.authorisation_api_role" ]
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_api_runaway_alarm" {
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    evaluation_periods   = 6
    datapoints_to_alarm  = 6
    metric_name          = "Invocations"
    namespace            = "AWS/Lambda"
    period               = 300
    statistic            = "SampleCount"
    threshold            = 100
    alarm_description    = "This metric monitors an individual lambda's invocations"
    treat_missing_data   = "notBreaching"
    dimensions = {
        FunctionName = "authorisation_api"
    }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_api_runaway_alarm"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_api_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_api_lambda-errors" {
    comparison_operator  = "GreaterThanThreshold"
    evaluation_periods   = 1
    datapoints_to_alarm  = 1
    metric_name          = "Errors"
    namespace            = "AWS/Lambda"
    period               = 3600
    statistic            = "Sum"
    threshold            = 0
    alarm_description    = "This metric monitors an individual lambdas invocations"
    treat_missing_data   = "notBreaching"
    dimensions = { FunctionName = "authorisation_api" }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_api_lambda-errors"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_api_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_lambda_function" "authorisation_api" {
    description          = "Say hello API"
    handler              = "lib/index.handler"
    runtime              = "nodejs10.x"
    memory_size          = 128
    timeout              = 10
    filename             = "/tmp/nodejs_lambda_stub.zip"
    role                 = "${aws_iam_role.authorisation_api_role.arn}"
    depends_on           = [ "aws_iam_role.authorisation_api_role" ]
    function_name        = "authorisation_api"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_api"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "authorisation_cognito-post-confirmation_role" {
    name                 = "authorisation_cognito-post-confirmation_role"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "AWS": "618061107238",
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_cognito-post-confirmation_role"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "authorisation_cognito-post-confirmation_role_policy" {
    name                 = "authorisation_cognito-post-confirmation_role_policy"
    role                 = "${aws_iam_role.authorisation_cognito-post-confirmation_role.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*authorisation_cognito-post-confirmation*"
      ]
    },
    {
      "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token"
      ]
    },
    {
      "Action": [
        "dynamodb:Query"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authentication_key/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authentication_key"
      ]
    },
    {
      "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/user_user/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/user_user"
      ]
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/*"
      ]
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/env/*"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
    depends_on           = [ "aws_iam_role.authorisation_cognito-post-confirmation_role" ]
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_cognito-post-confirmation_runaway_alarm" {
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    evaluation_periods   = 6
    datapoints_to_alarm  = 6
    metric_name          = "Invocations"
    namespace            = "AWS/Lambda"
    period               = 300
    statistic            = "SampleCount"
    threshold            = 100
    alarm_description    = "This metric monitors an individual lambda's invocations"
    treat_missing_data   = "notBreaching"
    dimensions = {
        FunctionName = "authorisation_cognito-post-confirmation"
    }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_cognito-post-confirmation_runaway_alarm"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_cognito-post-confirmation_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_cognito-post-confirmation_lambda-errors" {
    comparison_operator  = "GreaterThanThreshold"
    evaluation_periods   = 1
    datapoints_to_alarm  = 1
    metric_name          = "Errors"
    namespace            = "AWS/Lambda"
    period               = 3600
    statistic            = "Sum"
    threshold            = 0
    alarm_description    = "This metric monitors an individual lambdas invocations"
    treat_missing_data   = "notBreaching"
    dimensions = { FunctionName = "authorisation_cognito-post-confirmation" }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_cognito-post-confirmation_lambda-errors"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_cognito-post-confirmation_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_lambda_function" "authorisation_cognito-post-confirmation" {
    description          = "Responds to cognito post confirmation events"
    handler              = "lib/index.handler"
    runtime              = "nodejs10.x"
    memory_size          = 128
    timeout              = 10
    filename             = "/tmp/nodejs_lambda_stub.zip"
    role                 = "${aws_iam_role.authorisation_cognito-post-confirmation_role.arn}"
    depends_on           = [ "aws_iam_role.authorisation_cognito-post-confirmation_role" ]
    function_name        = "authorisation_cognito-post-confirmation"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_cognito-post-confirmation"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "authorisation_register-idp_role" {
    name                 = "authorisation_register-idp_role"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "AWS": "618061107238",
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_register-idp_role"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "authorisation_register-idp_role_policy" {
    name                 = "authorisation_register-idp_role_policy"
    role                 = "${aws_iam_role.authorisation_register-idp_role.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*authorisation_register-idp*"
      ]
    },
    {
      "Action": [
        "secretsmanager:GetSecretValue"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:secretsmanager:us-east-1:148354739297:secret:authorisation*"
      ]
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/acp3/*"
      ]
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/*"
      ]
    },
    {
      "Action": [
        "s3:PutObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/okta-client-metadata/*",
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/cognito-client-metadata/*"
      ]
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/okta-client-metadata/*",
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/cognito-client-metadata/*"
      ]
    },
    {
      "Action": [
        "cognito-idp:ListIdentityProviders",
        "cognito-idp:CreateIdentityProvider",
        "cognito-idp:DescribeUserPool",
        "cognito-idp:CreateUserPoolDomain",
        "cognito-idp:UpdateUserPoolClient"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:cognito-idp:us-east-1:148354739297:userpool/*"
      ]
    },
    {
      "Action": [
        "cognito-idp:CreateUserPool",
        "cognito-idp:CreateUserPoolClient"
      ],
      "Effect": "Allow",
      "Resource": [
        "*"
      ]
    },
    {
      "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_idp/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_idp"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
    depends_on           = [ "aws_iam_role.authorisation_register-idp_role" ]
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_register-idp_runaway_alarm" {
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    evaluation_periods   = 6
    datapoints_to_alarm  = 6
    metric_name          = "Invocations"
    namespace            = "AWS/Lambda"
    period               = 300
    statistic            = "SampleCount"
    threshold            = 100
    alarm_description    = "This metric monitors an individual lambda's invocations"
    treat_missing_data   = "notBreaching"
    dimensions = {
        FunctionName = "authorisation_register-idp"
    }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_register-idp_runaway_alarm"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_register-idp_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_register-idp_lambda-errors" {
    comparison_operator  = "GreaterThanThreshold"
    evaluation_periods   = 1
    datapoints_to_alarm  = 1
    metric_name          = "Errors"
    namespace            = "AWS/Lambda"
    period               = 3600
    statistic            = "Sum"
    threshold            = 0
    alarm_description    = "This metric monitors an individual lambdas invocations"
    treat_missing_data   = "notBreaching"
    dimensions = { FunctionName = "authorisation_register-idp" }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_register-idp_lambda-errors"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_register-idp_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_lambda_function" "authorisation_register-idp" {
    description          = "Registers client IdP"
    handler              = "index.handler"
    runtime              = "python3.6"
    memory_size          = 1024
    timeout              = 300
    filename             = "/tmp/python_lambda_stub.zip"
    role                 = "${aws_iam_role.authorisation_register-idp_role.arn}"
    depends_on           = [ "aws_iam_role.authorisation_register-idp_role" ]
    function_name        = "authorisation_register-idp"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_register-idp"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "authorisation_integration-api_role" {
    name                 = "authorisation_integration-api_role"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "AWS": "618061107238",
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_integration-api_role"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "authorisation_integration-api_role_policy" {
    name                 = "authorisation_integration-api_role_policy"
    role                 = "${aws_iam_role.authorisation_integration-api_role.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*authorisation_integration-api*"
      ]
    },
    {
      "Action": [
        "secretsmanager:GetSecretValue"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:secretsmanager:us-east-1:148354739297:secret:authorisation*"
      ]
    },
    {
      "Action": [
        "dynamodb:Query",
        "dynamodb:GetItem"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authentication_key/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authentication_key"
      ]
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/*"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
    depends_on           = [ "aws_iam_role.authorisation_integration-api_role" ]
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_integration-api_runaway_alarm" {
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    evaluation_periods   = 6
    datapoints_to_alarm  = 6
    metric_name          = "Invocations"
    namespace            = "AWS/Lambda"
    period               = 300
    statistic            = "SampleCount"
    threshold            = 100
    alarm_description    = "This metric monitors an individual lambda's invocations"
    treat_missing_data   = "notBreaching"
    dimensions = {
        FunctionName = "authorisation_integration-api"
    }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_integration-api_runaway_alarm"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_integration-api_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_integration-api_lambda-errors" {
    comparison_operator  = "GreaterThanThreshold"
    evaluation_periods   = 1
    datapoints_to_alarm  = 1
    metric_name          = "Errors"
    namespace            = "AWS/Lambda"
    period               = 3600
    statistic            = "Sum"
    threshold            = 0
    alarm_description    = "This metric monitors an individual lambdas invocations"
    treat_missing_data   = "notBreaching"
    dimensions = { FunctionName = "authorisation_integration-api" }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_integration-api_lambda-errors"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_integration-api_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_lambda_function" "authorisation_integration-api" {
    description          = "API to integrate with third party applications using okta"
    handler              = "index.handler"
    runtime              = "python3.6"
    memory_size          = 512
    timeout              = 30
    filename             = "/tmp/python_lambda_stub.zip"
    role                 = "${aws_iam_role.authorisation_integration-api_role.arn}"
    depends_on           = [ "aws_iam_role.authorisation_integration-api_role" ]
    function_name        = "authorisation_integration-api"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_integration-api"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "authorisation_oktausersource_role" {
    name                 = "authorisation_oktausersource_role"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "AWS": "618061107238",
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_oktausersource_role"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "authorisation_oktausersource_role_policy" {
    name                 = "authorisation_oktausersource_role_policy"
    role                 = "${aws_iam_role.authorisation_oktausersource_role.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*authorisation_oktausersource*"
      ]
    },
    {
      "Action": [
        "s3:ListBucket"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1"
      ]
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/acp3/*"
      ]
    },
    {
      "Action": [
        "sqs:GetQueueUrl",
        "sqs:SendMessage",
        "sqs:SendMessageBatch"
      ],
      "Effect": "Allow",
      "Resource": [
        "${aws_sqs_queue.authorisation-okta-user-creation-queue.arn}"
      ]
    },
    {
      "Action": [
        "kms:GenerateDataKey*",
        "kms:Decrypt"
      ],
      "Effect": "Allow",
      "Resource": [
        "${aws_kms_key.authorisation_master-key.arn}"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
    depends_on           = [ "aws_iam_role.authorisation_oktausersource_role" ]
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_oktausersource_runaway_alarm" {
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    evaluation_periods   = 6
    datapoints_to_alarm  = 6
    metric_name          = "Invocations"
    namespace            = "AWS/Lambda"
    period               = 300
    statistic            = "SampleCount"
    threshold            = 100
    alarm_description    = "This metric monitors an individual lambda's invocations"
    treat_missing_data   = "notBreaching"
    dimensions = {
        FunctionName = "authorisation_oktausersource"
    }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_oktausersource_runaway_alarm"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_oktausersource_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_oktausersource_lambda-errors" {
    comparison_operator  = "GreaterThanThreshold"
    evaluation_periods   = 1
    datapoints_to_alarm  = 1
    metric_name          = "Errors"
    namespace            = "AWS/Lambda"
    period               = 3600
    statistic            = "Sum"
    threshold            = 0
    alarm_description    = "This metric monitors an individual lambdas invocations"
    treat_missing_data   = "notBreaching"
    dimensions = { FunctionName = "authorisation_oktausersource" }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_oktausersource_lambda-errors"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_oktausersource_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_lambda_function" "authorisation_oktausersource" {
    description          = "s3 trigger event"
    handler              = "index.handler"
    runtime              = "python3.6"
    memory_size          = 1024
    timeout              = 30
    filename             = "/tmp/python_lambda_stub.zip"
    role                 = "${aws_iam_role.authorisation_oktausersource_role.arn}"
    depends_on           = [ "aws_iam_role.authorisation_oktausersource_role" ]
    function_name        = "authorisation_oktausersource"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_oktausersource"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_lambda_permission for SNS ${aws_sns_topic.authorisation_oktausersource-s3-upload-topic.arn}
# ----------------------------------------------
resource "aws_lambda_permission" "authorisation_oktausersource__oktausersource-s3-upload-topic_sns_invoke_lambda_permission" {
    source_arn           = "${aws_sns_topic.authorisation_oktausersource-s3-upload-topic.arn}"
    statement_id         = "authorisation_oktausersource__oktausersource-s3-upload-topic_sns_invoke_lambda_permission"
    action               = "lambda:InvokeFunction"
    principal            = "sns.amazonaws.com"
    function_name        = "${aws_lambda_function.authorisation_oktausersource.arn}"
    depends_on           = [ "aws_lambda_function.authorisation_oktausersource" ]
}

# Generating aws_sns_topic_subscription for aws_lambda_function
# ----------------------------------------------
resource "aws_sns_topic_subscription" "authorisation_oktausersource_Sub_authorisation_oktausersource-s3-upload-topic" {
    protocol             = "lambda"
    topic_arn            = "${aws_sns_topic.authorisation_oktausersource-s3-upload-topic.arn}"
    endpoint             = "${aws_lambda_function.authorisation_oktausersource.arn}"
    depends_on           = [ "aws_lambda_function.authorisation_oktausersource" ]
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "authorisation_oktausertarget_role" {
    name                 = "authorisation_oktausertarget_role"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "AWS": "618061107238",
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_oktausertarget_role"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "authorisation_oktausertarget_role_policy" {
    name                 = "authorisation_oktausertarget_role_policy"
    role                 = "${aws_iam_role.authorisation_oktausertarget_role.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*authorisation_oktausertarget*"
      ]
    },
    {
      "Action": [
        "sqs:GetQueueAttributes",
        "sqs:DeleteMessage",
        "sqs:ChangeMessageVisibility",
        "sqs:DeleteMessageBatch",
        "sqs:ChangeMessageVisibilityBatch",
        "sqs:ReceiveMessage"
      ],
      "Effect": "Allow",
      "Resource": [
        "${aws_sqs_queue.authorisation-okta-user-creation-queue.arn}"
      ]
    },
    {
      "Action": [
        "kms:GenerateDataKey*",
        "kms:Decrypt"
      ],
      "Effect": "Allow",
      "Resource": [
        "${aws_kms_key.authorisation_master-key.arn}"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
    depends_on           = [ "aws_iam_role.authorisation_oktausertarget_role" ]
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_oktausertarget_runaway_alarm" {
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    evaluation_periods   = 6
    datapoints_to_alarm  = 6
    metric_name          = "Invocations"
    namespace            = "AWS/Lambda"
    period               = 300
    statistic            = "SampleCount"
    threshold            = 100
    alarm_description    = "This metric monitors an individual lambda's invocations"
    treat_missing_data   = "notBreaching"
    dimensions = {
        FunctionName = "authorisation_oktausertarget"
    }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_oktausertarget_runaway_alarm"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_oktausertarget_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_oktausertarget_lambda-errors" {
    comparison_operator  = "GreaterThanThreshold"
    evaluation_periods   = 1
    datapoints_to_alarm  = 1
    metric_name          = "Errors"
    namespace            = "AWS/Lambda"
    period               = 3600
    statistic            = "Sum"
    threshold            = 0
    alarm_description    = "This metric monitors an individual lambdas invocations"
    treat_missing_data   = "notBreaching"
    dimensions = { FunctionName = "authorisation_oktausertarget" }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_oktausertarget_lambda-errors"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_oktausertarget_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_lambda_function" "authorisation_oktausertarget" {
    description          = "Receive messages from sqs and send API request to Okta for creating users"
    handler              = "index.handler"
    runtime              = "python3.6"
    memory_size          = 1024
    timeout              = 300
    reserved_concurrent_executions = 3
    filename             = "/tmp/python_lambda_stub.zip"
    role                 = "${aws_iam_role.authorisation_oktausertarget_role.arn}"
    depends_on           = [ "aws_iam_role.authorisation_oktausertarget_role" ]
    function_name        = "authorisation_oktausertarget"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_oktausertarget"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_lambda_event_source_mapping for aws_lambda_function
# ----------------------------------------------
resource "aws_lambda_event_source_mapping" "authorisation_oktausertarget_EvtMap_authorisation_oktauser-target" {
    function_name        = "authorisation_oktausertarget"
    event_source_arn     = "${aws_sqs_queue.authorisation-okta-user-creation-queue.arn}"
    batch_size           = 5
    depends_on           = [ "aws_lambda_function.authorisation_oktausertarget" ]
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "authorisation_userpermissions_role" {
    name                 = "authorisation_userpermissions_role"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "AWS": "618061107238",
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_userpermissions_role"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "authorisation_userpermissions_role_policy" {
    name                 = "authorisation_userpermissions_role_policy"
    role                 = "${aws_iam_role.authorisation_userpermissions_role.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*authorisation_userpermissions*"
      ]
    },
    {
      "Action": [
        "dynamodb:GetItem",
        "dynamodb:Query"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authentication_key/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authentication_key"
      ]
    },
    {
      "Action": [
        "dynamodb:GetItem",
        "dynamodb:Query",
        "dynamodb:Scan"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_permission/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_permission",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_role/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_role"
      ]
    },
    {
      "Action": [
        "dynamodb:GetItem",
        "dynamodb:Query"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/user_user/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/user_user"
      ]
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1"
      ]
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/*"
      ]
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-authorisation-stage-env1/env/*"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
    depends_on           = [ "aws_iam_role.authorisation_userpermissions_role" ]
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_userpermissions_runaway_alarm" {
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    evaluation_periods   = 6
    datapoints_to_alarm  = 6
    metric_name          = "Invocations"
    namespace            = "AWS/Lambda"
    period               = 300
    statistic            = "SampleCount"
    threshold            = 100
    alarm_description    = "This metric monitors an individual lambda's invocations"
    treat_missing_data   = "notBreaching"
    dimensions = {
        FunctionName = "authorisation_userpermissions"
    }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_userpermissions_runaway_alarm"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_userpermissions_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "authorisation_userpermissions_lambda-errors" {
    comparison_operator  = "GreaterThanThreshold"
    evaluation_periods   = 1
    datapoints_to_alarm  = 1
    metric_name          = "Errors"
    namespace            = "AWS/Lambda"
    period               = 3600
    statistic            = "Sum"
    threshold            = 0
    alarm_description    = "This metric monitors an individual lambdas invocations"
    treat_missing_data   = "notBreaching"
    dimensions = { FunctionName = "authorisation_userpermissions" }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "authorisation_userpermissions_lambda-errors"
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_userpermissions_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# ----------------------------------------------
resource "aws_lambda_function" "authorisation_userpermissions" {
    description          = "User permissions api used to fetch the user's roles and provide you with the permissions for the roles."
    handler              = "index.handler"
    runtime              = "python3.6"
    memory_size          = 1024
    timeout              = 30
    filename             = "/tmp/python_lambda_stub.zip"
    role                 = "${aws_iam_role.authorisation_userpermissions_role.arn}"
    depends_on           = [ "aws_iam_role.authorisation_userpermissions_role" ]
    function_name        = "authorisation_userpermissions"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_userpermissions"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}


# ==============================================
# aws_api_gateway_deployment : ../service-authorisation//infrastructure/aws_api_gateway_deployment.yaml

# ----------------------------------------------
resource "aws_iam_role" "authorisation_gateway-invoke-lambda" {
    name                 = "authorisation_gateway-invoke-lambda"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "AWS": "618061107238",
        "Service": "apigateway.amazonaws.com"
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "authorisation_gateway-invoke-lambda"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
}

# Generating aws_iam_role_policy for aws_iam_role
# ----------------------------------------------
resource "aws_iam_role_policy" "authorisation_gateway-invoke-lambda_role_policy" {
    name                 = "authorisation_gateway-invoke-lambda_role_policy"
    role                 = "${aws_iam_role.authorisation_gateway-invoke-lambda.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:lambda:us-east-1:148354739297:function:authorisation_authenticate",
        "arn:aws:lambda:us-east-1:148354739297:function:authorisation_integration-api",
        "arn:aws:lambda:us-east-1:148354739297:function:authorisation_api",
        "arn:aws:lambda:us-east-1:148354739297:function:authorisation_oktausersource",
        "arn:aws:lambda:us-east-1:148354739297:function:authorisation_oktausertarget",
        "arn:aws:lambda:us-east-1:148354739297:function:authorisation_userpermissions"
      ]
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:*"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
}



# Generating aws_api_gateway_rest_api for aws_api_gateway_deployment
# ----------------------------------------------
resource "aws_api_gateway_rest_api" "authorisation" {
    name = "authorisation"
    binary_media_types = ["*/*"]
    # policy = <<POLICY
    # {
    #     "Version": "2012-10-17",
    #     "Statement": [
    #         {
    #             "Effect": "Allow",
    #             "Principal": "*",
    #             "Action": "execute-api:Invoke",
    #             "Resource": [
    #                 "execute-api:/*"
    #             ]
    #         },
    #         {
    #             "Effect": "Deny",
    #             "Principal": "*",
    #             "Action": "execute-api:Invoke",
    #             "Resource": [
    #             "execute-api:/*"
    #             ],
    #             "Condition" : {
    #                 "IpAddress": {
    #                     "aws:SourceIp": []
    #                 }
    #             }
    #         }
    #     ]
    # }
    # POLICY
}


# Generating aws_api_gateway_resource for path part authenticate
# ----------------------------------------------
resource "aws_api_gateway_resource" "authorisation_deployment-authenticate_resource" {
    parent_id = "${aws_api_gateway_rest_api.authorisation.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    path_part="authenticate"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "authorisation_deployment-authenticate_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.authorisation_deployment-authenticate_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "authorisation_integration_authorisation_deployment-authenticate_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    resource_id = "${aws_api_gateway_resource.authorisation_deployment-authenticate_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "authorisation_integration_authorisation_deployment-authenticate_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.authorisation_deployment-authenticate_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.authorisation_authenticate.arn}/invocations"
    http_method = "${aws_api_gateway_method.authorisation_integration_authorisation_deployment-authenticate_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    credentials = "${aws_iam_role.authorisation_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part integration
# ----------------------------------------------
resource "aws_api_gateway_resource" "authorisation_deployment-integration_resource" {
    parent_id = "${aws_api_gateway_rest_api.authorisation.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    path_part="integration"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "authorisation_deployment-integration_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.authorisation_deployment-integration_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "authorisation_integration_authorisation_deployment-integration_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    resource_id = "${aws_api_gateway_resource.authorisation_deployment-integration_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "authorisation_integration_authorisation_deployment-integration_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.authorisation_deployment-integration_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.authorisation_integration-api.arn}/invocations"
    http_method = "${aws_api_gateway_method.authorisation_integration_authorisation_deployment-integration_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    credentials = "${aws_iam_role.authorisation_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part signin
# ----------------------------------------------
resource "aws_api_gateway_resource" "authorisation_deployment-signin_resource" {
    parent_id = "${aws_api_gateway_rest_api.authorisation.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    path_part="signin"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "authorisation_deployment-signin_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.authorisation_deployment-signin_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "authorisation_integration_authorisation_deployment-signin_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    resource_id = "${aws_api_gateway_resource.authorisation_deployment-signin_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "authorisation_integration_authorisation_deployment-signin_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.authorisation_deployment-signin_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.authorisation_api.arn}/invocations"
    http_method = "${aws_api_gateway_method.authorisation_integration_authorisation_deployment-signin_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    credentials = "${aws_iam_role.authorisation_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part source
# ----------------------------------------------
resource "aws_api_gateway_resource" "authorisation_deployment-source_resource" {
    parent_id = "${aws_api_gateway_rest_api.authorisation.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    path_part="source"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "authorisation_deployment-source_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.authorisation_deployment-source_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "authorisation_integration_authorisation_deployment-source_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    resource_id = "${aws_api_gateway_resource.authorisation_deployment-source_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "authorisation_integration_authorisation_deployment-source_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.authorisation_deployment-source_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.authorisation_oktausersource.arn}/invocations"
    http_method = "${aws_api_gateway_method.authorisation_integration_authorisation_deployment-source_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    credentials = "${aws_iam_role.authorisation_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part target
# ----------------------------------------------
resource "aws_api_gateway_resource" "authorisation_deployment-target_resource" {
    parent_id = "${aws_api_gateway_rest_api.authorisation.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    path_part="target"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "authorisation_deployment-target_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.authorisation_deployment-target_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "authorisation_integration_authorisation_deployment-target_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    resource_id = "${aws_api_gateway_resource.authorisation_deployment-target_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "authorisation_integration_authorisation_deployment-target_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.authorisation_deployment-target_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.authorisation_oktausertarget.arn}/invocations"
    http_method = "${aws_api_gateway_method.authorisation_integration_authorisation_deployment-target_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    credentials = "${aws_iam_role.authorisation_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part user-permissions
# ----------------------------------------------
resource "aws_api_gateway_resource" "authorisation_deployment-user-permissions_resource" {
    parent_id = "${aws_api_gateway_rest_api.authorisation.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    path_part="user-permissions"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "authorisation_deployment-user-permissions_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.authorisation_deployment-user-permissions_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "authorisation_integration_authorisation_deployment-user-permissions_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    resource_id = "${aws_api_gateway_resource.authorisation_deployment-user-permissions_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "authorisation_integration_authorisation_deployment-user-permissions_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.authorisation_deployment-user-permissions_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.authorisation_userpermissions.arn}/invocations"
    http_method = "${aws_api_gateway_method.authorisation_integration_authorisation_deployment-user-permissions_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.authorisation.id}"
    credentials = "${aws_iam_role.authorisation_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}

# Generating base path mapping for component
# ----------------------------------------------
resource "aws_api_gateway_base_path_mapping" "authorisation_deployment-base-path-mapping" {
    base_path            = "authorisation"
    api_id               = "${aws_api_gateway_rest_api.authorisation.id}"
    stage_name           = "stage_env1"
    domain_name          = "api.stage-env1.cloudplatform.accenture.com"
    depends_on           = [ "aws_api_gateway_deployment.authorisation_deployment" ]
}

# ----------------------------------------------
resource "aws_api_gateway_deployment" "authorisation_deployment" {
    stage_name           = "stage_env1"
    rest_api_id          = "${aws_api_gateway_rest_api.authorisation.id}"
    depends_on           = [ "aws_api_gateway_integration.authorisation_integration_authorisation_deployment-authenticate_resource_ANY_int","aws_api_gateway_integration.authorisation_integration_authorisation_deployment-integration_resource_ANY_int","aws_api_gateway_integration.authorisation_integration_authorisation_deployment-signin_resource_ANY_int","aws_api_gateway_integration.authorisation_integration_authorisation_deployment-source_resource_ANY_int","aws_api_gateway_integration.authorisation_integration_authorisation_deployment-target_resource_ANY_int","aws_api_gateway_integration.authorisation_integration_authorisation_deployment-user-permissions_resource_ANY_int" ]
}


# ==============================================
# aws_cognito_user_pool_domain : ../service-authorisation//infrastructure/aws_cognito_user_pool_domain.yaml

# ----------------------------------------------
resource "aws_cognito_user_pool_domain" "authorisation_domain" {
    domain               = "stage-env1-cloudplatform-accenture-com"
    user_pool_id         = "${aws_cognito_user_pool.authorisation_userpool.id}"
    lifecycle {
      prevent_destroy    = true
    }
}


# ==============================================
# aws_s3_bucket_notification : ../service-authorisation//infrastructure/aws_s3_bucket_notification.yaml

# ----------------------------------------------
resource "aws_s3_bucket_notification" "authorisation_oktausersource-s3-upload" {
    bucket               = "acp-platform-s-authorisation-stage-env1"

    topic {
        topic_arn = "${aws_sns_topic.authorisation_oktausersource-s3-upload-topic.arn}"
        events              = ["s3:ObjectCreated:Put"]
        filter_prefix       = "acp3/"
        filter_suffix       = ".json"
    }

    depends_on           = [ "aws_sns_topic.authorisation_oktausersource-s3-upload-topic" ]
}


# ==============================================
# aws_ses_identity_policy : ../service-authorisation//infrastructure/aws_ses_identity_policy.yaml


# ==============================================
# aws_cloudwatch_log_group : ../service-authorisation//infrastructure/aws_cloudwatch_log_group.yaml

# ----------------------------------------------
resource "aws_cloudwatch_log_group" "authorisation_loggroup" {
    name                 = "authorisation"
}


# ==============================================
# aws_cognito_user_pool_client : ../service-authorisation//infrastructure/aws_cognito_user_pool_client.yaml

# ----------------------------------------------
resource "aws_cognito_user_pool_client" "authorisation_app-client" {
    name                 = "authorisation_app-client"
    user_pool_id         = "${aws_cognito_user_pool.authorisation_userpool.id}"
    generate_secret      = false
    explicit_auth_flows  = ["ALLOW_ADMIN_USER_PASSWORD_AUTH","ALLOW_USER_PASSWORD_AUTH","ALLOW_CUSTOM_AUTH","ALLOW_USER_SRP_AUTH","ALLOW_REFRESH_TOKEN_AUTH"]
    callback_urls        = ["https://www.stage-env1.cloudplatform.accenture.com/ui-psauth/master/authorizer.html"]
    logout_urls          = ["https://www.stage-env1.cloudplatform.accenture.com/ui-psauth/master/authorizer.html"]
    allowed_oauth_flows  = ["code","implicit"]
    supported_identity_providers = ["COGNITO","accenture.com"]
    allowed_oauth_flows_user_pool_client = true
    allowed_oauth_scopes = ["email","openid","profile","aws.cognito.signin.user.admin"]
    lifecycle {
      prevent_destroy    = true
    }
    depends_on           = [ "aws_cognito_identity_provider.authorisation_accenture-identity-provider" ]
}


# ==============================================
# aws_kms_key : ../service-authorisation//infrastructure/aws_kms_key.yaml

# Generating aws_kms_alias for aws_kms_key
# ----------------------------------------------
resource "aws_kms_alias" "authorisation_master-key-alias" {
    target_key_id        = "${aws_kms_key.authorisation_master-key.id}"
    name_prefix          = "alias/authorisation_master-key"
}

# ----------------------------------------------
resource "aws_kms_key" "authorisation_master-key" {
    description          = "Master key used for encrypting infrastructure in service authorisation"
    lifecycle {
      prevent_destroy    = true
    }
    enable_key_rotation  = true
    tags {
      description        = "Master key used for encrypting sqs and other infra items"
      Name               = "authorisationMasterKey"
      Environment        = "stage-env1"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "authorisation"
    }
    policy               = "{\"Version\": \"2012-10-17\", \"Statement\": [{\"Effect\": \"Allow\", \"Principal\": {\"AWS\": [\"arn:aws:iam::148354739297:root\"]}, \"Action\": [\"kms:GenerateDataKey\", \"kms:Decrypt\"], \"Resource\": \"*\"}, {\"Sid\": \"Enable Deployment Permissions\", \"Effect\": \"Allow\", \"Principal\": {\"AWS\": [\"arn:aws:iam::148354739297:user/deployer\", \"arn:aws:iam::148354739297:role/Admin\", \"arn:aws:iam::148354739297:user/acpapi\"]}, \"Action\": \"kms:*\", \"Resource\": \"*\"}]}"
}


# ==============================================
# Summary: 
# 1/12]  ../service-authorisation//infrastructure/aws_iam_role.yaml 2 resources
# 2/12]  ../service-authorisation//infrastructure/aws_sqs_queue.yaml 2 resources
# 3/12]  ../service-authorisation//infrastructure/aws_sns_topic.yaml 1 resources
# 4/12]  ../service-authorisation//infrastructure/aws_dynamodb_table.yaml 4 resources
# 5/12]  ../service-authorisation//infrastructure/aws_lambda_function.yaml 8 resources
# 6/12]  ../service-authorisation//infrastructure/aws_api_gateway_deployment.yaml 1 resources
# 7/12]  ../service-authorisation//infrastructure/aws_cognito_user_pool_domain.yaml 1 resources
# 8/12]  ../service-authorisation//infrastructure/aws_s3_bucket_notification.yaml 1 resources
# 9/12]  ../service-authorisation//infrastructure/aws_ses_identity_policy.yaml 0 resources
# 10/12]  ../service-authorisation//infrastructure/aws_cloudwatch_log_group.yaml 1 resources
# 11/12]  ../service-authorisation//infrastructure/aws_cognito_user_pool_client.yaml 1 resources
# 12/12]  ../service-authorisation//infrastructure/aws_kms_key.yaml 1 resources
# total resources: 23

# Resources:
# 1] aws_api_gateway_base_path_mapping.authorisation_deployment-base-path-mapping
# 2] aws_api_gateway_deployment.authorisation_deployment
# 3] aws_cloudwatch_log_group.authorisation_loggroup
# 4] aws_cloudwatch_metric_alarm.authorisation_api_lambda-errors
# 5] aws_cloudwatch_metric_alarm.authorisation_api_runaway_alarm
# 6] aws_cloudwatch_metric_alarm.authorisation_authenticate_lambda-errors
# 7] aws_cloudwatch_metric_alarm.authorisation_authenticate_runaway_alarm
# 8] aws_cloudwatch_metric_alarm.authorisation_cognito-post-confirmation_lambda-errors
# 9] aws_cloudwatch_metric_alarm.authorisation_cognito-post-confirmation_runaway_alarm
# 10] aws_cloudwatch_metric_alarm.authorisation_integration-api_lambda-errors
# 11] aws_cloudwatch_metric_alarm.authorisation_integration-api_runaway_alarm
# 12] aws_cloudwatch_metric_alarm.authorisation_oktausersource_lambda-errors
# 13] aws_cloudwatch_metric_alarm.authorisation_oktausersource_runaway_alarm
# 14] aws_cloudwatch_metric_alarm.authorisation_oktausertarget_lambda-errors
# 15] aws_cloudwatch_metric_alarm.authorisation_oktausertarget_runaway_alarm
# 16] aws_cloudwatch_metric_alarm.authorisation_register-idp_lambda-errors
# 17] aws_cloudwatch_metric_alarm.authorisation_register-idp_runaway_alarm
# 18] aws_cloudwatch_metric_alarm.authorisation_userpermissions_lambda-errors
# 19] aws_cloudwatch_metric_alarm.authorisation_userpermissions_runaway_alarm
# 20] aws_cognito_user_pool_client.authorisation_app-client
# 21] aws_cognito_user_pool_domain.authorisation_domain
# 22] aws_dynamodb_table.authorisation_idp
# 23] aws_dynamodb_table.authorisation_permission
# 24] aws_dynamodb_table.authorisation_role
# 25] aws_dynamodb_table.authorisation_token
# 26] aws_iam_role.authorisation_api_role
# 27] aws_iam_role.authorisation_authenticate_role
# 28] aws_iam_role.authorisation_cognito-post-confirmation_role
# 29] aws_iam_role.authorisation_gateway-invoke-lambda
# 30] aws_iam_role.authorisation_integration-api_role
# 31] aws_iam_role.authorisation_oktausersource_role
# 32] aws_iam_role.authorisation_oktausertarget_role
# 33] aws_iam_role.authorisation_register-idp_role
# 34] aws_iam_role.authorisation_token-readonly
# 35] aws_iam_role.authorisation_token-readwrite
# 36] aws_iam_role.authorisation_userpermissions_role
# 37] aws_iam_role_policy.authorisation_api_role_policy
# 38] aws_iam_role_policy.authorisation_authenticate_role_policy
# 39] aws_iam_role_policy.authorisation_cognito-post-confirmation_role_policy
# 40] aws_iam_role_policy.authorisation_gateway-invoke-lambda_role_policy
# 41] aws_iam_role_policy.authorisation_integration-api_role_policy
# 42] aws_iam_role_policy.authorisation_oktausersource_role_policy
# 43] aws_iam_role_policy.authorisation_oktausertarget_role_policy
# 44] aws_iam_role_policy.authorisation_register-idp_role_policy
# 45] aws_iam_role_policy.authorisation_token-readonly_role_policy
# 46] aws_iam_role_policy.authorisation_token-readwrite_role_policy
# 47] aws_iam_role_policy.authorisation_userpermissions_role_policy
# 48] aws_kms_alias.authorisation_master-key-alias
# 49] aws_kms_key.authorisation_master-key
# 50] aws_lambda_event_source_mapping.authorisation_oktausertarget_EvtMap_authorisation_oktauser-target
# 51] aws_lambda_function.authorisation_api
# 52] aws_lambda_function.authorisation_authenticate
# 53] aws_lambda_function.authorisation_cognito-post-confirmation
# 54] aws_lambda_function.authorisation_integration-api
# 55] aws_lambda_function.authorisation_oktausersource
# 56] aws_lambda_function.authorisation_oktausertarget
# 57] aws_lambda_function.authorisation_register-idp
# 58] aws_lambda_function.authorisation_userpermissions
# 59] aws_lambda_permission.authorisation_oktausersource-s3-upload-topic_invoke
# 60] aws_lambda_permission.authorisation_oktausersource__oktausersource-s3-upload-topic_sns_invoke_lambda_permission
# 61] aws_s3_bucket_notification.authorisation_oktausersource-s3-upload
# 62] aws_sns_topic.authorisation_oktausersource-s3-upload-topic
# 63] aws_sns_topic_subscription.authorisation_oktausersource_Sub_authorisation_oktausersource-s3-upload-topic
# 64] aws_sqs_queue.authorisation-okta-user-creation-deadletter-queue
# 65] aws_sqs_queue.authorisation-okta-user-creation-queue
# 66] terraform_remote_state.acp-platform-s-authorisation-stage-env1_remote_state
# Resources generated: 43