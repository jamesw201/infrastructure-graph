
# ==============================================
# Terraform file generated by create-infra.py
# Generation time: 2019-11-27T00:47:15.899959
# ==============================================
provider "aws" {
    region                  = "us-east-1"
    shared_credentials_file = "/Users/james.n.wilson/.aws/credentials"
    profile                 = "sandbox1"
}
terraform {
  required_version = "= 0.11.2"
  backend "s3" {
    bucket  = "acp-platform-s-inventory-sandbox1"
    key     = "infrastructure/terraform.tfstate"
    region  = "us-east-1"
  }
}
# ----------------------------------------------
data "terraform_remote_state" "acp-platform-s-inventory-sandbox1_remote_state" {
    config {
      bucket             = "acp-platform-s-inventory-sandbox1"
      key                = "infrastructure/terraform.tfstate"
      region             = "us-east-1"
    }
    backend              = "s3"
}


# ==============================================
# Imported from Terraform files

# Imported from ../service-inventory//infrastructure/aws_kms_key.tf
# ----------------------------------------------------------
# Master key used for encrypting inventory cluster
resource "aws_kms_key" "inventory_master-key" {
    description = "Master key used for encrypting inventory cluster"
    enable_key_rotation = true

    lifecycle {
      prevent_destroy = true
    }
}


# ==============================================
# Generated from YAML files

# ==============================================
# aws_sqs_queue : ../service-inventory//infrastructure/aws_sqs_queue.yaml

# ----------------------------------------------
resource "aws_sqs_queue" "inventory_move-s3-prefixes-deadletter-queue" {
    lifecycle {
      prevent_destroy    = true
    }
    name                 = "inventory_move-s3-prefixes-deadletter-queue"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_move-s3-prefixes-deadletter-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# ----------------------------------------------
resource "aws_sqs_queue" "inventory_move-s3-prefixes-queue" {
    name                 = "inventory_move-s3-prefixes-queue"
    lifecycle {
      prevent_destroy    = true
    }
    message_retention_seconds = 5400
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_move-s3-prefixes-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
    visibility_timeout_seconds = 900
    redrive_policy       = "{\"deadLetterTargetArn\":\"${aws_sqs_queue.inventory_move-s3-prefixes-deadletter-queue.arn}\",\"maxReceiveCount\":2}"
}


# ==============================================
# aws_sns_topic : ../service-inventory//infrastructure/aws_sns_topic.yaml

# ----------------------------------------------
resource "aws_sns_topic" "inventory_outbound-event-topic" {
    name                 = "inventory_outbound-event-topic"
}

# ----------------------------------------------
resource "aws_sns_topic" "inventory_alarm-topic-sandbox1" {
    name                 = "inventory_alarm-topic-sandbox1"
}


# ==============================================
# aws_dynamodb_table : ../service-inventory//infrastructure/aws_dynamodb_table.yaml

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_history_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "inventory_history" }
    alarm_name           = "inventory_history_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_history_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_history_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "inventory_history" }
    alarm_name           = "inventory_history_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_history_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "inventory_history" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 5
    range_key            = "Timestamp"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_history"
      CreatedBy          = "Platform.S create-infra.py"
    }
    write_capacity       = 5
    hash_key             = "EventId"
    name                 = "inventory_history"
    lifecycle {
      prevent_destroy    = true
    }
    stream_view_type     = "NEW_AND_OLD_IMAGES"
    global_secondary_index {
      name               = "InventoryEvents"
      hash_key           = "ResourceId"
      range_key          = "Timestamp"
      projection_type    = "ALL"
      write_capacity     = 1
      read_capacity      = 1
    }
    global_secondary_index {
      name               = "AccountEvents"
      hash_key           = "AccountId"
      range_key          = "Timestamp"
      projection_type    = "ALL"
      write_capacity     = 1
      read_capacity      = 1
    }
    global_secondary_index {
      name               = "TenantEvents"
      hash_key           = "TenantId"
      range_key          = "Timestamp"
      projection_type    = "ALL"
      write_capacity     = 1
      read_capacity      = 1
    }
    attribute {
      name               = "EventId"
      type               = "S"
    }
    attribute {
      name               = "Timestamp"
      type               = "S"
    }
    attribute {
      name               = "TenantId"
      type               = "S"
    }
    attribute {
      name               = "ResourceId"
      type               = "S"
    }
    attribute {
      name               = "AccountId"
      type               = "S"
    }
    stream_enabled       = true
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_latest_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "inventory_latest" }
    alarm_name           = "inventory_latest_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_latest_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_latest_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "inventory_latest" }
    alarm_name           = "inventory_latest_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_latest_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "inventory_latest" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 5
    range_key            = "ResourceId"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_latest"
      CreatedBy          = "Platform.S create-infra.py"
    }
    write_capacity       = 5
    hash_key             = "AccountId"
    name                 = "inventory_latest"
    lifecycle {
      prevent_destroy    = true
    }
    stream_view_type     = "NEW_AND_OLD_IMAGES"
    global_secondary_index {
      name               = "TenantInventory"
      hash_key           = "TenantId"
      range_key          = "ResourceId"
      projection_type    = "ALL"
      write_capacity     = 1
      read_capacity      = 1
    }
    global_secondary_index {
      name               = "ProjectInventory"
      hash_key           = "ProjectId"
      range_key          = "ResourceId"
      projection_type    = "ALL"
      write_capacity     = 1
      read_capacity      = 1
    }
    attribute {
      name               = "AccountId"
      type               = "S"
    }
    attribute {
      name               = "ResourceId"
      type               = "S"
    }
    attribute {
      name               = "TenantId"
      type               = "S"
    }
    attribute {
      name               = "ProjectId"
      type               = "S"
    }
    stream_enabled       = true
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_user-query_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "inventory_user-query" }
    alarm_name           = "inventory_user-query_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_user-query_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_user-query_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "inventory_user-query" }
    alarm_name           = "inventory_user-query_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_user-query_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "inventory_user-query" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 5
    range_key            = "id"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_user-query"
      CreatedBy          = "Platform.S create-infra.py"
    }
    write_capacity       = 5
    hash_key             = "tenantId"
    name                 = "inventory_user-query"
    lifecycle {
      prevent_destroy    = false
    }
    stream_view_type     = "NEW_AND_OLD_IMAGES"
    attribute {
      name               = "tenantId"
      type               = "S"
    }
    attribute {
      name               = "id"
      type               = "S"
    }
    stream_enabled       = true
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_group_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "inventory_group" }
    alarm_name           = "inventory_group_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_group_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_group_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "inventory_group" }
    alarm_name           = "inventory_group_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_group_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "inventory_group" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 5
    range_key            = "ResourceGroupId"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_group"
      CreatedBy          = "Platform.S create-infra.py"
    }
    write_capacity       = 5
    hash_key             = "TenantId"
    name                 = "inventory_group"
    lifecycle {
      prevent_destroy    = true
    }
    stream_view_type     = "NEW_AND_OLD_IMAGES"
    global_secondary_index {
      name               = "TenantProject"
      hash_key           = "TenantId"
      range_key          = "ProjectId"
      projection_type    = "ALL"
      write_capacity     = 1
      read_capacity      = 1
    }
    global_secondary_index {
      name               = "TenantAccount"
      hash_key           = "TenantId"
      range_key          = "AccountId"
      projection_type    = "ALL"
      write_capacity     = 1
      read_capacity      = 1
    }
    attribute {
      name               = "TenantId"
      type               = "S"
    }
    attribute {
      name               = "ResourceGroupId"
      type               = "S"
    }
    attribute {
      name               = "AccountId"
      type               = "S"
    }
    attribute {
      name               = "ProjectId"
      type               = "S"
    }
    stream_enabled       = true
}


# ==============================================
# aws_lambda_function : ../service-inventory//infrastructure/aws_lambda_function.yaml

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "inventory_event-router_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_event-router_role"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-router_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_event-router_role_policy" {
    depends_on           = [ "aws_iam_role.inventory_event-router_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*inventory_event-router*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetRecords", 
        "dynamodb:GetShardIterator", 
        "dynamodb:DescribeStream", 
        "dynamodb:ListStreams", 
        "dynamodb:PutItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_latest/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_latest"
      ]
    }, 
    {
      "Action": [
        "kinesis:DescribeStream", 
        "kinesis:ListStreams", 
        "kinesis:PutRecord", 
        "kinesis:PutRecords"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_event-router_role.id}"
    name                 = "inventory_event-router_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-router_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "inventory_event-router"
    }
    alarm_name           = "inventory_event-router_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 200
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-router_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-router_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "inventory_event-router" }
    alarm_name           = "inventory_event-router_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-router_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "inventory_event-router" {
    function_name        = "inventory_event-router"
    depends_on           = [ "aws_iam_role.inventory_event-router_role" ]
    role                 = "${aws_iam_role.inventory_event-router_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-router"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 60
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    memory_size          = 128
    runtime              = "nodejs8.10"
    description          = "Routes change events to a specific Kinesis stream defined for a tenant"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "inventory_event-log_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_event-log_role"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-log_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_event-log_role_policy" {
    depends_on           = [ "aws_iam_role.inventory_event-log_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*inventory_event-log*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-inventory-sandbox1/*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-inventory-sandbox1"
      ]
    }, 
    {
      "Action": [
        "dynamodb:PutItem", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_eventlog/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_eventlog", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_latest/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_latest"
      ]
    }, 
    {
      "Action": [
        "kinesis:GetRecords", 
        "kinesis:GetShardIterator", 
        "kinesis:DescribeStream", 
        "kinesis:ListStreams"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kinesis_stream.inventory_event-bus.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_event-log_role.id}"
    name                 = "inventory_event-log_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-log_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "inventory_event-log"
    }
    alarm_name           = "inventory_event-log_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 400
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-log_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-log_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "inventory_event-log" }
    alarm_name           = "inventory_event-log_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-log_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "inventory_event-log" {
    function_name        = "inventory_event-log"
    depends_on           = [ "aws_iam_role.inventory_event-log_role" ]
    role                 = "${aws_iam_role.inventory_event-log_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-log"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 300
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    memory_size          = 512
    runtime              = "nodejs8.10"
    description          = "Persist acp events"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "inventory_event-history_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_event-history_role"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-history_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_event-history_role_policy" {
    depends_on           = [ "aws_iam_role.inventory_event-history_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*inventory_event-history*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetRecords", 
        "dynamodb:GetShardIterator", 
        "dynamodb:DescribeStream", 
        "dynamodb:ListStreams", 
        "dynamodb:PutItem", 
        "dynamodb:DeleteItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_latest/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_latest", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_history/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_history"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_event-history_role.id}"
    name                 = "inventory_event-history_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-history_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "inventory_event-history"
    }
    alarm_name           = "inventory_event-history_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 140
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-history_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-history_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "inventory_event-history" }
    alarm_name           = "inventory_event-history_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-history_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "inventory_event-history" {
    function_name        = "inventory_event-history"
    depends_on           = [ "aws_iam_role.inventory_event-history_role" ]
    role                 = "${aws_iam_role.inventory_event-history_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-history"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 60
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    memory_size          = 128
    runtime              = "nodejs8.10"
    description          = "Records a history of changes for each resource"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "inventory_event-indexer_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_event-indexer_role"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-indexer_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_event-indexer_role_policy" {
    depends_on           = [ "aws_iam_role.inventory_event-indexer_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*inventory_event-indexer*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject", 
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-inventory-sandbox1/*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-inventory-sandbox1"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:inventory_outbound-event-topic"
      ]
    }, 
    {
      "Action": [
        "es:ESHttpGet", 
        "es:ESHttpDelete", 
        "es:ESHttpHead", 
        "es:ESHttpPost", 
        "es:ESHttpPut"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory/*"
      ]
    }, 
    {
      "Action": [
        "kinesis:GetRecords", 
        "kinesis:GetShardIterator", 
        "kinesis:DescribeStream", 
        "kinesis:ListStreams"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kinesis_stream.inventory_event-bus.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_event-indexer_role.id}"
    name                 = "inventory_event-indexer_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-indexer_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "inventory_event-indexer"
    }
    alarm_name           = "inventory_event-indexer_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 1000
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-indexer_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-indexer_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "inventory_event-indexer" }
    alarm_name           = "inventory_event-indexer_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-indexer_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "inventory_event-indexer" {
    function_name        = "inventory_event-indexer"
    depends_on           = [ "aws_iam_role.inventory_event-indexer_role" ]
    role                 = "${aws_iam_role.inventory_event-indexer_role.arn}"
    memory_size          = 3008
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-indexer"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 300
    runtime              = "nodejs8.10"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    description          = "Send resources to ES for indexing"
}

# Generating aws_lambda_event_source_mapping for aws_lambda_function
# ----------------------------------------------
resource "aws_lambda_event_source_mapping" "inventory_event-indexer_EvtMap_inventory_event-bus" {
    depends_on           = [ "aws_lambda_function.inventory_event-indexer" ]
    starting_position    = "TRIM_HORIZON"
    batch_size           = 25
    event_source_arn     = "${aws_kinesis_stream.inventory_event-bus.arn}"
    function_name        = "inventory_event-indexer"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "inventory_pusher_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_pusher_role"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_pusher_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_pusher_role_policy" {
    depends_on           = [ "aws_iam_role.inventory_pusher_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*inventory_pusher*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject", 
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-inventory-sandbox1/*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/publisher/*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/throttled-collector-publisher/*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-inventory-sandbox1"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
      ]
    }, 
    {
      "Action": [
        "kinesis:GetRecords", 
        "kinesis:GetShardIterator", 
        "kinesis:DescribeStream", 
        "kinesis:ListStreams"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:kinesis:us-east-1:309983114184:stream/discovery_event-bus"
      ]
    }, 
    {
      "Action": [
        "kinesis:PutRecord", 
        "kinesis:PutRecords"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kinesis_stream.inventory_event-bus.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_pusher_role.id}"
    name                 = "inventory_pusher_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_pusher_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "inventory_pusher"
    }
    alarm_name           = "inventory_pusher_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 320
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_pusher_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_pusher_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "inventory_pusher" }
    alarm_name           = "inventory_pusher_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_pusher_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "inventory_pusher" {
    function_name        = "inventory_pusher"
    depends_on           = [ "aws_iam_role.inventory_pusher_role" ]
    role                 = "${aws_iam_role.inventory_pusher_role.arn}"
    memory_size          = 1024
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_pusher"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 240
    runtime              = "nodejs8.10"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    description          = "Store and push discovery events into inventory"
}

# Generating aws_lambda_event_source_mapping for aws_lambda_function
# ----------------------------------------------
resource "aws_lambda_event_source_mapping" "inventory_pusher_EvtMap_discovery_event-bus" {
    depends_on           = [ "aws_lambda_function.inventory_pusher" ]
    starting_position    = "TRIM_HORIZON"
    batch_size           = 30
    event_source_arn     = "arn:aws:kinesis:us-east-1:309983114184:stream/discovery_event-bus"
    function_name        = "inventory_pusher"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "inventory_event-replayer_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_event-replayer_role"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-replayer_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_event-replayer_role_policy" {
    depends_on           = [ "aws_iam_role.inventory_event-replayer_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*inventory_event-replayer*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-inventory-sandbox1"
      ]
    }, 
    {
      "Action": [
        "lambda:ListEventSourceMappings"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "*"
      ]
    }, 
    {
      "Action": [
        "lambda:UpdateEventSourceMapping"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:lambda:us-east-1:309983114184:event-source-mapping:*"
      ]
    }, 
    {
      "Action": [
        "kinesis:PutRecord", 
        "kinesis:PutRecords"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kinesis_stream.inventory_event-bus.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_event-replayer_role.id}"
    name                 = "inventory_event-replayer_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-replayer_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "inventory_event-replayer"
    }
    alarm_name           = "inventory_event-replayer_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 750
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-replayer_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-replayer_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "inventory_event-replayer" }
    alarm_name           = "inventory_event-replayer_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-replayer_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "inventory_event-replayer" {
    function_name        = "inventory_event-replayer"
    depends_on           = [ "aws_iam_role.inventory_event-replayer_role" ]
    role                 = "${aws_iam_role.inventory_event-replayer_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-replayer"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    memory_size          = 3008
    timeout              = 900
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "nodejs8.10"
    description          = "Replays S3 resources as domain events to the inventory_event-bus."
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "inventory_api_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_api_role"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_api_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_api_role_policy" {
    depends_on           = [ "aws_iam_role.inventory_api_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*inventory_api*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_rbac/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_rbac"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Query", 
        "dynamodb:PutItem", 
        "dynamodb:GetItem", 
        "dynamodb:DeleteItem", 
        "dynamodb:DescribeTable"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_user-query/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_user-query"
      ]
    }, 
    {
      "Action": [
        "es:DescribeElasticsearchDomain", 
        "es:ESHttpGet", 
        "es:ESHttpDelete", 
        "es:ESHttpHead", 
        "es:ESHttpPost", 
        "es:ESHttpPut"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory", 
        "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory/*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_api_role.id}"
    name                 = "inventory_api_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_api_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "inventory_api"
    }
    alarm_name           = "inventory_api_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 5000
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_api_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_api_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "inventory_api" }
    alarm_name           = "inventory_api_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_api_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "inventory_api" {
    function_name        = "inventory_api"
    depends_on           = [ "aws_iam_role.inventory_api_role" ]
    role                 = "${aws_iam_role.inventory_api_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_api"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 60
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    memory_size          = 1024
    runtime              = "nodejs8.10"
    description          = "Query inventory resources"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "inventory_group-tenant-passthrough_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_group-tenant-passthrough_role"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_group-tenant-passthrough_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_group-tenant-passthrough_role_policy" {
    depends_on           = [ "aws_iam_role.inventory_group-tenant-passthrough_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*inventory_group-tenant-passthrough*"
      ]
    }, 
    {
      "Action": [
        "kinesis:GetRecords", 
        "kinesis:GetShardIterator", 
        "kinesis:DescribeStream", 
        "kinesis:ListStreams", 
        "kinesis:PutRecord", 
        "kinesis:PutRecords"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_group-tenant-passthrough_role.id}"
    name                 = "inventory_group-tenant-passthrough_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_group-tenant-passthrough_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "inventory_group-tenant-passthrough"
    }
    alarm_name           = "inventory_group-tenant-passthrough_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_group-tenant-passthrough_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_group-tenant-passthrough_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "inventory_group-tenant-passthrough" }
    alarm_name           = "inventory_group-tenant-passthrough_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_group-tenant-passthrough_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "inventory_group-tenant-passthrough" {
    function_name        = "inventory_group-tenant-passthrough"
    depends_on           = [ "aws_iam_role.inventory_group-tenant-passthrough_role" ]
    role                 = "${aws_iam_role.inventory_group-tenant-passthrough_role.arn}"
    filename             = "/tmp/python_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_group-tenant-passthrough"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    timeout              = 10
    memory_size          = 128
    runtime              = "python2.7"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    description          = "Temporary lambda that reads from resource_group-config stream and writes to tenant kinesis stream"
}

# Generating aws_lambda_event_source_mapping for aws_lambda_function
# ----------------------------------------------
resource "aws_lambda_event_source_mapping" "inventory_group-tenant-passthrough_EvtMap_inventory_group-config" {
    depends_on           = [ "aws_lambda_function.inventory_group-tenant-passthrough" ]
    starting_position    = "TRIM_HORIZON"
    batch_size           = 500
    event_source_arn     = "${aws_kinesis_stream.inventory_group-config.arn}"
    function_name        = "inventory_group-tenant-passthrough"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "inventory_copy-resource-data_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_copy-resource-data_role"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_copy-resource-data_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_copy-resource-data_role_policy" {
    depends_on           = [ "aws_iam_role.inventory_copy-resource-data_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*inventory_copy-resource-data*"
      ]
    }, 
    {
      "Action": [
        "logs:CreateLogGroup", 
        "logs:CreateLogStream", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:us-east-1:309983114184:*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Scan", 
        "dynamodb:PutItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_snapshot/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_snapshot", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_eventlog/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_eventlog"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_copy-resource-data_role.id}"
    name                 = "inventory_copy-resource-data_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_copy-resource-data_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "inventory_copy-resource-data"
    }
    alarm_name           = "inventory_copy-resource-data_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_copy-resource-data_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_copy-resource-data_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "inventory_copy-resource-data" }
    alarm_name           = "inventory_copy-resource-data_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_copy-resource-data_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "inventory_copy-resource-data" {
    function_name        = "inventory_copy-resource-data"
    depends_on           = [ "aws_iam_role.inventory_copy-resource-data_role" ]
    role                 = "${aws_iam_role.inventory_copy-resource-data_role.arn}"
    filename             = "/tmp/python_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_copy-resource-data"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    memory_size          = 128
    timeout              = 60
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "python2.7"
    description          = "Copy Resource Data"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "inventory_resend-events_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_resend-events_role"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_resend-events_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_resend-events_role_policy" {
    depends_on           = [ "aws_iam_role.inventory_resend-events_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*inventory_resend-events*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetRecords", 
        "dynamodb:GetItem", 
        "dynamodb:Query", 
        "dynamodb:Scan"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_eventlog/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/inventory_eventlog"
      ]
    }, 
    {
      "Action": [
        "kinesis:DescribeStream", 
        "kinesis:ListStreams", 
        "kinesis:PutRecord", 
        "kinesis:PutRecords"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_resend-events_role.id}"
    name                 = "inventory_resend-events_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_resend-events_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "inventory_resend-events"
    }
    alarm_name           = "inventory_resend-events_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_resend-events_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_resend-events_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "inventory_resend-events" }
    alarm_name           = "inventory_resend-events_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_resend-events_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "inventory_resend-events" {
    function_name        = "inventory_resend-events"
    depends_on           = [ "aws_iam_role.inventory_resend-events_role" ]
    role                 = "${aws_iam_role.inventory_resend-events_role.arn}"
    filename             = "/tmp/python_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_resend-events"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    memory_size          = 128
    timeout              = 120
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "python2.7"
    description          = "Resend events from resource_eventlog for specific tenant and since timestamp to tenant kinesis stream"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "inventory_resource-retention_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_resource-retention_role"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_resource-retention_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_resource-retention_role_policy" {
    depends_on           = [ "aws_iam_role.inventory_resource-retention_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*inventory_resource-retention*"
      ]
    }, 
    {
      "Action": [
        "es:DescribeElasticsearchDomain", 
        "es:ESHttpGet", 
        "es:ESHttpDelete", 
        "es:ESHttpHead", 
        "es:ESHttpPost", 
        "es:ESHttpPut"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory/*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_resource-retention_role.id}"
    name                 = "inventory_resource-retention_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_resource-retention_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "inventory_resource-retention"
    }
    alarm_name           = "inventory_resource-retention_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_resource-retention_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_resource-retention_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "inventory_resource-retention" }
    alarm_name           = "inventory_resource-retention_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_resource-retention_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "inventory_resource-retention" {
    function_name        = "inventory_resource-retention"
    depends_on           = [ "aws_iam_role.inventory_resource-retention_role" ]
    role                 = "${aws_iam_role.inventory_resource-retention_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_resource-retention"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    memory_size          = 512
    timeout              = 300
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "nodejs8.10"
    description          = "Lambda to delete old resource indexes"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "inventory_move-s3-prefixes_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_move-s3-prefixes_role"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_move-s3-prefixes_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_move-s3-prefixes_role_policy" {
    depends_on           = [ "aws_iam_role.inventory_move-s3-prefixes_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*inventory_move-s3-prefixes*"
      ]
    }, 
    {
      "Action": [
        "sqs:GetQueueAttributes", 
        "sqs:DeleteMessage", 
        "sqs:ChangeMessageVisibility", 
        "sqs:DeleteMessageBatch", 
        "sqs:ChangeMessageVisibilityBatch", 
        "sqs:ReceiveMessage"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_sqs_queue.inventory_move-s3-prefixes-queue.arn}", 
        "${aws_sqs_queue.inventory_move-s3-prefixes-deadletter-queue.arn}"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-inventory-sandbox1"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject", 
        "s3:PutObject", 
        "s3:DeleteObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-inventory-sandbox1/inventory/5/*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_move-s3-prefixes_role.id}"
    name                 = "inventory_move-s3-prefixes_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_move-s3-prefixes_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "inventory_move-s3-prefixes"
    }
    alarm_name           = "inventory_move-s3-prefixes_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_move-s3-prefixes_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_move-s3-prefixes_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "inventory_move-s3-prefixes" }
    alarm_name           = "inventory_move-s3-prefixes_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_move-s3-prefixes_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "inventory_move-s3-prefixes" {
    function_name        = "inventory_move-s3-prefixes"
    depends_on           = [ "aws_iam_role.inventory_move-s3-prefixes_role" ]
    role                 = "${aws_iam_role.inventory_move-s3-prefixes_role.arn}"
    filename             = "/tmp/python_lambda_stub.zip"
    reserved_concurrent_executions = 10
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_move-s3-prefixes"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    memory_size          = 2048
    timeout              = 900
    runtime              = "python2.7"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    description          = "Lambda to move objects below one or more prefixes"
}

# Generating aws_lambda_event_source_mapping for aws_lambda_function
# ----------------------------------------------
resource "aws_lambda_event_source_mapping" "inventory_move-s3-prefixes_EvtMap_inventory_move-s3-prefixes" {
    depends_on           = [ "aws_lambda_function.inventory_move-s3-prefixes" ]
    batch_size           = 10
    event_source_arn     = "${aws_sqs_queue.inventory_move-s3-prefixes-queue.arn}"
    function_name        = "inventory_move-s3-prefixes"
}


# ==============================================
# aws_cloudwatch_metric_alarm : ../service-inventory//infrastructure/aws_cloudwatch_metric_alarm.yaml

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_encrypted-cpu-node-alarm" {
    evaluation_periods   = 3
    alarm_description    = "This metric monitors `inventory` ElasticSeach cluster worker nodes and alarms when maximum CPU load is over 90% within a minute"
    namespace            = "AWS/ES"
    period               = 60
    datapoints_to_alarm  = 3
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_encrypted-cpu-node-alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      DomainName         = "encrypted-inventory"
      ClientId           = 309983114184
    }
    alarm_actions        = [ "${aws_sns_topic.inventory_alarm-topic-sandbox1.arn}" ]
    statistic            = "Maximum"
    threshold            = 90
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "inventory_encrypted-cpu-node-alarm"
    metric_name          = "CPUUtilization"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_encrypted-cpu-master-alarm" {
    evaluation_periods   = 3
    alarm_description    = "This metric monitors `inventory` ElasticSeach cluster master node and alarms when maximum CPU load is over 90% within a minute"
    namespace            = "AWS/ES"
    period               = 60
    datapoints_to_alarm  = 3
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_encrypted-cpu-master-alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      DomainName         = "encrypted-inventory"
      ClientId           = 309983114184
    }
    alarm_actions        = [ "${aws_sns_topic.inventory_alarm-topic-sandbox1.arn}" ]
    statistic            = "Maximum"
    threshold            = 90
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "inventory_encrypted-cpu-master-alarm"
    metric_name          = "MasterCPUUtilization"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_encrypted-jvmmemory-node-alarm" {
    evaluation_periods   = 3
    alarm_description    = "This metric monitors `inventory` ElasticSeach cluster worker nodes and alarms when maximum JVM memory is loaded over 75% within a minute"
    namespace            = "AWS/ES"
    period               = 60
    datapoints_to_alarm  = 3
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_encrypted-jvmmemory-node-alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      DomainName         = "encrypted-inventory"
      ClientId           = 309983114184
    }
    alarm_actions        = [ "${aws_sns_topic.inventory_alarm-topic-sandbox1.arn}" ]
    statistic            = "Maximum"
    threshold            = 75
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "inventory_encrypted-jvmmemory-node-alarm"
    metric_name          = "JVMMemoryPressure"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_encrypted-jvmmemory-master-alarm" {
    evaluation_periods   = 3
    alarm_description    = "This metric monitors `inventory` ElasticSeach cluster master nodes and alarms when maximum JVM memory is loaded over 75% within a minute"
    namespace            = "AWS/ES"
    period               = 60
    datapoints_to_alarm  = 3
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_encrypted-jvmmemory-master-alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      DomainName         = "encrypted-inventory"
      ClientId           = 309983114184
    }
    alarm_actions        = [ "${aws_sns_topic.inventory_alarm-topic-sandbox1.arn}" ]
    statistic            = "Maximum"
    threshold            = 75
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "inventory_encrypted-jvmmemory-master-alarm"
    metric_name          = "MasterJVMMemoryPressure"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_encrypted-freespace-node-alarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors `inventory` ElasticSeach cluster worker nodes and alarms when disk free memory is less than 2GB within a minute"
    namespace            = "AWS/ES"
    period               = 60
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_encrypted-freespace-node-alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      DomainName         = "encrypted-inventory"
      ClientId           = 309983114184
    }
    alarm_actions        = [ "${aws_sns_topic.inventory_alarm-topic-sandbox1.arn}" ]
    statistic            = "Minimum"
    threshold            = 102400
    comparison_operator  = "LessThanThreshold"
    alarm_name           = "inventory_encrypted-freespace-node-alarm"
    metric_name          = "FreeStorageSpace"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_encrypted-key-error-alarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors `inventory` ElasticSeach cluster and alarms when key used to encrypt data at REST has been disabled"
    namespace            = "AWS/ES"
    period               = 60
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_encrypted-key-error-alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      DomainName         = "encrypted-inventory"
      ClientId           = 309983114184
    }
    alarm_actions        = [ "${aws_sns_topic.inventory_alarm-topic-sandbox1.arn}" ]
    statistic            = "Maximum"
    threshold            = 1
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    alarm_name           = "inventory_encrypted-key-error-alarm"
    metric_name          = "KMSKeyError"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_encrypted-key-inaccessible-alarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors `inventory` ElasticSeach cluster and alarms when key used to encrypt data at REST has been deleted or revoked its grants to Amazon ES"
    namespace            = "AWS/ES"
    period               = 60
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_encrypted-key-inaccessible-alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      DomainName         = "encrypted-inventory"
      ClientId           = 309983114184
    }
    alarm_actions        = [ "${aws_sns_topic.inventory_alarm-topic-sandbox1.arn}" ]
    statistic            = "Maximum"
    threshold            = 1
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    alarm_name           = "inventory_encrypted-key-inaccessible-alarm"
    metric_name          = "KMSKeyInaccessible"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-indexer-dropped-records-error" {
    evaluation_periods   = 1
    alarm_description    = "inventory_event-indexer dropped records from inventory"
    namespace            = "event_indexer_log_metrics"
    period               = 300
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-indexer-dropped-records-error"
      CreatedBy          = "Platform.S create-infra.py"
    }
    alarm_name           = "inventory_event-indexer-dropped-records-error"
    statistic            = "Sum"
    threshold            = 1
    comparison_operator  = "GreaterThanThreshold"
    metric_name          = "event_indexer_dropped_records"
}


# ==============================================
# aws_elasticsearch_domain : ../service-inventory//infrastructure/aws_elasticsearch_domain.yaml

# Generating cloud watch log group for error logs
# ----------------------------------------------
resource "aws_cloudwatch_log_group" "inventory_encrypted-elasticsearch-logs" {
    name                 = "inventory_encrypted-elasticsearch-logs"
}

# Generating cloud watch log policy for error logs
# ----------------------------------------------
resource "aws_cloudwatch_log_resource_policy" "inventory_encrypted-elasticsearch_log-policy" {
    policy_document = <<EOF
{
  "Version": "2012-10-17", 
  "Statement": [
    {
      "Action": [
        "logs:PutLogEvents", 
        "logs:PutLogEventsBatch", 
        "logs:CreateLogStream"
      ], 
      "Resource": "arn:aws:logs:*:*:log-group:inventory_encrypted-elasticsearch*", 
      "Effect": "Allow", 
      "Principal": {
        "Service": "es.amazonaws.com"
      }
    }
  ]
}
EOF
    policy_name          = "inventory_encrypted-elasticsearch_log-policy"
}

# ----------------------------------------------
resource "aws_elasticsearch_domain" "inventory_encrypted-elasticsearch" {
    access_policies = <<EOF
{
  "Version": "2012-10-17", 
  "Statement": [
    {
      "Action": "es:DescribeElasticsearchDomain,es:ESHttp*", 
      "Resource": "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory/*", 
      "Effect": "Allow", 
      "Principal": {
        "AWS": "arn:aws:iam::309983114184:role/Admin"
      }
    }, 
    {
      "Action": "es:DescribeElasticsearchDomain,es:ESHttp*", 
      "Resource": "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory/*", 
      "Effect": "Allow", 
      "Principal": {
        "AWS": "arn:aws:iam::309983114184:role/cloud-estate_api_role"
      }
    }, 
    {
      "Action": "es:DescribeElasticsearchDomain,es:ESHttp*", 
      "Resource": "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory/*", 
      "Effect": "Allow", 
      "Principal": {
        "AWS": "arn:aws:iam::309983114184:role/inventory_api_role"
      }
    }, 
    {
      "Action": "es:DescribeElasticsearchDomain,es:ESHttp*", 
      "Resource": "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory/*", 
      "Effect": "Allow", 
      "Principal": {
        "AWS": "arn:aws:iam::309983114184:role/inventory_event-indexer_role"
      }
    }, 
    {
      "Action": "es:DescribeElasticsearchDomain,es:ESHttp*", 
      "Resource": "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory/*", 
      "Effect": "Allow", 
      "Principal": {
        "AWS": "arn:aws:iam::309983114184:role/inventory_resource-retention_role"
      }
    }, 
    {
      "Action": "es:DescribeElasticsearchDomain,es:ESHttp*", 
      "Resource": "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory/*", 
      "Effect": "Allow", 
      "Principal": {
        "AWS": "arn:aws:iam::309983114184:role/notes_api_role"
      }
    }, 
    {
      "Action": "es:DescribeElasticsearchDomain,es:ESHttp*", 
      "Resource": "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory/*", 
      "Effect": "Allow", 
      "Principal": {
        "AWS": "arn:aws:iam::309983114184:role/notes_stream_role"
      }
    }, 
    {
      "Action": "es:DescribeElasticsearchDomain,es:ESHttp*", 
      "Resource": "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory/*", 
      "Effect": "Allow", 
      "Principal": {
        "AWS": "arn:aws:iam::309983114184:role/proxy_api_role"
      }
    }, 
    {
      "Action": "es:DescribeElasticsearchDomain,es:ESHttp*", 
      "Resource": "arn:aws:es:us-east-1:309983114184:domain/encrypted-inventory/*", 
      "Effect": "Allow", 
      "Principal": {
        "AWS": "arn:aws:iam::309983114184:role/resource-metadata_sync-api_role"
      }
    }
  ]
}
EOF
    snapshot_options {
      automated_snapshot_start_hour = 23
    }
    depends_on           = [ "aws_cloudwatch_log_resource_policy.inventory_encrypted-elasticsearch_log-policy" ]
    cluster_config {
      dedicated_master_count = "0"
      dedicated_master_enabled = "false"
      dedicated_master_type = "m4.large.elasticsearch"
      instance_count     = "1"
      instance_type      = "m4.large.elasticsearch"
      zone_awareness_enabled = "false"
    }
    domain_name          = "encrypted-inventory"
    encrypt_at_rest {
      enabled            = true
      kms_key_id         = "${aws_kms_key.inventory_master-key.key_id}"
    }
    ebs_options {
      ebs_enabled        = true
      volume_size        = 200
      volume_type        = "gp2"
    }
    elasticsearch_version = "5.1"
    log_publishing_options {
      cloudwatch_log_group_arn = "${aws_cloudwatch_log_group.inventory_encrypted-elasticsearch-logs.arn}"
      log_type           = "ES_APPLICATION_LOGS"
    }
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "encrypted-inventory"
      CreatedBy          = "Platform.S create-infra.py"
      Description        = "Platform.S Encrypted Elasticsearch Inventory Domain"
    }
    lifecycle {
      prevent_destroy    = true
    }
}


# ==============================================
# aws_kinesis_stream : ../service-inventory//infrastructure/aws_kinesis_stream.yaml

# ----------------------------------------------
resource "aws_kinesis_stream" "inventory_bus" {
    name                 = "inventory_bus"
    encryption_type      = "KMS"
    kms_key_id           = "alias/aws/kinesis"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_bus"
      CreatedBy          = "platform.s deployer"
      Description        = "Inventory bus stream"
    }
    retention_period     = 24
    shard_count          = 1
}

# ----------------------------------------------
resource "aws_kinesis_stream" "inventory_event-bus" {
    name                 = "inventory_event-bus"
    encryption_type      = "KMS"
    kms_key_id           = "alias/aws/kinesis"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-bus"
      CreatedBy          = "platform.s deployer"
      Description        = "Inventory event bus stream"
    }
    retention_period     = 168
    shard_count          = 1
}

# ----------------------------------------------
# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-bus_kinesis-readexceeded" {
    evaluation_periods   = 1
    depends_on           = [ "aws_kinesis_stream.inventory_event-bus" ]
    alarm_description    = "This will fire if the Read throughput has exceeded on the Kinesis Stream"
    period               = 300
    datapoints_to_alarm  = 1
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-bus_kinesis-readexceeded"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      StreamName         = "inventory_event-bus"
    }
    statistic            = "Average"
    threshold            = 1
    metric_name          = "ReadProvisionedThroughputExceeded"
    namespace            = "AWS/Kinesis"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "inventory_event-bus_kinesis-readexceeded"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-bus_kinesis-writeexceeded" {
    evaluation_periods   = 1
    depends_on           = [ "aws_kinesis_stream.inventory_event-bus" ]
    alarm_description    = "This will fire if the Write throughput has exceeded on the Kinesis Stream"
    period               = 300
    datapoints_to_alarm  = 1
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-bus_kinesis-writeexceeded"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      StreamName         = "inventory_event-bus"
    }
    statistic            = "Average"
    threshold            = 1
    metric_name          = "WriteProvisionedThroughputExceeded"
    namespace            = "AWS/Kinesis"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "inventory_event-bus_kinesis-writeexceeded"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "inventory_event-bus_kinesis-iteratoragemilliseconds" {
    evaluation_periods   = 2
    depends_on           = [ "aws_kinesis_stream.inventory_event-bus" ]
    alarm_description    = "This will fire if the record throughput age is more than 30 minutes old"
    period               = 300
    datapoints_to_alarm  = 2
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_event-bus_kinesis-iteratoragemilliseconds"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      StreamName         = "inventory_event-bus"
    }
    statistic            = "Maximum"
    threshold            = 1800000
    metric_name          = "GetRecords.IteratorAgeMilliseconds"
    namespace            = "AWS/Kinesis"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "inventory_event-bus_kinesis-iteratoragemilliseconds"
}

# ----------------------------------------------
resource "aws_kinesis_stream" "inventory_group-config" {
    name                 = "inventory_group-config"
    encryption_type      = "KMS"
    kms_key_id           = "alias/aws/kinesis"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_group-config"
      CreatedBy          = "platform.s deployer"
      Description        = "Inventory Group Config stream"
    }
    retention_period     = 24
    shard_count          = 1
}


# ==============================================
# aws_cloudwatch_event_rule : ../service-inventory//infrastructure/aws_cloudwatch_event_rule.yaml

# Generating aws_cloudwatch_event_target for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_cloudwatch_event_target" "inventory_resource-retention-rule_target" {
    depends_on           = [ "aws_cloudwatch_event_rule.inventory_resource-retention-rule","aws_lambda_function.inventory_resource-retention" ]
    target_id            = "inventory_resource-retention-rule_target"
    arn                  = "${aws_lambda_function.inventory_resource-retention.arn}"
    rule                 = "inventory_resource-retention-rule"
}

# ----------------------------------------------
resource "aws_cloudwatch_event_rule" "inventory_resource-retention-rule" {
    description          = "Schedule invocation of the lambda to manage resource retention"
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_resource-retention-rule"
      CreatedBy          = "Platform.S create-infra.py"
    }
    schedule_expression  = "cron(0 15 * * ? *)"
    name                 = "inventory_resource-retention-rule"
}

# Generating aws_lambda_permission for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_lambda_permission" "inventory_resource-retention-rule_invoke" {
    statement_id         = "inventory_resource-retention-rule_invoke"
    action               = "lambda:InvokeFunction"
    source_arn           = "${aws_cloudwatch_event_rule.inventory_resource-retention-rule.arn}"
    function_name        = "${aws_lambda_function.inventory_resource-retention.arn}"
    principal            = "events.amazonaws.com"
}


# ==============================================
# aws_cloudwatch_log_metric_filter : ../service-inventory//infrastructure/aws_cloudwatch_log_metric_filter.yaml

# ----------------------------------------------
resource "aws_cloudwatch_log_metric_filter" "inventory_event-indexer-dropped-records-filter" {
    pattern              = "CAUTION Events have been dropped whilst indexing in Inventory"
    name                 = "inventory_event-indexer-dropped-records-filter"
    log_group_name       = "/aws/lambda/inventory_event-indexer"
    metric_transformation {
      name               = "event_indexer_dropped_records"
      namespace          = "event_indexer_log_metrics"
      value              = "1"
    }
}

# ----------------------------------------------
resource "aws_iam_role" "inventory_gateway-invoke-lambda" {
    tags {
      Environment        = "sandbox1"
      Component          = "inventory"
      Name               = "inventory_gateway-invoke-lambda"
      CreatedBy          = "Platform.S create-infra.py"
    }
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": "apigateway.amazonaws.com"
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "inventory_gateway-invoke-lambda"
}

# Generating aws_iam_role_policy for aws_iam_role
# ----------------------------------------------
resource "aws_iam_role_policy" "inventory_gateway-invoke-lambda_role_policy" {
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "lambda:InvokeFunction"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:lambda:us-east-1:309983114184:function:inventory_api"
      ]
    }, 
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.inventory_gateway-invoke-lambda.id}"
    name                 = "inventory_gateway-invoke-lambda_role_policy"
}



# Generating aws_api_gateway_rest_api for aws_api_gateway_deployment
# ----------------------------------------------
resource "aws_api_gateway_rest_api" "inventory" {
    name = "inventory"
    binary_media_types = ["*/*"]
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "inventory_deployment_resource_proxy" {
    parent_id = "${aws_api_gateway_rest_api.inventory.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.inventory.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "inventory_integration_inventory_deployment_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.inventory.id}"
    resource_id = "${aws_api_gateway_resource.inventory_deployment_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "inventory_integration_inventory_deployment_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.inventory_deployment_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.inventory_api.arn}/invocations"
    http_method = "${aws_api_gateway_method.inventory_integration_inventory_deployment_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.inventory.id}"
    credentials = "${aws_iam_role.inventory_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}

# Generating base path mapping for component
# ----------------------------------------------
resource "aws_api_gateway_base_path_mapping" "inventory_deployment-base-path-mapping" {
    stage_name           = "sandbox1"
    depends_on           = [ "aws_api_gateway_deployment.inventory_deployment" ]
    domain_name          = "api.sandbox1.cloudplatform.accenture.com"
    api_id               = "${aws_api_gateway_rest_api.inventory.id}"
    base_path            = "inventory"
}

# ----------------------------------------------
resource "aws_api_gateway_deployment" "inventory_deployment" {
    stage_name           = "sandbox1"
    depends_on           = [ "aws_api_gateway_integration.inventory_integration_inventory_deployment_resource_ANY_int" ]
    rest_api_id          = "${aws_api_gateway_rest_api.inventory.id}"
}


# ==============================================
# Summary: 
# 1/9]  ../service-inventory//infrastructure/aws_sqs_queue.yaml 2 resources
# 2/9]  ../service-inventory//infrastructure/aws_sns_topic.yaml 2 resources
# 3/9]  ../service-inventory//infrastructure/aws_dynamodb_table.yaml 4 resources
# 4/9]  ../service-inventory//infrastructure/aws_lambda_function.yaml 12 resources
# 5/9]  ../service-inventory//infrastructure/aws_cloudwatch_metric_alarm.yaml 8 resources
# 6/9]  ../service-inventory//infrastructure/aws_elasticsearch_domain.yaml 1 resources
# 7/9]  ../service-inventory//infrastructure/aws_kinesis_stream.yaml 3 resources
# 8/9]  ../service-inventory//infrastructure/aws_cloudwatch_event_rule.yaml 1 resources
# 9/9]  ../service-inventory//infrastructure/aws_cloudwatch_log_metric_filter.yaml 1 resources
# total resources: 34

# Resources:
# 1] aws_api_gateway_base_path_mapping.inventory_deployment-base-path-mapping
# 2] aws_api_gateway_deployment.inventory_deployment
# 3] aws_cloudwatch_event_rule.inventory_resource-retention-rule
# 4] aws_cloudwatch_event_target.inventory_resource-retention-rule_target
# 5] aws_cloudwatch_log_group.inventory_encrypted-elasticsearch-logs
# 6] aws_cloudwatch_log_metric_filter.inventory_event-indexer-dropped-records-filter
# 7] aws_cloudwatch_log_resource_policy.inventory_encrypted-elasticsearch_log-policy
# 8] aws_cloudwatch_metric_alarm.inventory_api_lambda-errors
# 9] aws_cloudwatch_metric_alarm.inventory_api_runaway_alarm
# 10] aws_cloudwatch_metric_alarm.inventory_copy-resource-data_lambda-errors
# 11] aws_cloudwatch_metric_alarm.inventory_copy-resource-data_runaway_alarm
# 12] aws_cloudwatch_metric_alarm.inventory_encrypted-cpu-master-alarm
# 13] aws_cloudwatch_metric_alarm.inventory_encrypted-cpu-node-alarm
# 14] aws_cloudwatch_metric_alarm.inventory_encrypted-freespace-node-alarm
# 15] aws_cloudwatch_metric_alarm.inventory_encrypted-jvmmemory-master-alarm
# 16] aws_cloudwatch_metric_alarm.inventory_encrypted-jvmmemory-node-alarm
# 17] aws_cloudwatch_metric_alarm.inventory_encrypted-key-error-alarm
# 18] aws_cloudwatch_metric_alarm.inventory_encrypted-key-inaccessible-alarm
# 19] aws_cloudwatch_metric_alarm.inventory_event-bus_kinesis-iteratoragemilliseconds
# 20] aws_cloudwatch_metric_alarm.inventory_event-bus_kinesis-readexceeded
# 21] aws_cloudwatch_metric_alarm.inventory_event-bus_kinesis-writeexceeded
# 22] aws_cloudwatch_metric_alarm.inventory_event-history_lambda-errors
# 23] aws_cloudwatch_metric_alarm.inventory_event-history_runaway_alarm
# 24] aws_cloudwatch_metric_alarm.inventory_event-indexer-dropped-records-error
# 25] aws_cloudwatch_metric_alarm.inventory_event-indexer_lambda-errors
# 26] aws_cloudwatch_metric_alarm.inventory_event-indexer_runaway_alarm
# 27] aws_cloudwatch_metric_alarm.inventory_event-log_lambda-errors
# 28] aws_cloudwatch_metric_alarm.inventory_event-log_runaway_alarm
# 29] aws_cloudwatch_metric_alarm.inventory_event-replayer_lambda-errors
# 30] aws_cloudwatch_metric_alarm.inventory_event-replayer_runaway_alarm
# 31] aws_cloudwatch_metric_alarm.inventory_event-router_lambda-errors
# 32] aws_cloudwatch_metric_alarm.inventory_event-router_runaway_alarm
# 33] aws_cloudwatch_metric_alarm.inventory_group-tenant-passthrough_lambda-errors
# 34] aws_cloudwatch_metric_alarm.inventory_group-tenant-passthrough_runaway_alarm
# 35] aws_cloudwatch_metric_alarm.inventory_group_ReadThrottleEvents_capacityAlarm
# 36] aws_cloudwatch_metric_alarm.inventory_group_WriteThrottleEvents_capacityAlarm
# 37] aws_cloudwatch_metric_alarm.inventory_history_ReadThrottleEvents_capacityAlarm
# 38] aws_cloudwatch_metric_alarm.inventory_history_WriteThrottleEvents_capacityAlarm
# 39] aws_cloudwatch_metric_alarm.inventory_latest_ReadThrottleEvents_capacityAlarm
# 40] aws_cloudwatch_metric_alarm.inventory_latest_WriteThrottleEvents_capacityAlarm
# 41] aws_cloudwatch_metric_alarm.inventory_move-s3-prefixes_lambda-errors
# 42] aws_cloudwatch_metric_alarm.inventory_move-s3-prefixes_runaway_alarm
# 43] aws_cloudwatch_metric_alarm.inventory_pusher_lambda-errors
# 44] aws_cloudwatch_metric_alarm.inventory_pusher_runaway_alarm
# 45] aws_cloudwatch_metric_alarm.inventory_resend-events_lambda-errors
# 46] aws_cloudwatch_metric_alarm.inventory_resend-events_runaway_alarm
# 47] aws_cloudwatch_metric_alarm.inventory_resource-retention_lambda-errors
# 48] aws_cloudwatch_metric_alarm.inventory_resource-retention_runaway_alarm
# 49] aws_cloudwatch_metric_alarm.inventory_user-query_ReadThrottleEvents_capacityAlarm
# 50] aws_cloudwatch_metric_alarm.inventory_user-query_WriteThrottleEvents_capacityAlarm
# 51] aws_dynamodb_table.inventory_group
# 52] aws_dynamodb_table.inventory_history
# 53] aws_dynamodb_table.inventory_latest
# 54] aws_dynamodb_table.inventory_user-query
# 55] aws_elasticsearch_domain.inventory_encrypted-elasticsearch
# 56] aws_iam_role.inventory_api_role
# 57] aws_iam_role.inventory_copy-resource-data_role
# 58] aws_iam_role.inventory_event-history_role
# 59] aws_iam_role.inventory_event-indexer_role
# 60] aws_iam_role.inventory_event-log_role
# 61] aws_iam_role.inventory_event-replayer_role
# 62] aws_iam_role.inventory_event-router_role
# 63] aws_iam_role.inventory_gateway-invoke-lambda
# 64] aws_iam_role.inventory_group-tenant-passthrough_role
# 65] aws_iam_role.inventory_move-s3-prefixes_role
# 66] aws_iam_role.inventory_pusher_role
# 67] aws_iam_role.inventory_resend-events_role
# 68] aws_iam_role.inventory_resource-retention_role
# 69] aws_iam_role_policy.inventory_api_role_policy
# 70] aws_iam_role_policy.inventory_copy-resource-data_role_policy
# 71] aws_iam_role_policy.inventory_event-history_role_policy
# 72] aws_iam_role_policy.inventory_event-indexer_role_policy
# 73] aws_iam_role_policy.inventory_event-log_role_policy
# 74] aws_iam_role_policy.inventory_event-replayer_role_policy
# 75] aws_iam_role_policy.inventory_event-router_role_policy
# 76] aws_iam_role_policy.inventory_gateway-invoke-lambda_role_policy
# 77] aws_iam_role_policy.inventory_group-tenant-passthrough_role_policy
# 78] aws_iam_role_policy.inventory_move-s3-prefixes_role_policy
# 79] aws_iam_role_policy.inventory_pusher_role_policy
# 80] aws_iam_role_policy.inventory_resend-events_role_policy
# 81] aws_iam_role_policy.inventory_resource-retention_role_policy
# 82] aws_kinesis_stream.inventory_bus
# 83] aws_kinesis_stream.inventory_event-bus
# 84] aws_kinesis_stream.inventory_group-config
# 85] aws_lambda_event_source_mapping.inventory_event-indexer_EvtMap_inventory_event-bus
# 86] aws_lambda_event_source_mapping.inventory_group-tenant-passthrough_EvtMap_inventory_group-config
# 87] aws_lambda_event_source_mapping.inventory_move-s3-prefixes_EvtMap_inventory_move-s3-prefixes
# 88] aws_lambda_event_source_mapping.inventory_pusher_EvtMap_discovery_event-bus
# 89] aws_lambda_function.inventory_api
# 90] aws_lambda_function.inventory_copy-resource-data
# 91] aws_lambda_function.inventory_event-history
# 92] aws_lambda_function.inventory_event-indexer
# 93] aws_lambda_function.inventory_event-log
# 94] aws_lambda_function.inventory_event-replayer
# 95] aws_lambda_function.inventory_event-router
# 96] aws_lambda_function.inventory_group-tenant-passthrough
# 97] aws_lambda_function.inventory_move-s3-prefixes
# 98] aws_lambda_function.inventory_pusher
# 99] aws_lambda_function.inventory_resend-events
# 100] aws_lambda_function.inventory_resource-retention
# 101] aws_lambda_permission.inventory_resource-retention-rule_invoke
# 102] aws_sns_topic.inventory_alarm-topic-sandbox1
# 103] aws_sns_topic.inventory_outbound-event-topic
# 104] aws_sqs_queue.inventory_move-s3-prefixes-deadletter-queue
# 105] aws_sqs_queue.inventory_move-s3-prefixes-queue
# 106] terraform_remote_state.acp-platform-s-inventory-sandbox1_remote_state
# Resources generated: 72