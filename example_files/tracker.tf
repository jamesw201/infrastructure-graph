
# ==============================================
# Terraform file generated by create-infra.py
# Generation time: 2020-07-29T19:50:18.538608
# ==============================================
provider "aws" {
    region                  = "us-east-1"
    shared_credentials_file = "/Users/james.n.wilson/.aws/credentials"
    profile                 = "stage-env1"
}
terraform {
  required_version = "= 0.11.2"
  backend "s3" {
    bucket  = "acp-platform-s-tracker-stage-env1"
    key     = "infrastructure/terraform.tfstate"
    region  = "us-east-1"
  }
}
# ----------------------------------------------
data "terraform_remote_state" "acp-platform-s-tracker-stage-env1_remote_state" {
    backend              = "s3"
    config {
      bucket             = "acp-platform-s-tracker-stage-env1"
      key                = "infrastructure/terraform.tfstate"
      region             = "us-east-1"
    }
}


# ==============================================
# Imported from Terraform files

# Imported from ../service-tracker//infrastructure/tracker_security_group.tf
# ==============================================
# Tracker Security Group
# ==============================================
resource "aws_security_group" "tracker_security-group" {
  name        = "tracker_security-group"
  description = "Security group for tracker to Elasticsearch"
  vpc_id      = "vpc-08a97371868c35cef"

  tags {
    Name        = "tracker_security-group"
    Description = "tracker security group used by Platform.S"
    CreatedBy   = "Platform.S create-infra.py"
  }

  egress {
    from_port   = 443
    to_port     = 443
    protocol    = "TCP"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# ==============================================
# Generated from YAML files

# ==============================================
# aws_dynamodb_table : ../service-tracker//infrastructure/aws_dynamodb_table.yaml

# ----------------------------------------------
resource "aws_dynamodb_table" "tracker_compliance" {
    name                 = "tracker_compliance"
    attribute {
      name               = "id"
      type               = "S"
    }
    attribute {
      name               = "complianceCheck"
      type               = "S"
    }
    hash_key             = "complianceCheck"
    range_key            = "id"
    stream_view_type     = "NEW_AND_OLD_IMAGES"
    stream_enabled       = true
    lifecycle {
      prevent_destroy    = true
    }
    read_capacity        = 10
    write_capacity       = 10
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_compliance"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
    point_in_time_recovery {
      enabled            = true
    }
}


# ==============================================
# aws_lambda_function : ../service-tracker//infrastructure/aws_lambda_function.yaml

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "tracker_api_role" {
    name                 = "tracker_api_role"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_api_role"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "tracker_api_role_policy" {
    name                 = "tracker_api_role_policy"
    role                 = "${aws_iam_role.tracker_api_role.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*tracker_api*"
      ]
    },
    {
      "Action": [
        "dynamodb:Query",
        "dynamodb:PutItem",
        "dynamodb:GetItem",
        "dynamodb:DeleteItem",
        "dynamodb:Scan"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/tracker_compliance/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/tracker_compliance"
      ]
    },
    {
      "Action": [
        "dynamodb:Query"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authentication_key/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authentication_key"
      ]
    },
    {
      "Action": [
        "dynamodb:GetItem"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/authorisation_token"
      ]
    },
    {
      "Action": [
        "es:ESHttpGet",
        "es:ESHttpHead",
        "es:ESHttpPost"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:es:us-east-1:148354739297:domain/governance-domain/*"
      ]
    },
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface"
      ],
      "Effect": "Allow",
      "Resource": [
        "*"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
    depends_on           = [ "aws_iam_role.tracker_api_role" ]
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "tracker_api_runaway_alarm" {
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    evaluation_periods   = 6
    datapoints_to_alarm  = 6
    metric_name          = "Invocations"
    namespace            = "AWS/Lambda"
    period               = 300
    statistic            = "SampleCount"
    threshold            = 500
    alarm_description    = "This metric monitors an individual lambda's invocations"
    treat_missing_data   = "notBreaching"
    dimensions = {
        FunctionName = "tracker_api"
    }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "tracker_api_runaway_alarm"
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_api_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "tracker_api_lambda-errors" {
    comparison_operator  = "GreaterThanThreshold"
    evaluation_periods   = 1
    datapoints_to_alarm  = 1
    metric_name          = "Errors"
    namespace            = "AWS/Lambda"
    period               = 3600
    statistic            = "Sum"
    threshold            = 0
    alarm_description    = "This metric monitors an individual lambdas invocations"
    treat_missing_data   = "notBreaching"
    dimensions = { FunctionName = "tracker_api" }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "tracker_api_lambda-errors"
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_api_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# ----------------------------------------------
resource "aws_lambda_function" "tracker_api" {
    description          = "Tracker API querying tracker_compliance dynamo table"
    handler              = "lib/index.handler"
    runtime              = "nodejs10.x"
    memory_size          = 1024
    timeout              = 30
    filename             = "/tmp/nodejs_lambda_stub.zip"

    vpc_config {
      subnet_ids         = ["subnet-0dfb1c344742e2a4f", "subnet-074c6ca849898109d", "subnet-00edef55b3370b046"]
      security_group_ids = ["${aws_security_group.tracker_security-group.id}"]
    }

    role                 = "${aws_iam_role.tracker_api_role.arn}"
    depends_on           = [ "aws_iam_role.tracker_api_role" ]
    function_name        = "tracker_api"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_api"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "tracker_policy-sync_role" {
    name                 = "tracker_policy-sync_role"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_policy-sync_role"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "tracker_policy-sync_role_policy" {
    name                 = "tracker_policy-sync_role_policy"
    role                 = "${aws_iam_role.tracker_policy-sync_role.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*tracker_policy-sync*"
      ]
    },
    {
      "Action": [
        "es:ESHttpGet",
        "es:ESHttpHead",
        "es:ESHttpPost"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:es:us-east-1:148354739297:domain/governance-domain/*"
      ]
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-tracker-stage-env1/env/*"
      ]
    },
    {
      "Action": [
        "s3:ListBucket"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-action-stage-env1"
      ]
    },
    {
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-action-stage-env1/report/*"
      ]
    },
    {
      "Action": [
        "s3:GetObject",
        "s3:DeleteObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::acp-platform-s-action-stage-env1/tracker-sync/*.json"
      ]
    },
    {
      "Action": [
        "cloudwatch:PutMetricData",
        "cloudwatch:GetMetricStatistics"
      ],
      "Effect": "Allow",
      "Resource": [
        "*"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
    depends_on           = [ "aws_iam_role.tracker_policy-sync_role" ]
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "tracker_policy-sync_runaway_alarm" {
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    evaluation_periods   = 6
    datapoints_to_alarm  = 6
    metric_name          = "Invocations"
    namespace            = "AWS/Lambda"
    period               = 300
    statistic            = "SampleCount"
    threshold            = 100
    alarm_description    = "This metric monitors an individual lambda's invocations"
    treat_missing_data   = "notBreaching"
    dimensions = {
        FunctionName = "tracker_policy-sync"
    }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "tracker_policy-sync_runaway_alarm"
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_policy-sync_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "tracker_policy-sync_lambda-errors" {
    comparison_operator  = "GreaterThanThreshold"
    evaluation_periods   = 1
    datapoints_to_alarm  = 1
    metric_name          = "Errors"
    namespace            = "AWS/Lambda"
    period               = 3600
    statistic            = "Sum"
    threshold            = 0
    alarm_description    = "This metric monitors an individual lambdas invocations"
    treat_missing_data   = "notBreaching"
    dimensions = { FunctionName = "tracker_policy-sync" }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "tracker_policy-sync_lambda-errors"
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_policy-sync_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# ----------------------------------------------
resource "aws_lambda_function" "tracker_policy-sync" {
    description          = "Synchronisation with service policy. Any new system wide compliance watch policy items will be stored here."
    handler              = "lib/index.handler"
    runtime              = "nodejs10.x"
    memory_size          = 2048
    timeout              = 900
    filename             = "/tmp/nodejs_lambda_stub.zip"
    role                 = "${aws_iam_role.tracker_policy-sync_role.arn}"
    depends_on           = [ "aws_iam_role.tracker_policy-sync_role" ]
    function_name        = "tracker_policy-sync"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_policy-sync"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# Generating aws_lambda_permission for SNS arn:aws:sns:us-east-1:148354739297:policy_compliance-watch-violations-topic
# ----------------------------------------------
resource "aws_lambda_permission" "tracker_policy-sync_policy_compliance-watch-violations-topic_sns_invoke_lambda_permission" {
    source_arn           = "arn:aws:sns:us-east-1:148354739297:policy_compliance-watch-violations-topic"
    statement_id         = "tracker_policy-sync_policy_compliance-watch-violations-topic_sns_invoke_lambda_permission"
    action               = "lambda:InvokeFunction"
    principal            = "sns.amazonaws.com"
    function_name        = "${aws_lambda_function.tracker_policy-sync.arn}"
    depends_on           = [ "aws_lambda_function.tracker_policy-sync" ]
}

# Generating aws_sns_topic_subscription for aws_lambda_function
# ----------------------------------------------
resource "aws_sns_topic_subscription" "tracker_policy-sync_Sub_policy_compliance-watch-violations-topic" {
    protocol             = "lambda"
    topic_arn            = "arn:aws:sns:us-east-1:148354739297:policy_compliance-watch-violations-topic"
    endpoint             = "${aws_lambda_function.tracker_policy-sync.arn}"
    depends_on           = [ "aws_lambda_function.tracker_policy-sync" ]
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "tracker_dynamo-es-sync_role" {
    name                 = "tracker_dynamo-es-sync_role"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_dynamo-es-sync_role"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "tracker_dynamo-es-sync_role_policy" {
    name                 = "tracker_dynamo-es-sync_role_policy"
    role                 = "${aws_iam_role.tracker_dynamo-es-sync_role.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*tracker_dynamo-es-sync*"
      ]
    },
    {
      "Action": [
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:DescribeStream",
        "dynamodb:ListStreams"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:dynamodb:us-east-1:148354739297:table/tracker_compliance/*",
        "arn:aws:dynamodb:us-east-1:148354739297:table/tracker_compliance"
      ]
    },
    {
      "Action": [
        "es:ESHttpGet",
        "es:ESHttpDelete",
        "es:ESHttpHead",
        "es:ESHttpPost",
        "es:ESHttpPut"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:es:us-east-1:148354739297:domain/governance-domain/*"
      ]
    },
    {
      "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface"
      ],
      "Effect": "Allow",
      "Resource": [
        "*"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
    depends_on           = [ "aws_iam_role.tracker_dynamo-es-sync_role" ]
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "tracker_dynamo-es-sync_runaway_alarm" {
    comparison_operator  = "GreaterThanOrEqualToThreshold"
    evaluation_periods   = 6
    datapoints_to_alarm  = 6
    metric_name          = "Invocations"
    namespace            = "AWS/Lambda"
    period               = 300
    statistic            = "SampleCount"
    threshold            = 100
    alarm_description    = "This metric monitors an individual lambda's invocations"
    treat_missing_data   = "notBreaching"
    dimensions = {
        FunctionName = "tracker_dynamo-es-sync"
    }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "tracker_dynamo-es-sync_runaway_alarm"
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_dynamo-es-sync_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "tracker_dynamo-es-sync_lambda-errors" {
    comparison_operator  = "GreaterThanThreshold"
    evaluation_periods   = 1
    datapoints_to_alarm  = 1
    metric_name          = "Errors"
    namespace            = "AWS/Lambda"
    period               = 3600
    statistic            = "Sum"
    threshold            = 0
    alarm_description    = "This metric monitors an individual lambdas invocations"
    treat_missing_data   = "notBreaching"
    dimensions = { FunctionName = "tracker_dynamo-es-sync" }
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    alarm_name           = "tracker_dynamo-es-sync_lambda-errors"
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_dynamo-es-sync_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# ----------------------------------------------
resource "aws_lambda_function" "tracker_dynamo-es-sync" {
    description          = "stream lambda for syncing dynamo to elasticsearch"
    handler              = "index.handler"
    runtime              = "python3.6"
    memory_size          = 512
    timeout              = 60
    filename             = "/tmp/python_lambda_stub.zip"

    vpc_config {
      subnet_ids         = ["subnet-0dfb1c344742e2a4f", "subnet-074c6ca849898109d", "subnet-00edef55b3370b046"]
      security_group_ids = ["${aws_security_group.tracker_security-group.id}"]
    }

    role                 = "${aws_iam_role.tracker_dynamo-es-sync_role.arn}"
    depends_on           = [ "aws_iam_role.tracker_dynamo-es-sync_role" ]
    function_name        = "tracker_dynamo-es-sync"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_dynamo-es-sync"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# Generating aws_lambda_event_source_mapping for aws_lambda_function
# ----------------------------------------------
resource "aws_lambda_event_source_mapping" "tracker_dynamo-es-sync_EvtMap_tracker_stream" {
    function_name        = "tracker_dynamo-es-sync"
    event_source_arn     = "${aws_dynamodb_table.tracker_compliance.stream_arn}"
    starting_position    = "TRIM_HORIZON"
    batch_size           = 100
    depends_on           = [ "aws_lambda_function.tracker_dynamo-es-sync" ]
}

# ----------------------------------------------
resource "aws_iam_role" "tracker_gateway-invoke-lambda" {
    name                 = "tracker_gateway-invoke-lambda"
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": "apigateway.amazonaws.com"
      },
      "Sid": ""
    }
  ],
  "Version": "2012-10-17"
}
EOF
    tags {
      Environment        = "stage-env1"
      Name               = "tracker_gateway-invoke-lambda"
      CreatedBy          = "Platform.S create-infra.py"
      Component          = "tracker"
    }
}

# Generating aws_iam_role_policy for aws_iam_role
# ----------------------------------------------
resource "aws_iam_role_policy" "tracker_gateway-invoke-lambda_role_policy" {
    name                 = "tracker_gateway-invoke-lambda_role_policy"
    role                 = "${aws_iam_role.tracker_gateway-invoke-lambda.id}"
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:lambda:us-east-1:148354739297:function:tracker_api"
      ]
    },
    {
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:logs:*:*:*"
      ]
    }
  ],
  "Version": "2012-10-17"
}
EOF
}



# Generating aws_api_gateway_rest_api for aws_api_gateway_deployment
# ----------------------------------------------
resource "aws_api_gateway_rest_api" "tracker" {
    name = "tracker"
    binary_media_types = ["*/*"]
    # policy = <<POLICY
    # {
    #     "Version": "2012-10-17",
    #     "Statement": [
    #         {
    #             "Effect": "Allow",
    #             "Principal": "*",
    #             "Action": "execute-api:Invoke",
    #             "Resource": [
    #                 "execute-api:/*"
    #             ]
    #         },
    #         {
    #             "Effect": "Deny",
    #             "Principal": "*",
    #             "Action": "execute-api:Invoke",
    #             "Resource": [
    #             "execute-api:/*"
    #             ],
    #             "Condition" : {
    #                 "IpAddress": {
    #                     "aws:SourceIp": []
    #                 }
    #             }
    #         }
    #     ]
    # }
    # POLICY
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "tracker_deployment_resource_proxy" {
    parent_id = "${aws_api_gateway_rest_api.tracker.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.tracker.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "tracker_integration_tracker_deployment_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.tracker.id}"
    resource_id = "${aws_api_gateway_resource.tracker_deployment_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "tracker_integration_tracker_deployment_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.tracker_deployment_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.tracker_api.arn}/invocations"
    http_method = "${aws_api_gateway_method.tracker_integration_tracker_deployment_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.tracker.id}"
    credentials = "${aws_iam_role.tracker_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}

# Generating base path mapping for component
# ----------------------------------------------
resource "aws_api_gateway_base_path_mapping" "tracker_deployment-base-path-mapping" {
    base_path            = "tracker"
    api_id               = "${aws_api_gateway_rest_api.tracker.id}"
    stage_name           = "stage_env1"
    domain_name          = "api.stage-env1.cloudplatform.accenture.com"
    depends_on           = [ "aws_api_gateway_deployment.tracker_deployment" ]
}

# ----------------------------------------------
resource "aws_api_gateway_deployment" "tracker_deployment" {
    stage_name           = "stage_env1"
    rest_api_id          = "${aws_api_gateway_rest_api.tracker.id}"
    depends_on           = [ "aws_api_gateway_integration.tracker_integration_tracker_deployment_resource_ANY_int" ]
}


# ==============================================
# Summary: 
# 1/2]  ../service-tracker//infrastructure/aws_dynamodb_table.yaml 1 resources
# 2/2]  ../service-tracker//infrastructure/aws_lambda_function.yaml 3 resources
# total resources: 4

# Resources:
# 1] aws_api_gateway_base_path_mapping.tracker_deployment-base-path-mapping
# 2] aws_api_gateway_deployment.tracker_deployment
# 3] aws_cloudwatch_metric_alarm.tracker_api_lambda-errors
# 4] aws_cloudwatch_metric_alarm.tracker_api_runaway_alarm
# 5] aws_cloudwatch_metric_alarm.tracker_dynamo-es-sync_lambda-errors
# 6] aws_cloudwatch_metric_alarm.tracker_dynamo-es-sync_runaway_alarm
# 7] aws_cloudwatch_metric_alarm.tracker_policy-sync_lambda-errors
# 8] aws_cloudwatch_metric_alarm.tracker_policy-sync_runaway_alarm
# 9] aws_dynamodb_table.tracker_compliance
# 10] aws_iam_role.tracker_api_role
# 11] aws_iam_role.tracker_dynamo-es-sync_role
# 12] aws_iam_role.tracker_gateway-invoke-lambda
# 13] aws_iam_role.tracker_policy-sync_role
# 14] aws_iam_role_policy.tracker_api_role_policy
# 15] aws_iam_role_policy.tracker_dynamo-es-sync_role_policy
# 16] aws_iam_role_policy.tracker_gateway-invoke-lambda_role_policy
# 17] aws_iam_role_policy.tracker_policy-sync_role_policy
# 18] aws_lambda_event_source_mapping.tracker_dynamo-es-sync_EvtMap_tracker_stream
# 19] aws_lambda_function.tracker_api
# 20] aws_lambda_function.tracker_dynamo-es-sync
# 21] aws_lambda_function.tracker_policy-sync
# 22] aws_lambda_permission.tracker_policy-sync_policy_compliance-watch-violations-topic_sns_invoke_lambda_permission
# 23] aws_sns_topic_subscription.tracker_policy-sync_Sub_policy_compliance-watch-violations-topic
# 24] terraform_remote_state.acp-platform-s-tracker-stage-env1_remote_state
# Resources generated: 20