
# ==============================================
# Terraform file generated by create-infra.py
# Generation time: 2019-11-26T23:57:57.108824
# ==============================================
provider "aws" {
    region                  = "us-east-1"
    shared_credentials_file = "/Users/james.n.wilson/.aws/credentials"
    profile                 = "sandbox1"
}
terraform {
  required_version = "= 0.11.2"
  backend "s3" {
    bucket  = "acp-platform-s-discovery-sandbox1"
    key     = "infrastructure/terraform.tfstate"
    region  = "us-east-1"
  }
}
# ----------------------------------------------
data "terraform_remote_state" "acp-platform-s-discovery-sandbox1_remote_state" {
    config {
      bucket             = "acp-platform-s-discovery-sandbox1"
      key                = "infrastructure/terraform.tfstate"
      region             = "us-east-1"
    }
    backend              = "s3"
}


# ==============================================
# Imported from Terraform files

# Imported from ../service-discovery//infrastructure/aws_kms_key.tf
# ----------------------------------------------------------
# Master key used for encrypting/decrypting discovery collector
# cache tokens
resource "aws_kms_key" "discovery_cache-master-key" {
    description = "Master key used for creating/decrypting cache token data keys"
    enable_key_rotation = true

    lifecycle {
      prevent_destroy = true
    }
}

# ----------------------------------------------------------
# Master key alias
resource "aws_kms_alias" "discovery_cache-master-key" {
  name          = "alias/discoverycache"
  target_key_id = "${aws_kms_key.discovery_cache-master-key.key_id}"
}

# Imported from ../service-discovery//infrastructure/discovery_collector-service.tf
# ==============================================
# discovery ECS Service
# ==============================================
resource "aws_ecs_service" "discovery_collector-service" {
  name = "discovery_collector-service"
  cluster = "${aws_ecs_cluster.discovery_platform-s-cluster.id}"
  task_definition = "${aws_ecs_task_definition.discovery_collector-task-definition.arn}"
  desired_count = 1
  launch_type = "FARGATE"
  deployment_minimum_healthy_percent = 10
  deployment_maximum_percent = 200
  network_configuration = {
    subnets = [
      "${aws_subnet.discovery_private-subnet-az-a.id}",
      "${aws_subnet.discovery_private-subnet-az-b.id}"
    ]
    security_groups = [
      "${aws_security_group.discovery_cache-security-group1.id}"
    ]
  }
  depends_on = ["aws_iam_role.discovery_ecs-execution-role"]
}


# Imported from ../service-discovery//infrastructure/discovery_collector-autoscaling.tf
# ==============================================
# discovery CloudWatch Alarm that monitors SQS queue length for scaling up
# ==============================================
resource "aws_cloudwatch_metric_alarm" "discovery_cloudwatch-collector-queue-cloudwatch-alaram-messages-high" {
  alarm_name = "discovery_cloudwatch-collector-queue-cloudwatch-alarm-messages-high"
  alarm_description = "This alarm monitors the number of messages in the discovery_collector-queue for scaling up"
  comparison_operator = "GreaterThanOrEqualToThreshold"
  evaluation_periods = "1"
  metric_name = "ApproximateNumberOfMessagesVisible"
  namespace = "AWS/SQS"
  period = "60"
  statistic = "Average"
  threshold = "1000"

  dimensions {
    QueueName = "${aws_sqs_queue.discovery_collector-queue.name}"
  }

  alarm_actions = ["${aws_appautoscaling_policy.discovery_collector-autoscaling-up.arn}"]
}

# ==============================================
# discovery CloudWatch Alarm that monitors SQS queue length for scaling down
# ==============================================
resource "aws_cloudwatch_metric_alarm" "discovery_collector-queue-cloudwatch-alaram-messages-low" {
  alarm_name = "discovery_collector-queue-cloudwatch-alarm-messages-low"
  alarm_description = "This alarm monitors the number of messages in the discovery_collector-queue for scaling down"
  comparison_operator = "LessThanThreshold"
  evaluation_periods = "1"
  metric_name = "ApproximateNumberOfMessagesVisible"
  namespace = "AWS/SQS"
  period = "60"
  statistic = "Average"
  threshold = "1000"

  dimensions {
    QueueName = "${aws_sqs_queue.discovery_collector-queue.name}"
  }

  alarm_actions = ["${aws_appautoscaling_policy.discovery_collector-autoscaling-down.arn}"]
}

# ==============================================
# discovery Collector Autoscaling Target
# ==============================================
resource "aws_appautoscaling_target" "discovery_collector-autoscaling-target" {
  service_namespace = "ecs"
  resource_id = "service/${aws_ecs_cluster.discovery_platform-s-cluster.name}/${aws_ecs_service.discovery_collector-service.name}"
  scalable_dimension = "ecs:service:DesiredCount"
  role_arn = "${aws_iam_role.discovery_ecs-autoscale-role.arn}"
  min_capacity = 1
  max_capacity = 20

  depends_on = [
    "aws_ecs_cluster.discovery_platform-s-cluster",
    "aws_ecs_service.discovery_collector-service"
  ]
}

# ==============================================
# discovery Autoscaling Policy for scaling up
# ==============================================
resource "aws_appautoscaling_policy" "discovery_collector-autoscaling-up" {
  name                      = "discovery_collector-autoscaling-up"
  service_namespace         = "ecs"
  resource_id               = "service/${aws_ecs_cluster.discovery_platform-s-cluster.name}/${aws_ecs_service.discovery_collector-service.name}"
  scalable_dimension        = "ecs:service:DesiredCount"

  step_scaling_policy_configuration {
    adjustment_type         = "ChangeInCapacity"
    cooldown                = 60
    metric_aggregation_type = "Average"

    step_adjustment {
      metric_interval_lower_bound = 0
      metric_interval_upper_bound = 1000
      scaling_adjustment = 1
    }

    step_adjustment {
      metric_interval_lower_bound = 1000
      metric_interval_upper_bound = 3000
      scaling_adjustment = 3
    }

    step_adjustment {
      metric_interval_lower_bound = 3000
      scaling_adjustment = 6
    }
  }

  depends_on = [
    "aws_appautoscaling_target.discovery_collector-autoscaling-target"
  ]
}

# ==============================================
# discovery Autoscaling Policy for scaling down
# ==============================================
resource "aws_appautoscaling_policy" "discovery_collector-autoscaling-down" {
  name                      = "discovery_collector-autoscaling-down"
  service_namespace         = "ecs"
  resource_id               = "service/${aws_ecs_cluster.discovery_platform-s-cluster.name}/${aws_ecs_service.discovery_collector-service.name}"
  scalable_dimension        = "ecs:service:DesiredCount"

  step_scaling_policy_configuration {
    adjustment_type         = "ChangeInCapacity"
    cooldown                = 120
    metric_aggregation_type = "Average"

    step_adjustment {
      metric_interval_upper_bound = 0
      scaling_adjustment = -3
    }
  }

  depends_on = [
    "aws_appautoscaling_target.discovery_collector-autoscaling-target"
  ]
}


# Imported from ../service-discovery//infrastructure/discovery_diff-engine-service.tf
# ==============================================
# discovery ECS Service
# ==============================================
resource "aws_ecs_service" "discovery_diff-engine-service" {
  name = "discovery_diff-engine-service"
  cluster = "${aws_ecs_cluster.discovery_platform-s-cluster.id}"
  task_definition = "${aws_ecs_task_definition.discovery_diff-engine-task-definition.arn}"
  desired_count = 1
  launch_type = "FARGATE"
  deployment_minimum_healthy_percent = 10
  deployment_maximum_percent = 200
  network_configuration = {
    subnets = [
      "${aws_subnet.discovery_private-subnet-az-a.id}",
      "${aws_subnet.discovery_private-subnet-az-b.id}"
    ]
    security_groups = [
      "${aws_security_group.discovery_cache-security-group1.id}"
    ]
  }
  depends_on = ["aws_iam_role.discovery_ecs-execution-role"]
}


# Imported from ../service-discovery//infrastructure/discovery_diff-tagging-log-metrics.tf
########################################################################
# Discovery Diff Tagging Lambda log metric filter
# to alert on dropped kinesis events in the logs
########################################################################
resource "aws_cloudwatch_log_metric_filter" "discovery_diff-tagging-failed-event-error" {
  name           = "diff_tagging_failed_event"
  pattern        = "CAUTION Discovery diff-tagging lambda failed to process event."
  log_group_name = "/aws/lambda/discovery_diff-tagging"

  metric_transformation {
    name      = "diff_tagging_failed_event"
    namespace = "diff_tagging_log_metrics"
    value     = "1"
  }
}


# Imported from ../service-discovery//infrastructure/discovery_publisher-lambda_sqs_mapping.tf
# ==============================================
# Make the Publisher SQS queue trigger the lambda
# ==============================================
resource "aws_lambda_event_source_mapping" "discovery_publisher-lambda-sqs-mapping" {
  batch_size        = 1
  event_source_arn  = "${aws_sqs_queue.discovery_publisher-queue.arn}"
  enabled           = true
  function_name     = "${aws_lambda_function.discovery_publisher.arn}"
}

# Imported from ../service-discovery//infrastructure/discovery_consistency-checker-lambda-sqs-mapping.tf
# ==============================================
# Make the Publisher SQS queue trigger the lambda
# ==============================================
resource "aws_lambda_event_source_mapping" "discovery_consistency-checker-lambda-sqs-mapping" {
  batch_size       = 1
  event_source_arn = "${aws_sqs_queue.discovery_consistency-checker-queue.arn}"
  enabled          = false
  function_name    = "${aws_lambda_function.discovery_consistency-checker.arn}"
}


# Imported from ../service-discovery//infrastructure/discovery_ops-dashboard.tf
# ==============================================
# discovery Ops Dashboard
# ==============================================

resource "aws_cloudwatch_dashboard" "discovery_ops-dashboard" {
  dashboard_name = "discovery_ops-dashboard"

  dashboard_body = <<EOF
    {
        "widgets": [
            {
                "type": "metric",
                "x": 0,
                "y": 1,
                "width": 9,
                "height": 6,
                "properties": {
                    "title": "Discovery Lambda Invocations",
                    "region": "us-east-1",
                    "period": 300,
                    "stat": "Sum",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Invocations", "FunctionName", "discovery_api", "Resource", "discovery_api", { "color": "#d62728", "label": "discovery_api" } ],
                        [ ".", ".", ".", "discovery_collector", { "color": "#e377c2" } ],
                        [ ".", ".", ".", "discovery_default-config", "Resource", "discovery_default-config", { "color": "#ffbb78", "label": "discovery_default-config" } ],
                        [ ".", ".", ".", "discovery_diff-engine", { "color": "#ff9896" } ],
                        [ ".", ".", ".", "discovery_event-adapter", "Resource", "discovery_event-adapter", { "color": "#f7b6d2", "label": "discovery_event-adapter" } ],
                        [ "...", "discovery_publisher", ".", "discovery_publisher", { "color": "#9467bd", "label": "discovery_publisher" } ],
                        [ "...", "discovery_scheduler", ".", "discovery_scheduler", { "color": "#c5b0d5" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 0,
                "y": 22,
                "width": 9,
                "height": 6,
                "properties": {
                    "title": "Identity Lambda Invocations",
                    "region": "us-east-1",
                    "period": 300,
                    "stat": "Sum",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Invocations", "FunctionName", "identity_tenant-sync", { "color": "#bcbd22" } ],
                        [ "...", "identity_orgunit-sync", { "color": "#2ca02c" } ],
                        [ "...", "acp3-identity-sync_identity-auth-sync", { "color": "#17becf" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 18,
                "y": 29,
                "width": 6,
                "height": 6,
                "properties": {
                    "title": "Identity DynamoDB",
                    "region": "us-east-1",
                    "period": 300,
                    "stat": "Sum",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/DynamoDB", "ProvisionedReadCapacityUnits", "TableName", "identity_tenant" ],
                        [ ".", "ProvisionedWriteCapacityUnits", ".", ".", { "color": "#1f2cb4" } ],
                        [ ".", "ConsumedReadCapacityUnits", ".", ".", { "color": "#414fde" } ],
                        [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "color": "#20276f" } ],
                        [ ".", "ProvisionedWriteCapacityUnits", ".", "identity_organisational-unit", { "color": "#d62728" } ],
                        [ ".", "ProvisionedReadCapacityUnits", ".", ".", { "color": "#951b1c" } ],
                        [ ".", "ConsumedReadCapacityUnits", ".", ".", { "color": "#540f10" } ],
                        [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "color": "#de5252" } ],
                        [ ".", "ProvisionedWriteCapacityUnits", ".", "authentication_key", { "color": "#2ca02c" } ],
                        [ ".", "ProvisionedReadCapacityUnits", ".", ".", { "color": "#bcbd22" } ],
                        [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "color": "#98df8a" } ],
                        [ ".", "ConsumedReadCapacityUnits", ".", ".", { "color": "#dbdb8d" } ],
                        [ ".", "ProvisionedReadCapacityUnits", ".", "account_account", { "color": "#ff7f0e" } ],
                        [ ".", "ProvisionedWriteCapacityUnits", ".", ".", { "color": "#ffbb78" } ],
                        [ ".", "ConsumedReadCapacityUnits", ".", ".", { "color": "#ffa85b" } ],
                        [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "color": "#c25a00" } ],
                        [ ".", "ProvisionedWriteCapacityUnits", ".", "secret_key", { "color": "#9467bd" } ],
                        [ ".", "ProvisionedReadCapacityUnits", ".", ".", { "color": "#c5b0d5" } ],
                        [ ".", "ConsumedReadCapacityUnits", ".", ".", { "color": "#f7b6d2" } ],
                        [ ".", "ConsumedWriteCapacityUnits", ".", "secret_secret", { "color": "#8c564b" } ],
                        [ ".", "ProvisionedReadCapacityUnits", ".", ".", { "color": "#c49c94" } ],
                        [ ".", "ProvisionedWriteCapacityUnits", ".", ".", { "color": "#7f7f7f" } ],
                        [ ".", "ConsumedReadCapacityUnits", ".", ".", { "color": "#c7c7c7" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 12,
                "y": 29,
                "width": 6,
                "height": 6,
                "properties": {
                    "title": "Discovery DynamoDB",
                    "region": "us-east-1",
                    "period": 300,
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "discovery_tenant-config" ],
                        [ ".", "ProvisionedReadCapacityUnits", ".", ".", { "color": "#17becf" } ],
                        [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "color": "#aec7e8" } ],
                        [ ".", "ProvisionedWriteCapacityUnits", ".", ".", { "color": "#9edae5" } ],
                        [ ".", "ProvisionedReadCapacityUnits", ".", "discovery_collector-config", { "color": "#d62728" } ],
                        [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "color": "#ff7f0e" } ],
                        [ ".", "ProvisionedWriteCapacityUnits", ".", ".", { "color": "#ffbb78" } ],
                        [ ".", "ConsumedReadCapacityUnits", ".", ".", { "color": "#dbdb8d" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 0,
                "y": 8,
                "width": 9,
                "height": 6,
                "properties": {
                    "title": "Inventory Lambda Invocations",
                    "region": "us-east-1",
                    "period": 300,
                    "stat": "Sum",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Invocations", "FunctionName", "inventory_api" ],
                        [ "...", "inventory_event-broker", { "color": "#17becf" } ],
                        [ "...", "inventory_event-consumer", { "color": "#aec7e8" } ],
                        [ "...", "inventory_event-indexer", { "color": "#9edae5" } ],
                        [ "...", "inventory_resource-retention", { "color": "#98df8a" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 0,
                "y": 29,
                "width": 12,
                "height": 6,
                "properties": {
                    "title": "Secret API",
                    "region": "us-east-1",
                    "period": 300,
                    "stat": "Sum",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Throttles", "FunctionName", "secret_api", { "color": "#d62728" } ],
                        [ ".", "Errors", ".", ".", { "color": "#ffbb78" } ],
                        [ ".", "Invocations", ".", ".", { "color": "#ff7f0e" } ],
                        [ ".", "Duration", ".", ".", { "color": "#ff9896", "stat": "Average" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 0,
                "y": 15,
                "width": 9,
                "height": 6,
                "properties": {
                    "title": "Account Lambda Invocations",
                    "region": "us-east-1",
                    "period": 300,
                    "stat": "Sum",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Invocations", "FunctionName", "account_account-sns-publisher", { "color": "#2ca02c" } ],
                        [ "...", "account_account-sync", { "color": "#98df8a" } ],
                        [ "...", "account_api", { "color": "#bcbd22" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 9,
                "y": 8,
                "width": 9,
                "height": 6,
                "properties": {
                    "title": "Inventory Lambda Errors and Throttles",
                    "region": "us-east-1",
                    "period": 300,
                    "stat": "Sum",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Errors", "FunctionName", "inventory_api" ],
                        [ "...", "inventory_event-broker", { "color": "#17becf" } ],
                        [ "...", "inventory_event-consumer", { "color": "#aec7e8" } ],
                        [ "...", "inventory_event-indexer", { "color": "#9edae5" } ],
                        [ "...", "inventory_resource-retention", { "color": "#98df8a" } ],
                        [ ".", "Throttles", ".", "inventory_api" ],
                        [ "...", "inventory_event-broker", { "color": "#17becf" } ],
                        [ "...", "inventory_event-consumer", { "color": "#aec7e8" } ],
                        [ "...", "inventory_event-indexer", { "color": "#9edae5" } ],
                        [ "...", "inventory_resource-retention", { "color": "#98df8a" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 9,
                "y": 15,
                "width": 9,
                "height": 6,
                "properties": {
                    "title": "Account Lambda Errors & Throttles",
                    "region": "us-east-1",
                    "period": 300,
                    "stat": "Sum",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Errors", "FunctionName", "account_account-sns-publisher", { "color": "#2ca02c" } ],
                        [ "...", "account_account-sync", { "color": "#98df8a" } ],
                        [ "...", "account_api", { "color": "#bcbd22" } ],
                        [ ".", "Throttles", ".", "account_account-sns-publisher", { "color": "#2ca02c" } ],
                        [ "...", "account_account-sync", { "color": "#98df8a" } ],
                        [ "...", "account_api", { "color": "#bcbd22" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 9,
                "y": 22,
                "width": 9,
                "height": 6,
                "properties": {
                    "title": "Identity Lambda Errors",
                    "region": "us-east-1",
                    "period": 300,
                    "stat": "Sum",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Errors", "FunctionName", "identity_tenant-sync", { "color": "#bcbd22" } ],
                        [ "...", "identity_orgunit-sync", { "color": "#2ca02c" } ],
                        [ "...", "acp3-identity-sync_identity-auth-sync", { "color": "#17becf" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 9,
                "y": 1,
                "width": 9,
                "height": 6,
                "properties": {
                    "title": "Discovery Lambda Errors and Throttles",
                    "region": "us-east-1",
                    "period": 300,
                    "stat": "Sum",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Errors", "FunctionName", "discovery_api", { "color": "#d62728" } ],
                        [ "...", "discovery_collector", { "color": "#e377c2" } ],
                        [ "...", "discovery_default-config", { "color": "#ffbb78" } ],
                        [ "...", "discovery_diff-engine", { "color": "#f7b6d2" } ],
                        [ "...", "discovery_event-adapter", { "color": "#ff9896" } ],
                        [ "...", "discovery_publisher", { "color": "#9467bd" } ],
                        [ "...", "discovery_scheduler", { "color": "#c5b0d5" } ],
                        [ ".", "Throttles", ".", "discovery_api", { "color": "#d62728" } ],
                        [ "...", "discovery_collector", { "color": "#e377c2" } ],
                        [ "...", "discovery_default-config", { "color": "#ffbb78" } ],
                        [ "...", "discovery_diff-engine", { "color": "#f7b6d2" } ],
                        [ "...", "discovery_event-adapter", { "color": "#ff9896" } ],
                        [ "...", "discovery_publisher", { "color": "#9467bd" } ],
                        [ "...", "discovery_scheduler", { "color": "#c5b0d5" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 18,
                "y": 1,
                "width": 6,
                "height": 6,
                "properties": {
                    "title": "Discovery Lambda Duration",
                    "region": "us-east-1",
                    "period": 300,
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Duration", "FunctionName", "discovery_api", { "color": "#d62728" } ],
                        [ "...", "discovery_collector", { "color": "#e377c2" } ],
                        [ "...", "discovery_default-config", { "color": "#ffbb78" } ],
                        [ "...", "discovery_diff-engine", { "color": "#f7b6d2" } ],
                        [ "...", "discovery_event-adapter", { "color": "#ff9896" } ],
                        [ "...", "discovery_publisher", { "color": "#9467bd" } ],
                        [ "...", "discovery_scheduler", { "color": "#c5b0d5" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 18,
                "y": 8,
                "width": 6,
                "height": 6,
                "properties": {
                    "title": "Inventory Lambda Duration",
                    "region": "us-east-1",
                    "period": 300,
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Duration", "FunctionName", "inventory_api" ],
                        [ "...", "inventory_event-broker", { "color": "#17becf" } ],
                        [ "...", "inventory_event-consumer", { "color": "#aec7e8" } ],
                        [ "...", "inventory_event-indexer", { "color": "#9edae5" } ],
                        [ "...", "inventory_resource-retention", { "color": "#98df8a" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 18,
                "y": 22,
                "width": 6,
                "height": 6,
                "properties": {
                    "title": "Identity Lambda Duration",
                    "region": "us-east-1",
                    "period": 300,
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Duration", "FunctionName", "identity_tenant-sync", { "color": "#bcbd22" } ],
                        [ "...", "identity_orgunit-sync", { "color": "#2ca02c" } ],
                        [ "...", "acp3-identity-sync_identity-auth-sync", { "color": "#17becf" } ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 18,
                "y": 15,
                "width": 6,
                "height": 6,
                "properties": {
                    "title": "Account Lambda Duration",
                    "region": "us-east-1",
                    "period": 300,
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Duration", "FunctionName", "account_account-sns-publisher", { "color": "#2ca02c" } ],
                        [ "...", "account_account-sync", { "color": "#98df8a" } ],
                        [ "...", "account_api", { "color": "#bcbd22" } ]
                    ]
                }
            },
            {
                "type": "text",
                "x": 0,
                "y": 0,
                "width": 24,
                "height": 1,
                "properties": {
                    "markdown": "\n# Discovery\n"
                }
            },
            {
                "type": "text",
                "x": 0,
                "y": 7,
                "width": 24,
                "height": 1,
                "properties": {
                    "markdown": "\n# Inventory\n"
                }
            },
            {
                "type": "text",
                "x": 0,
                "y": 14,
                "width": 24,
                "height": 1,
                "properties": {
                    "markdown": "\n# Account\n"
                }
            },
            {
                "type": "text",
                "x": 0,
                "y": 21,
                "width": 24,
                "height": 1,
                "properties": {
                    "markdown": "\n# Identity Sync\n"
                }
            },
            {
                "type": "text",
                "x": 0,
                "y": 28,
                "width": 12,
                "height": 1,
                "properties": {
                    "markdown": "\n# Secret API Health\n"
                }
            },
            {
                "type": "text",
                "x": 12,
                "y": 28,
                "width": 12,
                "height": 1,
                "properties": {
                    "markdown": "\n# Discovery & Identity DynamoDB\n"
                }
            },
            {
                "type": "text",
                "x": 0,
                "y": 35,
                "width": 24,
                "height": 1,
                "properties": {
                    "markdown": "\n# External Systems Health\n"
                }
            },
            {
                "type": "metric",
                "x": 0,
                "y": 36,
                "width": 12,
                "height": 6,
                "properties": {
                    "title": "AWS Endpoint Latency",
                    "region": "us-east-1",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "Discovery/Collector", "Latency", "endpoint", "AWS.ACM.describeCertificate" ],
                        [ "...", "AWS.ACM.listCertificates" ],
                        [ "...", "AWS.AutoScaling.describeAutoScalingGroups" ],
                        [ "...", "AWS.CloudFront.listDistributions" ],
                        [ "...", "AWS.CloudTrail.describeTrails" ],
                        [ "...", "AWS.CloudTrail.getEventSelectors" ],
                        [ "...", "AWS.CloudTrail.getTrailStatus" ],
                        [ "...", "AWS.DynamoDB.describeTable" ],
                        [ "...", "AWS.DynamoDB.listTables" ],
                        [ "...", "AWS.EC2.describeAddresses" ],
                        [ "...", "AWS.EC2.describeFlowLogs" ],
                        [ "...", "AWS.EC2.describeImages" ],
                        [ "...", "AWS.EC2.describeInstances" ],
                        [ "...", "AWS.EC2.describeInternetGateways" ],
                        [ "...", "AWS.EC2.describeNetworkAcls" ],
                        [ "...", "AWS.EC2.describeNetworkInterfaces" ],
                        [ "...", "AWS.EC2.describeReservedInstances" ],
                        [ "...", "AWS.EC2.describeRouteTables" ],
                        [ "...", "AWS.EC2.describeSecurityGroups" ],
                        [ "...", "AWS.EC2.describeSnapshots" ],
                        [ "...", "AWS.EC2.describeStaleSecurityGroups" ],
                        [ "...", "AWS.EC2.describeSubnets" ],
                        [ "...", "AWS.EC2.describeVolumes" ],
                        [ "...", "AWS.EC2.describeVpcEndpoints" ],
                        [ "...", "AWS.EC2.describeVpcPeeringConnections" ],
                        [ "...", "AWS.EC2.describeVpcs" ],
                        [ "...", "AWS.EC2.describeVpnGateways" ],
                        [ "...", "AWS.ELB.describeLoadBalancerAttributes" ],
                        [ "...", "AWS.ELB.describeLoadBalancers" ],
                        [ "...", "AWS.ELB.describeTags" ],
                        [ "...", "AWS.ELBv2.describeListeners" ],
                        [ "...", "AWS.ELBv2.describeLoadBalancerAttributes" ],
                        [ "...", "AWS.ELBv2.describeLoadBalancers" ],
                        [ "...", "AWS.ELBv2.describeTags" ],
                        [ "...", "AWS.ELBv2.describeTargetGroups" ],
                        [ "...", "AWS.ELBv2.describeTargetHealth" ],
                        [ "...", "AWS.ES.describeElasticsearchDomain" ],
                        [ "...", "AWS.ES.listDomainNames" ],
                        [ "...", "AWS.Glacier.getVaultAccessPolicy" ],
                        [ "...", "AWS.Glacier.getVaultLock" ],
                        [ "...", "AWS.Glacier.listTagsForVault" ],
                        [ "...", "AWS.Glacier.listVaults" ],
                        [ "...", "AWS.IAM.generateCredentialReport" ],
                        [ "...", "AWS.IAM.getAccountPasswordPolicy" ],
                        [ "...", "AWS.IAM.getCredentialReport" ],
                        [ "...", "AWS.IAM.getGroupPolicy" ],
                        [ "...", "AWS.IAM.getPolicyVersion" ],
                        [ "...", "AWS.IAM.getRolePolicy" ],
                        [ "...", "AWS.IAM.getUserPolicy" ],
                        [ "...", "AWS.IAM.listAttachedGroupPolicies" ],
                        [ "...", "AWS.IAM.listAttachedUserPolicies" ],
                        [ "...", "AWS.IAM.listEntitiesForPolicy" ],
                        [ "...", "AWS.IAM.listGroupPolicies" ],
                        [ "...", "AWS.IAM.listGroups" ],
                        [ "...", "AWS.IAM.listGroupsForUser" ],
                        [ "...", "AWS.IAM.listPolicies" ],
                        [ "...", "AWS.IAM.listRolePolicies" ],
                        [ "...", "AWS.IAM.listRoles" ],
                        [ "...", "AWS.IAM.listServerCertificates" ],
                        [ "...", "AWS.IAM.listUserPolicies" ],
                        [ "...", "AWS.IAM.listUsers" ],
                        [ "...", "AWS.KMS.describeKey" ],
                        [ "...", "AWS.KMS.getKeyPolicy" ],
                        [ "...", "AWS.KMS.listAliases" ],
                        [ "...", "AWS.KMS.listKeys" ],
                        [ "...", "AWS.Lambda.getPolicy" ],
                        [ "...", "AWS.Lambda.listFunctions" ],
                        [ "...", "AWS.RDS.describeDBInstances" ],
                        [ "...", "AWS.RDS.describeDBParameterGroups" ],
                        [ "...", "AWS.RDS.describeDBParameters" ],
                        [ "...", "AWS.RDS.describeDBSecurityGroups" ],
                        [ "...", "AWS.RDS.describeDBSnapshotAttributes" ],
                        [ "...", "AWS.RDS.describeDBSnapshots" ],
                        [ "...", "AWS.RDS.listTagsForResource" ],
                        [ "...", "AWS.Redshift.describeClusters" ],
                        [ "...", "AWS.Redshift.describeClusterSecurityGroups" ],
                        [ "...", "AWS.Redshift.describeClusterSnapshots" ],
                        [ "...", "AWS.ResourceGroupsTaggingAPI.getResources" ],
                        [ "...", "AWS.Route53Domains.listDomains" ],
                        [ "...", "AWS.S3.getBucketAcl" ],
                        [ "...", "AWS.S3.getBucketEncryption" ],
                        [ "...", "AWS.S3.getBucketLocation" ],
                        [ "...", "AWS.S3.getBucketLogging" ],
                        [ "...", "AWS.S3.getBucketPolicy" ],
                        [ "...", "AWS.S3.getBucketTagging" ],
                        [ "...", "AWS.S3.getBucketVersioning" ],
                        [ "...", "AWS.S3.listBuckets" ],
                        [ "...", "AWS.SNS.getTopicAttributes" ],
                        [ "...", "AWS.SNS.listTopics" ],
                        [ "...", "AWS.SQS.getQueueAttributes" ],
                        [ "...", "AWS.SQS.listQueues" ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 0,
                "y": 36,
                "width": 12,
                "height": 6,
                "properties": {
                    "title": "Azure Endpoint Latency",
                    "region": "us-east-1",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "Discovery/Collector", "Latency", "endpoint", "/providers/Microsoft.Compute/disks?api-version=2017-03-30" ],
                        [ "...", "/providers/Microsoft.Compute/virtualMachines?api-version=2017-12-01" ],
                        [ "...", "/providers/Microsoft.Network/networkInterfaces?api-version=2018-01-01" ],
                        [ "...", "/providers/Microsoft.Network/publicIPAddresses?api-version=2018-01-01" ],
                        [ "...", "/providers/Microsoft.Network/virtualNetworks?api-version=2018-01-01" ],
                        [ "...", "/providers/Microsoft.Compute/snapshots?api-version=2017-03-30" ],
                        [ "...", "/providers/Microsoft.Network/loadBalancers?api-version=2018-04-01" ],
                        [ "...", "/providers/Microsoft.Compute/images?api-version=2017-12-01" ],
                        [ "...", "/providers/Microsoft.Storage/storageAccounts?api-version=2017-06-01" ],
                        [ "...", "/providers/Microsoft.Sql/servers?api-version=2015-05-01-preview" ],
                        [ "...", "/providers/Microsoft.Web/sites?api-version=2016-08-01" ],
                        [ "...", "/resources?api-version=2018-02-01" ],
                        [ "...", "/resourceGroups/{iterator.properties.resourceGroup}/providers/Microsoft.Web/sites/{iterator.name}/functions/?api-version=2016-08-01" ],
                        [ "...", "{iterator.id}/blobServices/default/containers?api-version=2018-03-01-preview" ],
                        [ "...", "{iterator.id}/databases?api-version=2017-10-01-preview" ],
                        [ "...", "{iterator.id}/auditingSettings/default?api-version=2017-03-01-preview" ],
                        [ "...", "{iterator.id}/transparentDataEncryption/current?api-version=2014-04-01" ],
                        [ "...", "{iterator.id}/connectionPolicies/Default?api-version=2014-04-01-preview" ],
                        [ "...", "{iterator.id}/firewallRules?api-version=2014-04-01" ]
                    ]
                }
            },
            {
                "type": "metric",
                "x": 12,
                "y": 36,
                "width": 12,
                "height": 6,
                "properties": {
                    "title": "ACP3 Identity Sync",
                    "region": "us-east-1",
                    "period": 300,
                    "stat": "Sum",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Duration", "FunctionName", "acp3-identity-sync_identity-auth-sync", { "color": "#9467bd", "stat": "Average" } ],
                        [ ".", "Invocations", ".", ".", { "color": "#e377c2" } ],
                        [ ".", "Throttles", ".", ".", { "color": "#c5b0d5" } ],
                        [ ".", "Errors", ".", ".", { "color": "#f7b6d2" } ]
                    ]
                }
            }
        ]
    }
    EOF
}


# Imported from ../service-discovery//infrastructure/discovery_diff-engine-task-definition.tf
# ==============================================
# discovery Cloudwatch Log Group
# ==============================================
resource "aws_cloudwatch_log_group" "discovery_diff-engine-log-group" {
  name = "/aws/fargate/discovery_diff-engine"
}

# ==============================================
# discovery ECS Task Definition
# ==============================================
resource "aws_ecs_task_definition" "discovery_diff-engine-task-definition" {
  depends_on = ["aws_elasticache_replication_group.discovery_cache-replication-group1"]
  family = "discovery_diff-engine"
  requires_compatibilities = ["FARGATE"]
  cpu = 256
  memory = 512
  network_mode = "awsvpc"
  task_role_arn = "${aws_iam_role.discovery_ecs-diff-engine-role.arn}"
  execution_role_arn = "${aws_iam_role.discovery_ecs-execution-role.arn}"
  container_definitions = <<CONTAINER_DEFINITIONS
[
  {
    "name": "discovery_diff-engine",
    "image": "309983114184.dkr.ecr.us-east-1.amazonaws.com/acp-platform-s/discovery_diff-engine:latest",
    "portMappings": [],
    "ulimits": [
      {
        "name": "nofile",
        "hardLimit": 100000,
        "softLimit": 100000
      }
    ],
    "environment": [
      {
        "name": "AUTHENTICATION_KEY",
        "value": "discovery_diff-engine_api_key"
      },
      {
        "name": "COMPONENT",
        "value": "discovery"
      },
      {
        "name": "ENV",
        "value": "sandbox1"
      },
      {
        "name": "ENV_BUCKET",
        "value": "acp-platform-s-discovery-sandbox1"
      },
      {
        "name": "FORCE_SCHEMA_CACHE_REFRESH",
        "value": "false"
      },
      {
        "name": "DIFF_ENGINE_OUTPUT_PREFIX",
        "value": "diff-engine"
      },
      {
        "name": "LOG_LEVEL",
        "value": "INFO"
      },
      {
        "name": "REDIS_ADDRESS",
        "value": "${aws_elasticache_replication_group.discovery_cache-replication-group1.primary_endpoint_address}"
      },
      {
        "name": "REDIS_PORT",
        "value": "${aws_elasticache_replication_group.discovery_cache-replication-group1.port}"
      },
      {
        "name": "REDIS_RECORDS_TTL_HOURS",
        "value": "2"
      },
      {
        "name": "QUEUE_URL",
        "value": "${aws_sqs_queue.discovery_diff-engine-queue.id}"
      },
      {
        "name": "PUBLISHER_TOPIC",
        "value": "${aws_sns_topic.discovery_publisher-topic.arn}"
      },
      {
        "name": "SQS_BATCH_SIZE",
        "value": "10"
      },
      {
        "name": "DIFF_ENGINE_ENABLED",
        "value": "true"
      },
      {
        "name": "COMPRESSION_ENABLED",
        "value": "true"
      },
      {
        "name": "S3_PATH_VERSION",
        "value": "13"
      },
      {
        "name": "CONTAINER_MONITOR_INTERVAL",
        "value": "300000"
      },
      {
        "name": "CONTAINER_MONITOR_MESSAGE_AGE_THRESHOLD",
        "value": "450"
      }
    ],
    "logConfiguration": {
      "logDriver": "awslogs",
      "options": {
        "awslogs-group": "/aws/fargate/discovery_diff-engine",
        "awslogs-region": "us-east-1",
        "awslogs-stream-prefix": "/aws/fargate"
      }
    },
    "entryPoint": null,
    "essential": true
  }
]
CONTAINER_DEFINITIONS
}


# Imported from ../service-discovery//infrastructure/discovery_cluster.tf
# ==============================================
# discovery ECS Cluster
# ==============================================
resource "aws_ecs_cluster" "discovery_platform-s-cluster" {
  name = "acp-platform-s"
}


# Imported from ../service-discovery//infrastructure/discovery_diff-engine-autoscaling.tf
# ==============================================
# discovery CloudWatch Alarm that monitors SQS queue length for scaling up
# ==============================================
resource "aws_cloudwatch_metric_alarm" "discovery_diff-engine-queue-cloudwatch-alaram-messages-high" {
  alarm_name = "discovery_cloudwatch-diff-engine-queue-cloudwatch-alarm-messages-high"
  alarm_description = "This alarm monitors the number of messages in the discovery_diff-engine-queue for scaling up"
  comparison_operator = "GreaterThanOrEqualToThreshold"
  evaluation_periods = "2"
  metric_name = "ApproximateNumberOfMessagesVisible"
  namespace = "AWS/SQS"
  period = "60"
  statistic = "Average"
  threshold = "1000"

  dimensions {
    QueueName = "${aws_sqs_queue.discovery_diff-engine-queue.name}"
  }

  alarm_actions = ["${aws_appautoscaling_policy.discovery_diff-engine-autoscaling-up.arn}"]
}

# ==============================================
# discovery CloudWatch Alarm that monitors SQS queue length for scaling down
# ==============================================
resource "aws_cloudwatch_metric_alarm" "discovery_diff-engine-queue-cloudwatch-alaram-messages-low" {
  alarm_name = "discovery_diff-engine-queue-cloudwatch-alarm-messages-low"
  alarm_description = "This alarm monitors the number of messages in the discovery_diff-engine-queue for scaling down"
  comparison_operator = "LessThanThreshold"
  evaluation_periods = "1"
  metric_name = "ApproximateNumberOfMessagesVisible"
  namespace = "AWS/SQS"
  period = "60"
  statistic = "Average"
  threshold = "1000"

  dimensions {
    QueueName = "${aws_sqs_queue.discovery_diff-engine-queue.name}"
  }

  alarm_actions = ["${aws_appautoscaling_policy.discovery_diff-engine-autoscaling-down.arn}"]
}

# ==============================================
# discovery diff-engine Autoscaling Target
# ==============================================
resource "aws_appautoscaling_target" "discovery_diff-engine-autoscaling-target" {
  service_namespace = "ecs"
  resource_id = "service/${aws_ecs_cluster.discovery_platform-s-cluster.name}/${aws_ecs_service.discovery_diff-engine-service.name}"
  scalable_dimension = "ecs:service:DesiredCount"
  role_arn = "${aws_iam_role.discovery_ecs-autoscale-role.arn}"
  min_capacity = 1
  max_capacity = 10

  depends_on = [
    "aws_ecs_cluster.discovery_platform-s-cluster",
    "aws_ecs_service.discovery_diff-engine-service"
  ]
}

# ==============================================
# discovery Autoscaling Policy for scaling up
# ==============================================
resource "aws_appautoscaling_policy" "discovery_diff-engine-autoscaling-up" {
  name                      = "discovery_diff-engine-autoscaling-up"
  service_namespace         = "ecs"
  resource_id               = "service/${aws_ecs_cluster.discovery_platform-s-cluster.name}/${aws_ecs_service.discovery_diff-engine-service.name}"
  scalable_dimension        = "ecs:service:DesiredCount"

  step_scaling_policy_configuration {
    adjustment_type         = "ChangeInCapacity"
    cooldown                = 60
    metric_aggregation_type = "Average"

    step_adjustment {
      metric_interval_lower_bound = 0
      metric_interval_upper_bound = 1000
      scaling_adjustment = 1
    }

    step_adjustment {
      metric_interval_lower_bound = 1000
      metric_interval_upper_bound = 3000
      scaling_adjustment = 3
    }

    step_adjustment {
      metric_interval_lower_bound = 3000
      scaling_adjustment = 6
    }
  }

  depends_on = [
    "aws_appautoscaling_target.discovery_diff-engine-autoscaling-target"
  ]
}

# ==============================================
# discovery Autoscaling Policy for scaling down
# ==============================================
resource "aws_appautoscaling_policy" "discovery_diff-engine-autoscaling-down" {
  name                      = "discovery_diff-engine-autoscaling-down"
  service_namespace         = "ecs"
  resource_id               = "service/${aws_ecs_cluster.discovery_platform-s-cluster.name}/${aws_ecs_service.discovery_diff-engine-service.name}"
  scalable_dimension        = "ecs:service:DesiredCount"

  step_scaling_policy_configuration {
    adjustment_type         = "ChangeInCapacity"
    cooldown                = 120
    metric_aggregation_type = "Average"

    step_adjustment {
      metric_interval_upper_bound = 0
      scaling_adjustment = -3
    }
  }

  depends_on = [
    "aws_appautoscaling_target.discovery_diff-engine-autoscaling-target"
  ]
}


# Imported from ../service-discovery//infrastructure/discovery_vpc.tf
# generated by ps_gen
# ==============================================
# Terraform file used by Platform.S for VPC setup
# This is primarily used for Lambdas that need
# access to private infrastructure such as ElastiCache
# and to allow access back out to other services
# such as Kinesis and DynamoDB
#
# Summary of resources:
#  1) discovery_vpc
#  2) discovery_nat-gateway-eip
#  3) discovery_internet-gateway
#  4) discovery_public-subnet
#  5) discovery_private-subnet-az-a
#  6) discovery_private-subnet-az-b
#  7) discovery_nat-gateway
#  8) discovery_public-route-table
#  9) discovery_public-route
# 10) discovery_private-route-table
# 11) discovery_private-route
# 12) discovery_public-route-table-association
# 13) discovery_vpc-endpoint-s3
# 14) discovery_vpc-endpoint-dynamodb
# 15) discovery_vpc-flow-log-group
# 16) discovery_vpc-flow-log-role
# 17) discovery_vpc-flow-log-policy
# 18) discovery_vpc-flow-log
# ==============================================

variable "vpc_cidr" {
  description = "CIDR for the whole VPC"
  default = "10.0.0.0/16"
}

variable "public_subnet_cidr" {
  description = "CIDR for the Public Subnet"
  default = "10.0.0.0/24"
}

variable "private_subnet_a_cidr" {
  description = "CIDR for the Private Subnet"
  default = "10.0.64.0/20"
}

variable "private_subnet_b_cidr" {
  description = "CIDR for the Private Subnet"
  default = "10.0.128.0/20"
}

# ==============================================
# discovery Cloudwatch Log Group for VPC Flow Log
# ==============================================
resource "aws_cloudwatch_log_group" "discovery_vpc-flow-log-group" {
  name = "/aws/vpc/discovery_flow-logs"
}

# ==============================================
# discovery VPC
# ==============================================
resource "aws_vpc" "discovery_vpc" {
  cidr_block = "${var.vpc_cidr}"
  instance_tenancy = "default"
  tags {
    Name = "discovery_vpc"
    Description = "discovery vpc used by Platform.S"
    CreatedBy = "Platform.S create-infra.py"
  }
}

# ==============================================
# discovery Elastic IP
# This is needed for the NAT gateway, which allows
# Lambda to access public AWS services (ie Kinesis)
# ==============================================
resource "aws_eip" "discovery_nat-gateway-eip" {
  vpc      = true
}

# ==============================================
# discovery Internet Gateway
# ==============================================
resource "aws_internet_gateway" "discovery_internet-gateway" {
  vpc_id = "${aws_vpc.discovery_vpc.id}"
  tags {
    Name = "discovery_internet-gateway"
    Description = "discovery internet gateway"
    CreatedBy = "Platform.S create-infra.py"
  }
}

# ==============================================
# discovery Public Subnet
# ==============================================
resource "aws_subnet" "discovery_public-subnet" {
  vpc_id = "${aws_vpc.discovery_vpc.id}"
  cidr_block = "${var.public_subnet_cidr}"
  map_public_ip_on_launch = true
  depends_on = ["aws_internet_gateway.discovery_internet-gateway"]

  tags {
    Name = "discovery_public-subnet"
    Description = "discovery vpc public subnet used by Platform.S"
    CreatedBy = "Platform.S create-infra.py"
  }
}

# ==============================================
# discovery Private Subnet a
# ==============================================
resource "aws_subnet" "discovery_private-subnet-az-a" {
  vpc_id = "${aws_vpc.discovery_vpc.id}"
  cidr_block = "${var.private_subnet_a_cidr}"
  availability_zone = "us-east-1a"
  tags {
    Name = "discovery_private-subnet-az-a"
    Description = "discovery vpc private subnet a used by Platform.S"
    CreatedBy = "Platform.S create-infra.py"
  }
}

# ==============================================
# discovery Private Subnet b
# ==============================================
resource "aws_subnet" "discovery_private-subnet-az-b" {
  vpc_id = "${aws_vpc.discovery_vpc.id}"
  cidr_block = "${var.private_subnet_b_cidr}"
  availability_zone = "us-east-1c"
  tags {
    Name = "discovery_private-subnet-az-b"
    Description = "discovery vpc private subnet b used by Platform.S"
    CreatedBy = "Platform.S create-infra.py"
  }
}

# ==============================================
# discovery NAT Gateway
# ==============================================
resource "aws_nat_gateway" "discovery_nat-gateway" {
  subnet_id = "${aws_subnet.discovery_public-subnet.id}"
  allocation_id = "${aws_eip.discovery_nat-gateway-eip.id}"
  depends_on = ["aws_subnet.discovery_public-subnet",
                "aws_eip.discovery_nat-gateway-eip",
                "aws_internet_gateway.discovery_internet-gateway"]
}

# ==============================================
# discovery Public Route Table
# ==============================================
resource "aws_route_table" "discovery_public-route-table" {
  vpc_id = "${aws_vpc.discovery_vpc.id}"
  tags {
    Name = "discovery_public-route-table"
    Description = "discovery Public Route Table"
    CreatedBy = "Platform.S create-infra.py"
  }
}

# ==============================================
# discovery Public Route
# Create route for the public subnet that matches all traffic (0.0.0.0/0)
# and routes it to the specified Internet gateway
# ==============================================
resource "aws_route" "discovery_public-route" {
  route_table_id = "${aws_route_table.discovery_public-route-table.id}"
  gateway_id = "${aws_internet_gateway.discovery_internet-gateway.id}"
  destination_cidr_block = "0.0.0.0/0"
  depends_on = ["aws_internet_gateway.discovery_internet-gateway",
                "aws_route_table.discovery_public-route-table"]
}


# ==============================================
# discovery Private Route Table
# ==============================================
resource "aws_route_table" "discovery_private-route-table" {
  vpc_id = "${aws_vpc.discovery_vpc.id}"
  tags {
    Name = "discovery_private-route-table"
    Description = "discovery Private Route Table"
    CreatedBy = "Platform.S create-infra.py"
  }
}

# ==============================================
# discovery Private Route
# Create a route for the private subnet that matches all traffic (0.0.0.0/0)
# and routes it to the specified NAT gateway
# ==============================================
resource "aws_route" "discovery_private-route" {
  route_table_id = "${aws_route_table.discovery_private-route-table.id}"
  nat_gateway_id = "${aws_nat_gateway.discovery_nat-gateway.id}"
  destination_cidr_block = "0.0.0.0/0"
  depends_on = ["aws_nat_gateway.discovery_nat-gateway",
                "aws_route_table.discovery_private-route-table"]
}

# ==============================================
# discovery Public Route Association
# Associate public subnet to route table
# ==============================================
resource "aws_route_table_association" "discovery_public-route-table-association" {
  subnet_id = "${aws_subnet.discovery_public-subnet.id}"
  route_table_id = "${aws_route_table.discovery_public-route-table.id}"
  depends_on = ["aws_subnet.discovery_public-subnet",
                "aws_route_table.discovery_public-route-table"]
}

# ==============================================
# discovery Private Route Association
# Associate private subnet to route table
# ==============================================
resource "aws_main_route_table_association" "discovery_private-route-table-association" {
  vpc_id = "${aws_vpc.discovery_vpc.id}"
  route_table_id = "${aws_route_table.discovery_private-route-table.id}"
  depends_on = ["aws_subnet.discovery_private-subnet-az-a", "aws_subnet.discovery_private-subnet-az-b",
    "aws_route_table.discovery_private-route-table"]
}

# ==============================================
# discovery VPC endpoint for S3
# ==============================================
resource "aws_vpc_endpoint" "discovery_vpc-endpoint-s3" {
  vpc_id       = "${aws_vpc.discovery_vpc.id}"
  service_name = "com.amazonaws.us-east-1.s3"
  route_table_ids = ["${aws_route_table.discovery_public-route-table.id}", "${aws_route_table.discovery_private-route-table.id}"]
}

# ==============================================
# discovery VPC endpoint for DynamoDB
# ==============================================
resource "aws_vpc_endpoint" "discovery_vpc-endpoint-dynamodb" {
  vpc_id       = "${aws_vpc.discovery_vpc.id}"
  service_name = "com.amazonaws.us-east-1.dynamodb"
  route_table_ids = ["${aws_route_table.discovery_public-route-table.id}", "${aws_route_table.discovery_private-route-table.id}"]
}

# ==============================================
# discovery VPC Flow Log IAM role
# ==============================================
resource "aws_iam_role" "discovery_vpc-flow-log-role" {
  name = "discovery_vpc-flow-log-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "vpc-flow-logs.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

# ==============================================
# discovery VPC Flow Log IAM role policy
# ==============================================
resource "aws_iam_role_policy" "discovery_vpc-flow-log-policy" {
  name = "discovery_vpc-flow-log-policy"
  role = "${aws_iam_role.discovery_vpc-flow-log-role.id}"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "AllowDescribeLogStreams",
            "Effect": "Allow",
            "Action": [
                "logs:DescribeLogStreams"
            ],
            "Resource": [
                "arn:aws:logs:us-east-1:309983114184:log-group:${aws_cloudwatch_log_group.discovery_vpc-flow-log-group.name}"
            ]
        },
        {
            "Sid": "AllowCreationOfLogStream",
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogStream"
            ],
            "Resource": [
                "arn:aws:logs:us-east-1:309983114184:log-group:${aws_cloudwatch_log_group.discovery_vpc-flow-log-group.name}:*"
            ]
        },
        {
            "Sid": "AllowUploadOfLogEventsToLogStream",
            "Effect": "Allow",
            "Action": [
                "logs:PutLogEvents"
            ],
            "Resource": [
                "arn:aws:logs:us-east-1:309983114184:log-group:${aws_cloudwatch_log_group.discovery_vpc-flow-log-group.name}:*"
            ]
        }
    ]
}
EOF
}

# ==============================================
# discovery VPC flow log
# ==============================================
resource "aws_flow_log" "discovery_vpc-flow-log" {
  log_group_name = "${aws_cloudwatch_log_group.discovery_vpc-flow-log-group.name}"
  iam_role_arn   = "${aws_iam_role.discovery_vpc-flow-log-role.arn}"
  vpc_id         = "${aws_vpc.discovery_vpc.id}"
  traffic_type   = "ALL"
}


# Imported from ../service-discovery//infrastructure/discovery_elasticache.tf
# generated by ps_gen
# ==============================================
# Terraform file used by Platform.S to create
# discovery ElasticCache cluster
#
# Summary of resources:
#  1) discovery_cache-subnet-group1
#  2) discovery_cache-security-group1
#
# ==============================================

# ==============================================
# discovery Cache Subnet Group
# ==============================================
resource "aws_elasticache_subnet_group" "discovery_cache-subnet-group1" {
  name                  = "discovery-cache-subnet-group1"
  description           = "discovery Elasticache Subnet Group"
  subnet_ids            = ["${aws_subnet.discovery_private-subnet-az-a.id}", "${aws_subnet.discovery_private-subnet-az-b.id}"]
  depends_on            = ["aws_subnet.discovery_private-subnet-az-a", "aws_subnet.discovery_private-subnet-az-b"]
}

# ==============================================
# discovery Cache Security Group
# ==============================================
resource "aws_security_group" "discovery_cache-security-group1" {
  vpc_id                = "${aws_vpc.discovery_vpc.id}"
  tags {
    Name                = "discovery_cache-security-group1"
    Description         = "discovery cache security group used by Platform.S"
    CreatedBy           = "Platform.S create-infra.py"
  }
  depends_on            = ["aws_vpc.discovery_vpc"]
  egress {
    from_port           = 0
    to_port             = 0
    protocol            = "-1"
    cidr_blocks         = ["0.0.0.0/0"]
  }
  ingress {
    from_port           = 0
    to_port             = 0
    protocol            = "-1"
    self                = true
  }
}


# Imported from ../service-discovery//infrastructure/discovery_iam.tf
# ==============================================
# discovery IAM Policy Document
# ==============================================
data "aws_iam_policy_document" "discovery_ecs-execution-policy" {
  statement {
    actions = [
      "sts:AssumeRole"]

    principals {
      type = "Service"
      identifiers = [
        "ecs-tasks.amazonaws.com"]
    }
  }
}

# ==============================================
# discovery IAM Role
# ==============================================
resource "aws_iam_role" "discovery_ecs-execution-role" {
  name = "discovery_ecs-execution-role"
  path = "/"
  assume_role_policy = "${data.aws_iam_policy_document.discovery_ecs-execution-policy.json}"
}

# ==============================================
# discovery IAM Role Policy Attachment
# ==============================================
resource "aws_iam_role_policy_attachment" "discovery_ecs-task-execution-policy" {
  role = "${aws_iam_role.discovery_ecs-execution-role.name}"
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

# ==============================================
# discovery IAM Policy Document
# ==============================================
data "aws_iam_policy_document" "discovery_ecs-autoscale-policy" {
  statement {
    actions = [
      "sts:AssumeRole"]

    principals {
      type = "Service"
      identifiers = [
        "ecs-tasks.amazonaws.com"]
    }
  }
}

# ==============================================
# discovery IAM Role
# ==============================================
resource "aws_iam_role" "discovery_ecs-autoscale-role" {
  name               = "discovery_ecs-autoscale-role"
  assume_role_policy = "${data.aws_iam_policy_document.discovery_ecs-autoscale-policy.json}"
}

# ==============================================
# discovery IAM Policy Attachment
# ==============================================
resource "aws_iam_policy_attachment" "discovery_ecs-autoscale-policy" {
  name       = "discovery_ecs-autoscale-policy"
  roles      = ["${aws_iam_role.discovery_ecs-autoscale-role.name}"]
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"
}

# Imported from ../service-discovery//infrastructure/discovery_collector-task-definition.tf
# ==============================================
# discovery Cloudwatch Log Group
# ==============================================
resource "aws_cloudwatch_log_group" "discovery_collector-log-group" {
  name = "/aws/fargate/discovery_collector"
}

# ==============================================
# discovery ECS Task Definition
# ==============================================
resource "aws_ecs_task_definition" "discovery_collector-task-definition" {
  depends_on               = ["aws_elasticache_replication_group.discovery_cache-replication-group1"]
  family                   = "discovery_collector"
  requires_compatibilities = ["FARGATE"]
  cpu                      = 256
  memory                   = 512
  network_mode             = "awsvpc"
  task_role_arn            = "${aws_iam_role.discovery_ecs-collector-role.arn}"
  execution_role_arn       = "${aws_iam_role.discovery_ecs-execution-role.arn}"

  container_definitions = <<CONTAINER_DEFINITIONS
[
  {
    "name": "discovery_collector",
    "image": "309983114184.dkr.ecr.us-east-1.amazonaws.com/acp-platform-s/discovery_collector:latest",
    "portMappings": [],
    "ulimits": [
      {
        "name": "nofile",
        "hardLimit": 100000,
        "softLimit": 100000
      }
    ],
    "environment": [
      {
        "name": "COMPONENT",
        "value": "discovery"
      },
      {
        "name": "ENV",
        "value": "sandbox1"
      },
      {
        "name": "ENV_BUCKET",
        "value": "acp-platform-s-discovery-sandbox1"
      },
      {
        "name": "COLLECTOR_OUTPUT_PREFIX",
        "value": "discovered-resources"
      },
      {
        "name": "CONTAINER_MONITOR_INTERVAL",
        "value": "300000"
      },
      {
        "name": "CONTAINER_MONITOR_MESSAGE_AGE_THRESHOLD",
        "value": "450"
      },
      {
        "name": "AUTHENTICATION_KEY",
        "value": "discovery_collector_api_key"
      },
      {
        "name": "LOG_LEVEL",
        "value": "INFO"
      },
      {
        "name": "REDIS_ADDRESS",
        "value": "${aws_elasticache_replication_group.discovery_cache-replication-group1.primary_endpoint_address}"
      },
      {
        "name": "REDIS_PORT",
        "value": "${aws_elasticache_replication_group.discovery_cache-replication-group1.port}"
      },
      {
        "name": "REDIS_RECORDS_TTL_HOURS",
        "value": "2"
      },
      {
        "name": "S3_CONCURRENT_UPLOADS",
        "value": "20"
      },
      {
        "name": "S3_PART_SIZE_MB",
        "value": "5"
      },
      {
        "name": "QUEUE_URL",
        "value": "${aws_sqs_queue.discovery_collector-queue.id}"
      },
      {
        "name": "SQS_BATCH_SIZE",
        "value": "10"
      },
      {
        "name": "COLLECTOR_ENABLED",
        "value": "true"
      },
      {
        "name": "STUB_MODE",
        "value": "false"
      },
      {
        "name": "STUB_RANDOM_DELAY",
        "value": "false"
      },
      {
        "name": "STUB_THROTTLE_ERRORS",
        "value": "false"
      },
      {
        "name": "STUB_HANDLER_ERRORS",
        "value": "false"
      },
      {
        "name": "CW_DETAILED_METRICS",
        "value": "false"
      },
      {
        "name": "COMPRESSION_ENABLED",
        "value": "true"
      },
      {
        "name": "PROMISE_POOL_CONCURRENCY",
        "value": "10"
      },
      {
        "name": "DISCOVERY_TOPIC",
        "value": "${aws_sns_topic.discovery_scheduled-discovery-topic.arn}"
      },
      {
        "name": "REDIS_TOKEN_CACHE_KEY_TTL_SECONDS",
        "value": "3480"
      },
      {
        "name": "FORCE_GOOGLE_CREDENTIAL_CACHE_REFRESH",
        "value": "true"
      }
    ],
    "logConfiguration": {
      "logDriver": "awslogs",
      "options": {
        "awslogs-group": "/aws/fargate/discovery_collector",
        "awslogs-region": "us-east-1",
        "awslogs-stream-prefix": "/aws/fargate"
      }
    },
    "entryPoint": null,
    "essential": true
  }
]
CONTAINER_DEFINITIONS
}


# ==============================================
# Generated from YAML files

# ==============================================
# aws_iam_role : ../service-discovery//infrastructure/aws_iam_role.yaml

# ----------------------------------------------
resource "aws_iam_role" "discovery_ecs-collector-role" {
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_ecs-collector-role"
      CreatedBy          = "Platform.S create-infra.py"
    }
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_ecs-collector-role"
}

# Generating aws_iam_role_policy for aws_iam_role
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_ecs-collector-role_role_policy" {
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:us-east-1:309983114184:log-group:discovery:log-stream:*"
      ]
    }, 
    {
      "Action": [
        "cloudwatch:PutMetricData", 
        "cloudwatch:GetMetricStatistics"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "*"
      ]
    }, 
    {
      "Action": [
        "sqs:DeleteMessage", 
        "sqs:ChangeMessageVisibility", 
        "sqs:DeleteMessageBatch", 
        "sqs:ChangeMessageVisibilityBatch", 
        "sqs:ReceiveMessage"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_sqs_queue.discovery_collector-queue.arn}", 
        "${aws_sqs_queue.discovery_collector-deadletter-queue.arn}"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:UpdateItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config"
      ]
    }, 
    {
      "Action": [
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/env/*", 
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/component-test/*", 
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/throttleCollector/*", 
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/container-env-vars/collector.json"
      ]
    }, 
    {
      "Action": [
        "s3:DeleteObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:discovery_scheduled-discovery-topic"
      ]
    }, 
    {
      "Action": [
        "ec2:Describe*"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "*"
      ]
    }, 
    {
      "Action": [
        "kms:GenerateDataKeyWithoutPlaintext", 
        "kms:Encrypt", 
        "kms:Decrypt"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:kms:us-east-1:309983114184:key/${aws_kms_key.discovery_cache-master-key.key_id}"
      ]
    }, 
    {
      "Action": [
        "kms:GenerateDataKey*", 
        "kms:Decrypt"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kms_key.discovery_master-key.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_ecs-collector-role.id}"
    name                 = "discovery_ecs-collector-role_role_policy"
}

# ----------------------------------------------
resource "aws_iam_role" "discovery_ecs-diff-engine-role" {
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_ecs-diff-engine-role"
      CreatedBy          = "Platform.S create-infra.py"
    }
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_ecs-diff-engine-role"
}

# Generating aws_iam_role_policy for aws_iam_role
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_ecs-diff-engine-role_role_policy" {
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:us-east-1:309983114184:log-group:discovery:log-stream:*"
      ]
    }, 
    {
      "Action": [
        "cloudwatch:PutMetricData", 
        "cloudwatch:GetMetricStatistics"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "*"
      ]
    }, 
    {
      "Action": [
        "sqs:DeleteMessage", 
        "sqs:ChangeMessageVisibility", 
        "sqs:DeleteMessageBatch", 
        "sqs:ChangeMessageVisibilityBatch", 
        "sqs:ReceiveMessage"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_sqs_queue.discovery_diff-engine-queue.arn}", 
        "${aws_sqs_queue.discovery_diff-engine-deadletter-queue.arn}"
      ]
    }, 
    {
      "Action": [
        "s3:PutObject", 
        "s3:GetObject", 
        "s3:GetObjectTagging", 
        "s3:PutObjectTagging"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/container-env-vars/diff-engine.json"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:discovery_publisher-topic"
      ]
    }, 
    {
      "Action": [
        "kms:GenerateDataKey*", 
        "kms:Decrypt"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kms_key.discovery_master-key.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_ecs-diff-engine-role.id}"
    name                 = "discovery_ecs-diff-engine-role_role_policy"
}


# ==============================================
# aws_sqs_queue : ../service-discovery//infrastructure/aws_sqs_queue.yaml

# ----------------------------------------------
resource "aws_sqs_queue" "discovery_aws-discovery-queue" {
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    name                 = "discovery_aws-discovery-queue"
    kms_data_key_reuse_period_seconds = 3600
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_aws-discovery-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
    lifecycle {
      prevent_destroy    = true
    }
}

# ----------------------------------------------
resource "aws_sqs_queue" "discovery_collector-queue" {
    visibility_timeout_seconds = 30
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    name                 = "discovery_collector-queue"
    lifecycle {
      prevent_destroy    = true
    }
    policy               = "{ \"Version\": \"2012-10-17\", \"Id\": \"arn:aws:sqs:us-east-1:309983114184:discovery_collector-queue/SNStoSQSPolicy\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"*\" }, \"Action\": \"SQS:SendMessage\", \"Resource\": \"arn:aws:sqs:us-east-1:309983114184:discovery_collector-queue\", \"Condition\": { \"ArnEquals\": { \"aws:SourceArn\": \"arn:aws:sns:us-east-1:309983114184:discovery_scheduled-discovery-topic\" } } } ] }"
    kms_data_key_reuse_period_seconds = 3600
    redrive_policy       = "{\"deadLetterTargetArn\":\"${aws_sqs_queue.discovery_collector-deadletter-queue.arn}\",\"maxReceiveCount\":2}"
    message_retention_seconds = 3600
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_collector-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# ----------------------------------------------
resource "aws_sqs_queue" "discovery_diff-engine-queue" {
    visibility_timeout_seconds = 30
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    name                 = "discovery_diff-engine-queue"
    lifecycle {
      prevent_destroy    = true
    }
    policy               = "{ \"Version\": \"2012-10-17\", \"Id\": \"arn:aws:sqs:us-east-1:309983114184:discovery_diff-engine-queue/SNStoSQSPolicy\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"*\" }, \"Action\": \"SQS:SendMessage\", \"Resource\": \"arn:aws:sqs:us-east-1:309983114184:discovery_diff-engine-queue\", \"Condition\": { \"ArnEquals\": { \"aws:SourceArn\": \"arn:aws:sns:us-east-1:309983114184:discovery_diff-engine-topic\" } } } ] }"
    kms_data_key_reuse_period_seconds = 3600
    redrive_policy       = "{\"deadLetterTargetArn\":\"${aws_sqs_queue.discovery_diff-engine-deadletter-queue.arn}\",\"maxReceiveCount\":2}"
    message_retention_seconds = 3600
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_diff-engine-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# ----------------------------------------------
resource "aws_sqs_queue" "discovery_publisher-queue" {
    visibility_timeout_seconds = 120
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    name                 = "discovery_publisher-queue"
    lifecycle {
      prevent_destroy    = true
    }
    policy               = "{ \"Version\": \"2012-10-17\", \"Id\": \"arn:aws:sqs:us-east-1:309983114184:discovery_publisher-queue/SNStoSQSPolicy\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"*\" }, \"Action\": \"SQS:SendMessage\", \"Resource\": \"arn:aws:sqs:us-east-1:309983114184:discovery_publisher-queue\", \"Condition\": { \"ArnEquals\": { \"aws:SourceArn\": \"arn:aws:sns:us-east-1:309983114184:discovery_publisher-topic\" } } } ] }"
    kms_data_key_reuse_period_seconds = 3600
    redrive_policy       = "{\"deadLetterTargetArn\":\"${aws_sqs_queue.discovery_publisher-deadletter-queue.arn}\",\"maxReceiveCount\":2}"
    message_retention_seconds = 3600
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_publisher-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# ----------------------------------------------
resource "aws_sqs_queue" "discovery_consistency-checker-queue" {
    delay_seconds        = 900
    kms_data_key_reuse_period_seconds = 3600
    message_retention_seconds = 3600
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_consistency-checker-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    name                 = "discovery_consistency-checker-queue"
    lifecycle {
      prevent_destroy    = true
    }
    visibility_timeout_seconds = 60
    policy               = "{ \"Version\": \"2012-10-17\", \"Id\": \"arn:aws:sqs:us-east-1:309983114184:discovery_consistency-checker-queue/SNStoSQSPolicy\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"*\" }, \"Action\": \"SQS:SendMessage\", \"Resource\": \"arn:aws:sqs:us-east-1:309983114184:discovery_consistency-checker-queue\", \"Condition\": { \"ArnEquals\": { \"aws:SourceArn\": \"arn:aws:sns:us-east-1:309983114184:discovery_publisher-topic\" } } } ] }"
    redrive_policy       = "{\"deadLetterTargetArn\":\"${aws_sqs_queue.discovery_consistency-checker-deadletter-queue.arn}\",\"maxReceiveCount\":2}"
}

# ----------------------------------------------
resource "aws_sqs_queue" "discovery_decommission-queue" {
    visibility_timeout_seconds = 300
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    delay_seconds        = 900
    name                 = "discovery_decommission-queue"
    lifecycle {
      prevent_destroy    = true
    }
    kms_data_key_reuse_period_seconds = 3600
    redrive_policy       = "{\"deadLetterTargetArn\":\"${aws_sqs_queue.discovery_decommission-deadletter-queue.arn}\",\"maxReceiveCount\":2}"
    message_retention_seconds = 3600
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_decommission-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# ----------------------------------------------
resource "aws_sqs_queue" "discovery_provider-consistency-queue" {
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    name                 = "discovery_provider-consistency-queue"
    kms_data_key_reuse_period_seconds = 3600
    message_retention_seconds = 3600
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
    visibility_timeout_seconds = 300
    lifecycle {
      prevent_destroy    = true
    }
    redrive_policy       = "{\"deadLetterTargetArn\":\"${aws_sqs_queue.discovery_provider-consistency-deadletter-queue.arn}\",\"maxReceiveCount\":2}"
}

# ----------------------------------------------    
resource "aws_sqs_queue" "discovery_provider-consistency-deadletter-queue" {
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    name                 = "discovery_provider-consistency-deadletter-queue"
    kms_data_key_reuse_period_seconds = 3600
    message_retention_seconds = 604800
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency-deadletter-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
    lifecycle {
      prevent_destroy    = true
    }
}

# ----------------------------------------------
resource "aws_sqs_queue" "discovery_consistency-checker-deadletter-queue" {
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    name                 = "discovery_consistency-checker-deadletter-queue"
    kms_data_key_reuse_period_seconds = 3600
    message_retention_seconds = 604800
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_consistency-checker-deadletter-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
    lifecycle {
      prevent_destroy    = true
    }
}

# ----------------------------------------------
resource "aws_sqs_queue" "discovery_collector-deadletter-queue" {
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    name                 = "discovery_collector-deadletter-queue"
    kms_data_key_reuse_period_seconds = 3600
    message_retention_seconds = 604800
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_collector-deadletter-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
    lifecycle {
      prevent_destroy    = true
    }
}

# ----------------------------------------------
resource "aws_sqs_queue" "discovery_diff-engine-deadletter-queue" {
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    name                 = "discovery_diff-engine-deadletter-queue"
    kms_data_key_reuse_period_seconds = 3600
    message_retention_seconds = 604800
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_diff-engine-deadletter-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
    lifecycle {
      prevent_destroy    = true
    }
}

# ----------------------------------------------
resource "aws_sqs_queue" "discovery_publisher-deadletter-queue" {
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    name                 = "discovery_publisher-deadletter-queue"
    kms_data_key_reuse_period_seconds = 3600
    message_retention_seconds = 604800
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_publisher-deadletter-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
    lifecycle {
      prevent_destroy    = true
    }
}

# ----------------------------------------------
resource "aws_sqs_queue" "discovery_decommission-deadletter-queue" {
    kms_master_key_id    = "${aws_kms_key.discovery_master-key.arn}"
    name                 = "discovery_decommission-deadletter-queue"
    kms_data_key_reuse_period_seconds = 3600
    message_retention_seconds = 604800
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_decommission-deadletter-queue"
      CreatedBy          = "Platform.S create-infra.py"
    }
    lifecycle {
      prevent_destroy    = true
    }
}


# ==============================================
# aws_sns_topic : ../service-discovery//infrastructure/aws_sns_topic.yaml

# ----------------------------------------------
resource "aws_sns_topic" "discovery_scheduled-discovery-topic" {
    name                 = "discovery_scheduled-discovery-topic"
}

# Generating aws_sns_topic_subscription for aws_sns_topic
# ----------------------------------------------
resource "aws_sns_topic_subscription" "discovery_scheduled-discovery-topic_Sub_sqs_discovery_collector-queue" {
    protocol             = "sqs"
    endpoint             = "${aws_sqs_queue.discovery_collector-queue.arn}"
    topic_arn            = "${aws_sns_topic.discovery_scheduled-discovery-topic.arn}"
}

# ----------------------------------------------
resource "aws_sns_topic" "discovery_s3-notification-topic" {
    policy = <<EOF
{
  "Version": "2012-10-17", 
  "Statement": [
    {
      "Action": "SNS:Publish", 
      "Resource": "arn:aws:sns:*:*:discovery_s3-notification-topic", 
      "Effect": "Allow", 
      "Condition": {
        "ArnLike": {
          "aws:SourceArn": "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
        }
      }, 
      "Principal": {
        "Service": "s3.amazonaws.com"
      }
    }
  ]
}
EOF
    name                 = "discovery_s3-notification-topic"
}

# ----------------------------------------------
resource "aws_sns_topic" "discovery_events-topic" {
    policy = <<EOF
{
  "Version": "2012-10-17", 
  "Statement": [
    {
      "Action": "SNS:Publish", 
      "Resource": "arn:aws:sns:*:*:discovery_events-topic", 
      "Effect": "Allow", 
      "Condition": {
        "ArnLike": {
          "aws:SourceArn": "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
        }
      }, 
      "Principal": {
        "Service": "s3.amazonaws.com"
      }
    }
  ]
}
EOF
    name                 = "discovery_events-topic"
}

# ----------------------------------------------
resource "aws_sns_topic" "discovery_diff-engine-topic" {
    policy = <<EOF
{
  "Version": "2012-10-17", 
  "Statement": [
    {
      "Action": "SNS:Publish", 
      "Resource": "arn:aws:sns:*:*:discovery_diff-engine-topic", 
      "Effect": "Allow", 
      "Condition": {
        "ArnLike": {
          "aws:SourceArn": "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
        }
      }, 
      "Principal": {
        "Service": "s3.amazonaws.com"
      }
    }
  ]
}
EOF
    name                 = "discovery_diff-engine-topic"
}

# Generating aws_sns_topic_subscription for aws_sns_topic
# ----------------------------------------------
resource "aws_sns_topic_subscription" "discovery_diff-engine-topic_Sub_sqs_discovery_diff-engine-queue" {
    protocol             = "sqs"
    endpoint             = "${aws_sqs_queue.discovery_diff-engine-queue.arn}"
    topic_arn            = "${aws_sns_topic.discovery_diff-engine-topic.arn}"
}

# ----------------------------------------------
resource "aws_sns_topic" "discovery_publisher-topic" {
    policy = <<EOF
{
  "Version": "2012-10-17", 
  "Statement": [
    {
      "Action": "SNS:Publish", 
      "Resource": "arn:aws:sns:*:*:discovery_publisher-topic", 
      "Effect": "Allow", 
      "Condition": {
        "ArnLike": {
          "aws:SourceArn": "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
        }
      }, 
      "Principal": {
        "Service": "s3.amazonaws.com"
      }
    }
  ]
}
EOF
    name                 = "discovery_publisher-topic"
}

# Generating aws_sns_topic_subscription for aws_sns_topic
# ----------------------------------------------
resource "aws_sns_topic_subscription" "discovery_publisher-topic_Sub_sqs_discovery_publisher-queue" {
    protocol             = "sqs"
    endpoint             = "${aws_sqs_queue.discovery_publisher-queue.arn}"
    topic_arn            = "${aws_sns_topic.discovery_publisher-topic.arn}"
}

# Generating aws_sns_topic_subscription for aws_sns_topic
# ----------------------------------------------
resource "aws_sns_topic_subscription" "discovery_publisher-topic_Sub_sqs_discovery_consistency-checker-queue" {
    protocol             = "sqs"
    endpoint             = "${aws_sqs_queue.discovery_consistency-checker-queue.arn}"
    topic_arn            = "${aws_sns_topic.discovery_publisher-topic.arn}"
}

# ----------------------------------------------
resource "aws_sns_topic" "discovery_provider-inconsistency-topic" {
    name                 = "discovery_provider-inconsistency-topic"
}


# ==============================================
# aws_dynamodb_table : ../service-discovery//infrastructure/aws_dynamodb_table.yaml

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_agent-status_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "discovery_agent-status" }
    alarm_name           = "discovery_agent-status_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_agent-status_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_agent-status_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "discovery_agent-status" }
    alarm_name           = "discovery_agent-status_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_agent-status_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "discovery_agent-status" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 1
    hash_key             = "TenantId"
    name                 = "discovery_agent-status"
    lifecycle {
      prevent_destroy    = true
    }
    write_capacity       = 1
    range_key            = "AgentId"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_agent-status"
      CreatedBy          = "Platform.S create-infra.py"
    }
    attribute {
      name               = "TenantId"
      type               = "S"
    }
    attribute {
      name               = "AgentId"
      type               = "S"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_tenant-config_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "discovery_tenant-config" }
    alarm_name           = "discovery_tenant-config_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_tenant-config_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_tenant-config_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "discovery_tenant-config" }
    alarm_name           = "discovery_tenant-config_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_tenant-config_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "discovery_tenant-config" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 15
    hash_key             = "tenantId"
    name                 = "discovery_tenant-config"
    lifecycle {
      prevent_destroy    = false
    }
    write_capacity       = 10
    range_key            = "accountId"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_tenant-config"
      CreatedBy          = "Platform.S create-infra.py"
    }
    attribute {
      name               = "tenantId"
      type               = "S"
    }
    attribute {
      name               = "accountId"
      type               = "S"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_collector-config_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "discovery_collector-config" }
    alarm_name           = "discovery_collector-config_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_collector-config_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_collector-config_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "discovery_collector-config" }
    alarm_name           = "discovery_collector-config_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_collector-config_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "discovery_collector-config" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 5
    hash_key             = "provider"
    name                 = "discovery_collector-config"
    lifecycle {
      prevent_destroy    = false
    }
    write_capacity       = 3
    range_key            = "resourceType"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_collector-config"
      CreatedBy          = "Platform.S create-infra.py"
    }
    attribute {
      name               = "provider"
      type               = "S"
    }
    attribute {
      name               = "resourceType"
      type               = "S"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_consistency-data_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "discovery_consistency-data" }
    alarm_name           = "discovery_consistency-data_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_consistency-data_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_consistency-data_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "discovery_consistency-data" }
    alarm_name           = "discovery_consistency-data_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_consistency-data_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "discovery_consistency-data" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 1
    hash_key             = "resourceType"
    name                 = "discovery_consistency-data"
    lifecycle {
      prevent_destroy    = true
    }
    write_capacity       = 1
    range_key            = "id"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_consistency-data"
      CreatedBy          = "Platform.S create-infra.py"
    }
    attribute {
      name               = "resourceType"
      type               = "S"
    }
    attribute {
      name               = "id"
      type               = "S"
    }
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_provider-consistency_ReadThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's ReadThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "discovery_provider-consistency" }
    alarm_name           = "discovery_provider-consistency_ReadThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency_ReadThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "ReadThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_provider-consistency_WriteThrottleEvents_capacityAlarm" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual table's WriteThrottleEvents"
    period               = 60
    datapoints_to_alarm  = 1
dimensions = { TableName = "discovery_provider-consistency" }
    alarm_name           = "discovery_provider-consistency_WriteThrottleEvents_capacityAlarm"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency_WriteThrottleEvents_capacityAlarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "WriteThrottleEvents"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/DynamoDB"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_dynamodb_table" "discovery_provider-consistency" {
    point_in_time_recovery {
      enabled            = true
    }
    read_capacity        = 1
    ttl {
      attribute_name     = "expirationTime"
      enabled            = true
    }
    hash_key             = "provider"
    name                 = "discovery_provider-consistency"
    lifecycle {
      prevent_destroy    = true
    }
    attribute {
      name               = "provider"
      type               = "S"
    }
    attribute {
      name               = "id"
      type               = "S"
    }
    write_capacity       = 1
    range_key            = "id"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency"
      CreatedBy          = "Platform.S create-infra.py"
    }
}


# ==============================================
# aws_lambda_function : ../service-discovery//infrastructure/aws_lambda_function.yaml

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_api_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_api_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_api_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_api_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_api_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_api*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_account-executions/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_account-executions"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Query", 
        "dynamodb:GetItem", 
        "dynamodb:BatchGetItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_executions/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_executions"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:UpdateItem", 
        "dynamodb:Scan"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config"
      ]
    }, 
    {
      "Action": [
        "ec2:CreateNetworkInterface", 
        "ec2:DescribeNetworkInterfaces", 
        "ec2:DetachNetworkInterface", 
        "ec2:DeleteNetworkInterface"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "*"
      ]
    }, 
    {
      "Action": [
        "ec2:CreateNetworkInterface", 
        "ec2:DescribeNetworkInterfaces", 
        "ec2:DeleteNetworkInterface"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_api_role.id}"
    name                 = "discovery_api_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_api_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_api"
    }
    alarm_name           = "discovery_api_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 300
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_api_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_api_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_api" }
    alarm_name           = "discovery_api_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_api_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_api" {
    function_name        = "discovery_api"
    depends_on           = [ "aws_iam_role.discovery_api_role" ]
    role                 = "${aws_iam_role.discovery_api_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_api"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 30
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }

    vpc_config {
      subnet_ids         = ["${aws_subnet.discovery_private-subnet-az-a.id}", "${aws_subnet.discovery_private-subnet-az-b.id}"]
      security_group_ids = ["${aws_security_group.discovery_cache-security-group1.id}"]
    }

    memory_size          = 768
    runtime              = "nodejs8.10"
    description          = "Discovery API"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_container-config_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_container-config_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_container-config_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_container-config_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_container-config_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_container-config*"
      ]
    }, 
    {
      "Action": [
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/container-env-vars/*"
      ]
    }, 
    {
      "Action": [
        "ec2:CreateNetworkInterface", 
        "ec2:DescribeNetworkInterfaces", 
        "ec2:DeleteNetworkInterface"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_container-config_role.id}"
    name                 = "discovery_container-config_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_container-config_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_container-config"
    }
    alarm_name           = "discovery_container-config_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 10
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_container-config_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_container-config_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_container-config" }
    alarm_name           = "discovery_container-config_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_container-config_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_container-config" {
    function_name        = "discovery_container-config"
    depends_on           = [ "aws_iam_role.discovery_container-config_role" ]
    role                 = "${aws_iam_role.discovery_container-config_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_container-config"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 30
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }

    vpc_config {
      subnet_ids         = ["${aws_subnet.discovery_private-subnet-az-a.id}", "${aws_subnet.discovery_private-subnet-az-b.id}"]
      security_group_ids = ["${aws_security_group.discovery_cache-security-group1.id}"]
    }

    memory_size          = 512
    runtime              = "nodejs8.10"
    description          = "Discovery container config redis publisher"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_scheduler_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_scheduler_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_scheduler_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_scheduler_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_scheduler_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_scheduler*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_collector-config/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_collector-config", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config"
      ]
    }, 
    {
      "Action": [
        "dynamodb:UpdateItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:discovery_scheduled-discovery-topic"
      ]
    }, 
    {
      "Action": [
        "events:DescribeRule"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:events:us-east-1:309983114184:rule/discovery_scheduler-rule"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_scheduler_role.id}"
    name                 = "discovery_scheduler_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_scheduler_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_scheduler"
    }
    alarm_name           = "discovery_scheduler_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_scheduler_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_scheduler_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_scheduler" }
    alarm_name           = "discovery_scheduler_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_scheduler_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_scheduler" {
    function_name        = "discovery_scheduler"
    depends_on           = [ "aws_iam_role.discovery_scheduler_role" ]
    role                 = "${aws_iam_role.discovery_scheduler_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_scheduler"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    memory_size          = 1280
    timeout              = 180
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "nodejs8.10"
    description          = "Scheduler which will start a discovery run."
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_legacy-scheduler_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_legacy-scheduler_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_legacy-scheduler_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_legacy-scheduler_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_legacy-scheduler_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_legacy-scheduler*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_collector-config/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_collector-config", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:discovery_scheduled-discovery-topic"
      ]
    }, 
    {
      "Action": [
        "events:DescribeRule"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:events:us-east-1:309983114184:rule/discovery_legacy-scheduler-rule"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_legacy-scheduler_role.id}"
    name                 = "discovery_legacy-scheduler_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_legacy-scheduler_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_legacy-scheduler"
    }
    alarm_name           = "discovery_legacy-scheduler_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_legacy-scheduler_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_legacy-scheduler_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_legacy-scheduler" }
    alarm_name           = "discovery_legacy-scheduler_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_legacy-scheduler_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_legacy-scheduler" {
    function_name        = "discovery_legacy-scheduler"
    depends_on           = [ "aws_iam_role.discovery_legacy-scheduler_role" ]
    role                 = "${aws_iam_role.discovery_legacy-scheduler_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_legacy-scheduler"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    memory_size          = 512
    timeout              = 180
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "nodejs8.10"
    description          = "Scheduler which will start a discovery run using old batching logic."
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_publisher_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_publisher_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_publisher_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_publisher_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_publisher_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_publisher*"
      ]
    }, 
    {
      "Action": [
        "s3:PutObject", 
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
      ]
    }, 
    {
      "Action": [
        "sqs:GetQueueAttributes", 
        "sqs:DeleteMessage", 
        "sqs:ChangeMessageVisibility", 
        "sqs:DeleteMessageBatch", 
        "sqs:ChangeMessageVisibilityBatch", 
        "sqs:ReceiveMessage"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_sqs_queue.discovery_publisher-queue.arn}", 
        "${aws_sqs_queue.discovery_publisher-deadletter-queue.arn}"
      ]
    }, 
    {
      "Action": [
        "kms:GenerateDataKey*", 
        "kms:Decrypt"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kms_key.discovery_master-key.arn}"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:discovery_events-topic"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_publisher_role.id}"
    name                 = "discovery_publisher_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_publisher_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_publisher"
    }
    alarm_name           = "discovery_publisher_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 1300
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_publisher_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_publisher_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_publisher" }
    alarm_name           = "discovery_publisher_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_publisher_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_publisher" {
    function_name        = "discovery_publisher"
    depends_on           = [ "aws_iam_role.discovery_publisher_role" ]
    role                 = "${aws_iam_role.discovery_publisher_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_publisher"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 120
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    memory_size          = 2650
    runtime              = "nodejs8.10"
    description          = "Sends changed resources as domain S3 events to the publisher bucket."
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_event-adapter_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_event-adapter_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_event-adapter_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_event-adapter_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_event-adapter_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_event-adapter*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/publisher/*", 
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/throttled-collector-publisher/*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
      ]
    }, 
    {
      "Action": [
        "kinesis:PutRecord"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kinesis_stream.discovery_event-bus.arn}"
      ]
    }, 
    {
      "Action": [
        "kinesis:PutRecords"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kinesis_stream.discovery_event-bus.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_event-adapter_role.id}"
    name                 = "discovery_event-adapter_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_event-adapter_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_event-adapter"
    }
    alarm_name           = "discovery_event-adapter_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 1300
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_event-adapter_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_event-adapter_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_event-adapter" }
    alarm_name           = "discovery_event-adapter_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_event-adapter_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_event-adapter" {
    function_name        = "discovery_event-adapter"
    depends_on           = [ "aws_iam_role.discovery_event-adapter_role" ]
    role                 = "${aws_iam_role.discovery_event-adapter_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_event-adapter"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 60
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    memory_size          = 1024
    runtime              = "nodejs8.10"
    description          = "Adapts publisher s3 notifications into kinesis events and sends to discovery_event-bus."
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_default-config_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_default-config_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_default-config_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_default-config_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_default-config_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_default-config*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan", 
        "dynamodb:GetItem", 
        "dynamodb:PutItem", 
        "dynamodb:DeleteItem", 
        "dynamodb:UpdateItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_default-config_role.id}"
    name                 = "discovery_default-config_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_default-config_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_default-config"
    }
    alarm_name           = "discovery_default-config_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 500
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_default-config_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_default-config_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_default-config" }
    alarm_name           = "discovery_default-config_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_default-config_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_default-config" {
    function_name        = "discovery_default-config"
    depends_on           = [ "aws_iam_role.discovery_default-config_role" ]
    role                 = "${aws_iam_role.discovery_default-config_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_default-config"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 240
    memory_size          = 128
    runtime              = "nodejs8.10"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    description          = "Creates the default discovery config for all new tenants"
}

# Generating aws_lambda_permission for SNS arn:aws:sns:us-east-1:309983114184:account_account-topic
# ----------------------------------------------
resource "aws_lambda_permission" "discovery_default-config_account_account-topic_sns_invoke_lambda_permission" {
    statement_id         = "discovery_default-config_account_account-topic_sns_invoke_lambda_permission"
    depends_on           = [ "aws_lambda_function.discovery_default-config" ]
    source_arn           = "arn:aws:sns:us-east-1:309983114184:account_account-topic"
    action               = "lambda:InvokeFunction"
    function_name        = "${aws_lambda_function.discovery_default-config.arn}"
    principal            = "sns.amazonaws.com"
}

# Generating aws_sns_topic_subscription for aws_lambda_function
# ----------------------------------------------
resource "aws_sns_topic_subscription" "discovery_default-config_Sub_account_account-topic" {
    depends_on           = [ "aws_lambda_function.discovery_default-config" ]
    topic_arn            = "arn:aws:sns:us-east-1:309983114184:account_account-topic"
    endpoint             = "${aws_lambda_function.discovery_default-config.arn}"
    protocol             = "lambda"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_diff-tagging_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_diff-tagging_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_diff-tagging_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_diff-tagging_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_diff-tagging_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_diff-tagging*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject", 
        "s3:GetObjectTagging", 
        "s3:PutObjectVersionTagging", 
        "s3:PutObjectTagging"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/diff-engine/*"
      ]
    }, 
    {
      "Action": [
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/diff-tagging-failures/*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
      ]
    }, 
    {
      "Action": [
        "kinesis:GetRecords", 
        "kinesis:GetShardIterator", 
        "kinesis:DescribeStream", 
        "kinesis:ListStreams"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:kinesis:us-east-1:309983114184:stream/discovery_event-bus"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_diff-tagging_role.id}"
    name                 = "discovery_diff-tagging_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_diff-tagging_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_diff-tagging"
    }
    alarm_name           = "discovery_diff-tagging_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 320
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_diff-tagging_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_diff-tagging_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_diff-tagging" }
    alarm_name           = "discovery_diff-tagging_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_diff-tagging_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_diff-tagging" {
    function_name        = "discovery_diff-tagging"
    depends_on           = [ "aws_iam_role.discovery_diff-tagging_role" ]
    role                 = "${aws_iam_role.discovery_diff-tagging_role.arn}"
    memory_size          = 1280
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_diff-tagging"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 120
    runtime              = "nodejs8.10"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    description          = "Consume kinesis events and tag the diff file to indicate discovery changes have been published"
}

# Generating aws_lambda_event_source_mapping for aws_lambda_function
# ----------------------------------------------
resource "aws_lambda_event_source_mapping" "discovery_diff-tagging_EvtMap_discovery_event-bus" {
    depends_on           = [ "aws_lambda_function.discovery_diff-tagging" ]
    starting_position    = "LATEST"
    batch_size           = 50
    event_source_arn     = "arn:aws:kinesis:us-east-1:309983114184:stream/discovery_event-bus"
    function_name        = "discovery_diff-tagging"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_consistency-checker_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_consistency-checker_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_consistency-checker_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_consistency-checker_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_consistency-checker_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_consistency-checker*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan", 
        "dynamodb:Query", 
        "dynamodb:GetItem", 
        "dynamodb:PutItem", 
        "dynamodb:DeleteItem", 
        "dynamodb:UpdateItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_consistency-data/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_consistency-data"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_provider-consistency/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_provider-consistency"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/diff-engine/*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/consistency/*"
      ]
    }, 
    {
      "Action": [
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/consistency/*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/env/*"
      ]
    }, 
    {
      "Action": [
        "sqs:GetQueueAttributes", 
        "sqs:DeleteMessage", 
        "sqs:ChangeMessageVisibility", 
        "sqs:DeleteMessageBatch", 
        "sqs:ChangeMessageVisibilityBatch", 
        "sqs:ReceiveMessage"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_sqs_queue.discovery_consistency-checker-queue.arn}", 
        "${aws_sqs_queue.discovery_consistency-checker-deadletter-queue.arn}"
      ]
    }, 
    {
      "Action": [
        "kms:GenerateDataKey*", 
        "kms:Decrypt"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kms_key.discovery_master-key.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_consistency-checker_role.id}"
    name                 = "discovery_consistency-checker_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_consistency-checker_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_consistency-checker"
    }
    alarm_name           = "discovery_consistency-checker_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 1500
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_consistency-checker_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_consistency-checker_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_consistency-checker" }
    alarm_name           = "discovery_consistency-checker_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_consistency-checker_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_consistency-checker" {
    depends_on           = [ "aws_iam_role.discovery_consistency-checker_role" ]
    role                 = "${aws_iam_role.discovery_consistency-checker_role.arn}"
    description          = "check consistency of discovery to inventory pipeline"
    function_name        = "discovery_consistency-checker"
    filename             = "/tmp/python_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_consistency-checker"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    timeout              = 60
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    memory_size          = 1024
    runtime              = "python3.6"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_machine-types-sync_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_machine-types-sync_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_machine-types-sync_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_machine-types-sync_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_machine-types-sync_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_machine-types-sync*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query", 
        "dynamodb:Scan"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config"
      ]
    }, 
    {
      "Action": [
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/instance-specification/*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/env/*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_machine-types-sync_role.id}"
    name                 = "discovery_machine-types-sync_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_machine-types-sync_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_machine-types-sync"
    }
    alarm_name           = "discovery_machine-types-sync_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_machine-types-sync_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_machine-types-sync_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_machine-types-sync" }
    alarm_name           = "discovery_machine-types-sync_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_machine-types-sync_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_machine-types-sync" {
    depends_on           = [ "aws_iam_role.discovery_machine-types-sync_role" ]
    role                 = "${aws_iam_role.discovery_machine-types-sync_role.arn}"
    description          = "Machine-types-sync which will the instance-specification with lates machine types"
    function_name        = "discovery_machine-types-sync"
    filename             = "/tmp/python_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_machine-types-sync"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    memory_size          = 1024
    timeout              = 60
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "python3.6"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_provider-consistency-checker_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_provider-consistency-checker_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency-checker_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_provider-consistency-checker_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_provider-consistency-checker_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_provider-consistency-checker*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:PutItem", 
        "dynamodb:UpdateItem"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_provider-consistency/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_provider-consistency"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/env/*"
      ]
    }, 
    {
      "Action": [
        "sqs:GetQueueAttributes", 
        "sqs:DeleteMessage", 
        "sqs:ChangeMessageVisibility", 
        "sqs:DeleteMessageBatch", 
        "sqs:ChangeMessageVisibilityBatch", 
        "sqs:ReceiveMessage"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_sqs_queue.discovery_provider-consistency-queue.arn}", 
        "${aws_sqs_queue.discovery_provider-consistency-deadletter-queue.arn}"
      ]
    }, 
    {
      "Action": [
        "sns:Publish"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sns:us-east-1:309983114184:discovery_provider-inconsistency-topic"
      ]
    }, 
    {
      "Action": [
        "kms:GenerateDataKey*", 
        "kms:Decrypt"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kms_key.discovery_master-key.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_provider-consistency-checker_role.id}"
    name                 = "discovery_provider-consistency-checker_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_provider-consistency-checker_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_provider-consistency-checker"
    }
    alarm_name           = "discovery_provider-consistency-checker_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 200
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency-checker_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_provider-consistency-checker_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_provider-consistency-checker" }
    alarm_name           = "discovery_provider-consistency-checker_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency-checker_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_provider-consistency-checker" {
    role                 = "${aws_iam_role.discovery_provider-consistency-checker_role.arn}"
    depends_on           = [ "aws_iam_role.discovery_provider-consistency-checker_role" ]
    description          = "check consistency of inventory against the provider"
    function_name        = "discovery_provider-consistency-checker"
    memory_size          = 2048
    filename             = "/tmp/python_lambda_stub.zip"
    reserved_concurrent_executions = 4
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency-checker"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    timeout              = 180
    runtime              = "python3.6"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
}

# Generating aws_lambda_event_source_mapping for aws_lambda_function
# ----------------------------------------------
resource "aws_lambda_event_source_mapping" "discovery_provider-consistency-checker_EvtMap_discovery_provider-consistency-checker" {
    depends_on           = [ "aws_lambda_function.discovery_provider-consistency-checker" ]
    batch_size           = 1
    event_source_arn     = "${aws_sqs_queue.discovery_provider-consistency-queue.arn}"
    function_name        = "discovery_provider-consistency-checker"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_provider-consistency-scheduler_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_provider-consistency-scheduler_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency-scheduler_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_provider-consistency-scheduler_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_provider-consistency-scheduler_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_provider-consistency-scheduler*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authorisation_token", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/authentication_key"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_tenant-config"
      ]
    }, 
    {
      "Action": [
        "dynamodb:Scan", 
        "dynamodb:Query"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_provider-consistency/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_provider-consistency"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/env/*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject", 
        "s3:PutObject", 
        "s3:DeleteObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/consistency/*"
      ]
    }, 
    {
      "Action": [
        "sqs:GetQueueUrl", 
        "sqs:SendMessage", 
        "sqs:SendMessageBatch"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_sqs_queue.discovery_provider-consistency-queue.arn}"
      ]
    }, 
    {
      "Action": [
        "kms:GenerateDataKey*", 
        "kms:Decrypt"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kms_key.discovery_master-key.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_provider-consistency-scheduler_role.id}"
    name                 = "discovery_provider-consistency-scheduler_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_provider-consistency-scheduler_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_provider-consistency-scheduler"
    }
    alarm_name           = "discovery_provider-consistency-scheduler_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency-scheduler_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_provider-consistency-scheduler_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_provider-consistency-scheduler" }
    alarm_name           = "discovery_provider-consistency-scheduler_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency-scheduler_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_provider-consistency-scheduler" {
    function_name        = "discovery_provider-consistency-scheduler"
    depends_on           = [ "aws_iam_role.discovery_provider-consistency-scheduler_role" ]
    role                 = "${aws_iam_role.discovery_provider-consistency-scheduler_role.arn}"
    filename             = "/tmp/python_lambda_stub.zip"
    reserved_concurrent_executions = 3
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency-scheduler"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handler"
    memory_size          = 1024
    timeout              = 600
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "python3.6"
    description          = "invoke provider consistency checker via SQS"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_sqs-replayer_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_sqs-replayer_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_sqs-replayer_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_sqs-replayer_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_sqs-replayer_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_sqs-replayer*"
      ]
    }, 
    {
      "Action": [
        "sqs:GetQueueUrl", 
        "sqs:ReceiveMessage", 
        "sqs:SendMessage", 
        "sqs:DeleteMessage"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_sqs_queue.discovery_publisher-queue.arn}", 
        "${aws_sqs_queue.discovery_publisher-deadletter-queue.arn}"
      ]
    }, 
    {
      "Action": [
        "kms:GenerateDataKey*", 
        "kms:Decrypt"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kms_key.discovery_master-key.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_sqs-replayer_role.id}"
    name                 = "discovery_sqs-replayer_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_sqs-replayer_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_sqs-replayer"
    }
    alarm_name           = "discovery_sqs-replayer_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_sqs-replayer_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_sqs-replayer_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_sqs-replayer" }
    alarm_name           = "discovery_sqs-replayer_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_sqs-replayer_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_sqs-replayer" {
    function_name        = "discovery_sqs-replayer"
    depends_on           = [ "aws_iam_role.discovery_sqs-replayer_role" ]
    role                 = "${aws_iam_role.discovery_sqs-replayer_role.arn}"
    filename             = "/tmp/python_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_sqs-replayer"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "index.handle_message"
    memory_size          = 1024
    timeout              = 120
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    runtime              = "python3.6"
    description          = "Replays messages froma source to target queue. Invoked manually."
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_decommission_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_decommission_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_decommission_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_decommission_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_decommission_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_decommission*"
      ]
    }, 
    {
      "Action": [
        "dynamodb:GetItem", 
        "dynamodb:Scan"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_collector-config/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/discovery_collector-config", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/account_account/*", 
        "arn:aws:dynamodb:us-east-1:309983114184:table/account_account"
      ]
    }, 
    {
      "Action": [
        "s3:PutObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/discovered-resources/*"
      ]
    }, 
    {
      "Action": [
        "s3:ListBucket"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
      ]
    }, 
    {
      "Action": [
        "sqs:GetQueueAttributes", 
        "sqs:GetQueueUrl", 
        "sqs:ReceiveMessage", 
        "sqs:SendMessage", 
        "sqs:DeleteMessage"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_sqs_queue.discovery_decommission-queue.arn}", 
        "${aws_sqs_queue.discovery_decommission-deadletter-queue.arn}"
      ]
    }, 
    {
      "Action": [
        "kms:GenerateDataKey*", 
        "kms:Decrypt"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kms_key.discovery_master-key.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_decommission_role.id}"
    name                 = "discovery_decommission_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_decommission_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_decommission"
    }
    alarm_name           = "discovery_decommission_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_decommission_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_decommission_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_decommission" }
    alarm_name           = "discovery_decommission_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_decommission_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_decommission" {
    function_name        = "discovery_decommission"
    depends_on           = [ "aws_iam_role.discovery_decommission_role" ]
    role                 = "${aws_iam_role.discovery_decommission_role.arn}"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_decommission"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    timeout              = 180
    memory_size          = 512
    runtime              = "nodejs8.10"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
    description          = "Account decommissionning lambda"
}

# Generating aws_lambda_permission for SNS arn:aws:sns:us-east-1:309983114184:account_account-topic
# ----------------------------------------------
resource "aws_lambda_permission" "discovery_decommission_account_account-topic_sns_invoke_lambda_permission" {
    statement_id         = "discovery_decommission_account_account-topic_sns_invoke_lambda_permission"
    depends_on           = [ "aws_lambda_function.discovery_decommission" ]
    source_arn           = "arn:aws:sns:us-east-1:309983114184:account_account-topic"
    action               = "lambda:InvokeFunction"
    function_name        = "${aws_lambda_function.discovery_decommission.arn}"
    principal            = "sns.amazonaws.com"
}

# Generating aws_sns_topic_subscription for aws_lambda_function
# ----------------------------------------------
resource "aws_sns_topic_subscription" "discovery_decommission_Sub_account_account-topic" {
    endpoint             = "${aws_lambda_function.discovery_decommission.arn}"
    protocol             = "lambda"
    depends_on           = [ "aws_lambda_function.discovery_decommission" ]
    topic_arn            = "arn:aws:sns:us-east-1:309983114184:account_account-topic"
    filter_policy        = "{ \"event\": [\"AccountDeactivatedEvent\", \"AccountRemovedEvent\"] }"
}

# Generating aws_lambda_event_source_mapping for aws_lambda_function
# ----------------------------------------------
resource "aws_lambda_event_source_mapping" "discovery_decommission_EvtMap_discovery_decommission-queue" {
    depends_on           = [ "aws_lambda_function.discovery_decommission" ]
    batch_size           = 1
    event_source_arn     = "${aws_sqs_queue.discovery_decommission-queue.arn}"
    function_name        = "discovery_decommission"
}

# Generating aws_iam_role for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role" "discovery_remediate-missing-resources_role" {
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_remediate-missing-resources_role"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_remediate-missing-resources_role"
      CreatedBy          = "Platform.S create-infra.py"
    }
}

# Generating aws_iam_role_policy for aws_lambda_function
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_remediate-missing-resources_role_policy" {
    depends_on           = [ "aws_iam_role.discovery_remediate-missing-resources_role" ]
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:log-group:/aws/lambda/*discovery_remediate-missing-resources*"
      ]
    }, 
    {
      "Action": [
        "s3:GetObject"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:s3:::acp-platform-s-discovery-sandbox1/env/*"
      ]
    }, 
    {
      "Action": [
        "sqs:GetQueueUrl", 
        "sqs:SendMessage", 
        "sqs:SendMessageBatch"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:sqs:us-east-1:309983114184:sre_auto-remediation-queue"
      ]
    }, 
    {
      "Action": [
        "kms:GenerateDataKey*", 
        "kms:Decrypt"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "${aws_kms_key.discovery_master-key.arn}"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_remediate-missing-resources_role.id}"
    name                 = "discovery_remediate-missing-resources_role_policy"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_remediate-missing-resources_runaway_alarm" {
    evaluation_periods   = 6
    alarm_description    = "This metric monitors an individual lambda's invocations"
    period               = 300
    datapoints_to_alarm  = 6
    dimensions = {
        FunctionName = "discovery_remediate-missing-resources"
    }
    alarm_name           = "discovery_remediate-missing-resources_runaway_alarm"
    statistic            = "SampleCount"
    threshold            = 100
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_remediate-missing-resources_runaway_alarm"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Invocations"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanOrEqualToThreshold"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_remediate-missing-resources_lambda-errors" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors an individual lambdas invocations"
    period               = 3600
    datapoints_to_alarm  = 1
    dimensions = { FunctionName = "discovery_remediate-missing-resources" }
    alarm_name           = "discovery_remediate-missing-resources_lambda-errors"
    statistic            = "Sum"
    threshold            = 0
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_remediate-missing-resources_lambda-errors"
      CreatedBy          = "Platform.S create-infra.py"
    }
    metric_name          = "Errors"
    lifecycle {
      ignore_changes     = ["alarm_actions"]
    }
    namespace            = "AWS/Lambda"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
}

# ----------------------------------------------
resource "aws_lambda_function" "discovery_remediate-missing-resources" {
    depends_on           = [ "aws_iam_role.discovery_remediate-missing-resources_role" ]
    role                 = "${aws_iam_role.discovery_remediate-missing-resources_role.arn}"
    description          = "Auto remediation steps for missing resources"
    function_name        = "discovery_remediate-missing-resources"
    filename             = "/tmp/nodejs_lambda_stub.zip"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_remediate-missing-resources"
      CreatedBy          = "Platform.S create-infra.py"
    }
    handler              = "lib/index.handler"
    memory_size          = 128
    timeout              = 30
    runtime              = "nodejs8.10"
    lifecycle {
      ignore_changes     = ["handler", "environment"]
    }
}

# Generating aws_lambda_permission for SNS ${aws_sns_topic.discovery_provider-inconsistency-topic.arn}
# ----------------------------------------------
resource "aws_lambda_permission" "discovery_remediate-missing-resources__provider-inconsistency-topic_sns_invoke_lambda_permission" {
    statement_id         = "discovery_remediate-missing-resources__provider-inconsistency-topic_sns_invoke_lambda_permission"
    depends_on           = [ "aws_lambda_function.discovery_remediate-missing-resources" ]
    source_arn           = "${aws_sns_topic.discovery_provider-inconsistency-topic.arn}"
    action               = "lambda:InvokeFunction"
    function_name        = "${aws_lambda_function.discovery_remediate-missing-resources.arn}"
    principal            = "sns.amazonaws.com"
}

# Generating aws_sns_topic_subscription for aws_lambda_function
# ----------------------------------------------
resource "aws_sns_topic_subscription" "discovery_remediate-missing-resources_Sub_discovery_provider-inconsistency-topic" {
    depends_on           = [ "aws_lambda_function.discovery_remediate-missing-resources" ]
    topic_arn            = "${aws_sns_topic.discovery_provider-inconsistency-topic.arn}"
    endpoint             = "${aws_lambda_function.discovery_remediate-missing-resources.arn}"
    protocol             = "lambda"
}


# ==============================================
# aws_api_gateway_deployment : ../service-discovery//infrastructure/aws_api_gateway_deployment.yaml

# ----------------------------------------------
resource "aws_iam_role" "discovery_gateway-invoke-lambda" {
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_gateway-invoke-lambda"
      CreatedBy          = "Platform.S create-infra.py"
    }
    assume_role_policy = <<EOF
{
  "Statement": [
    {
      "Action": "sts:AssumeRole", 
      "Effect": "Allow", 
      "Principal": {
        "Service": "apigateway.amazonaws.com"
      }, 
      "Sid": ""
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    name                 = "discovery_gateway-invoke-lambda"
}

# Generating aws_iam_role_policy for aws_iam_role
# ----------------------------------------------
resource "aws_iam_role_policy" "discovery_gateway-invoke-lambda_role_policy" {
    policy = <<EOF
{
  "Statement": [
    {
      "Action": [
        "lambda:InvokeFunction"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:lambda:us-east-1:309983114184:function:discovery_consistency-checker", 
        "arn:aws:lambda:us-east-1:309983114184:function:discovery_provider-consistency-checker", 
        "arn:aws:lambda:us-east-1:309983114184:function:discovery_provider-consistency-scheduler", 
        "arn:aws:lambda:us-east-1:309983114184:function:discovery_api", 
        "arn:aws:lambda:us-east-1:309983114184:function:discovery_api", 
        "arn:aws:lambda:us-east-1:309983114184:function:discovery_api"
      ]
    }, 
    {
      "Action": [
        "logs:CreateLogStream", 
        "logs:CreateLogGroup", 
        "logs:PutLogEvents"
      ], 
      "Effect": "Allow", 
      "Resource": [
        "arn:aws:logs:*:*:*"
      ]
    }
  ], 
  "Version": "2012-10-17"
}
EOF
    role                 = "${aws_iam_role.discovery_gateway-invoke-lambda.id}"
    name                 = "discovery_gateway-invoke-lambda_role_policy"
}



# Generating aws_api_gateway_rest_api for aws_api_gateway_deployment
# ----------------------------------------------
resource "aws_api_gateway_rest_api" "discovery" {
    name = "discovery"
    binary_media_types = ["*/*"]
}


# Generating aws_api_gateway_resource for path part consistency-checker
# ----------------------------------------------
resource "aws_api_gateway_resource" "discovery_deployment-consistency-checker_resource" {
    parent_id = "${aws_api_gateway_rest_api.discovery.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    path_part="consistency-checker"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "discovery_deployment-consistency-checker_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.discovery_deployment-consistency-checker_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "discovery_integration_discovery_deployment-consistency-checker_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    resource_id = "${aws_api_gateway_resource.discovery_deployment-consistency-checker_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "discovery_integration_discovery_deployment-consistency-checker_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.discovery_deployment-consistency-checker_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.discovery_consistency-checker.arn}/invocations"
    http_method = "${aws_api_gateway_method.discovery_integration_discovery_deployment-consistency-checker_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    credentials = "${aws_iam_role.discovery_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part provider-consistency-checker
# ----------------------------------------------
resource "aws_api_gateway_resource" "discovery_deployment-provider-consistency-checker_resource" {
    parent_id = "${aws_api_gateway_rest_api.discovery.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    path_part="provider-consistency-checker"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "discovery_deployment-provider-consistency-checker_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.discovery_deployment-provider-consistency-checker_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "discovery_integration_discovery_deployment-provider-consistency-checker_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    resource_id = "${aws_api_gateway_resource.discovery_deployment-provider-consistency-checker_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "discovery_integration_discovery_deployment-provider-consistency-checker_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.discovery_deployment-provider-consistency-checker_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.discovery_provider-consistency-checker.arn}/invocations"
    http_method = "${aws_api_gateway_method.discovery_integration_discovery_deployment-provider-consistency-checker_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    credentials = "${aws_iam_role.discovery_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part provider-consistency-scheduler
# ----------------------------------------------
resource "aws_api_gateway_resource" "discovery_deployment-provider-consistency-scheduler_resource" {
    parent_id = "${aws_api_gateway_rest_api.discovery.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    path_part="provider-consistency-scheduler"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "discovery_deployment-provider-consistency-scheduler_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.discovery_deployment-provider-consistency-scheduler_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "discovery_integration_discovery_deployment-provider-consistency-scheduler_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    resource_id = "${aws_api_gateway_resource.discovery_deployment-provider-consistency-scheduler_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "discovery_integration_discovery_deployment-provider-consistency-scheduler_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.discovery_deployment-provider-consistency-scheduler_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.discovery_provider-consistency-scheduler.arn}/invocations"
    http_method = "${aws_api_gateway_method.discovery_integration_discovery_deployment-provider-consistency-scheduler_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    credentials = "${aws_iam_role.discovery_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part tenants
# ----------------------------------------------
resource "aws_api_gateway_resource" "discovery_deployment-tenants_resource" {
    parent_id = "${aws_api_gateway_rest_api.discovery.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    path_part="tenants"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "discovery_deployment-tenants_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.discovery_deployment-tenants_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "discovery_integration_discovery_deployment-tenants_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    resource_id = "${aws_api_gateway_resource.discovery_deployment-tenants_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "discovery_integration_discovery_deployment-tenants_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.discovery_deployment-tenants_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.discovery_api.arn}/invocations"
    http_method = "${aws_api_gateway_method.discovery_integration_discovery_deployment-tenants_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    credentials = "${aws_iam_role.discovery_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part failures
# ----------------------------------------------
resource "aws_api_gateway_resource" "discovery_deployment-failures_resource" {
    parent_id = "${aws_api_gateway_rest_api.discovery.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    path_part="failures"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "discovery_deployment-failures_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.discovery_deployment-failures_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "discovery_integration_discovery_deployment-failures_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    resource_id = "${aws_api_gateway_resource.discovery_deployment-failures_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "discovery_integration_discovery_deployment-failures_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.discovery_deployment-failures_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.discovery_api.arn}/invocations"
    http_method = "${aws_api_gateway_method.discovery_integration_discovery_deployment-failures_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    credentials = "${aws_iam_role.discovery_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}


# Generating aws_api_gateway_resource for path part suspendedAccounts
# ----------------------------------------------
resource "aws_api_gateway_resource" "discovery_deployment-suspendedAccounts_resource" {
    parent_id = "${aws_api_gateway_rest_api.discovery.root_resource_id}"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    path_part="suspendedAccounts"
}


# Generating aws_api_gateway_resource for proxy mode
# ----------------------------------------------
resource "aws_api_gateway_resource" "discovery_deployment-suspendedAccounts_resource_proxy" {
    parent_id = "${aws_api_gateway_resource.discovery_deployment-suspendedAccounts_resource.id}"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    path_part="{proxy+}"
}

# Generating aws_api_gateway_method for ANY method on API
# ----------------------------------------------
resource "aws_api_gateway_method" "discovery_integration_discovery_deployment-suspendedAccounts_resource_ANY" {
    http_method  = "ANY"
    authorization = "NONE"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    resource_id = "${aws_api_gateway_resource.discovery_deployment-suspendedAccounts_resource_proxy.id}"
}

# Generating aws_api_gateway_integration for api
# ----------------------------------------------
resource "aws_api_gateway_integration" "discovery_integration_discovery_deployment-suspendedAccounts_resource_ANY_int" {
    resource_id = "${aws_api_gateway_resource.discovery_deployment-suspendedAccounts_resource_proxy.id}"
    uri = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.discovery_api.arn}/invocations"
    http_method = "${aws_api_gateway_method.discovery_integration_discovery_deployment-suspendedAccounts_resource_ANY.http_method}"
    integration_http_method = "POST"
    rest_api_id = "${aws_api_gateway_rest_api.discovery.id}"
    credentials = "${aws_iam_role.discovery_gateway-invoke-lambda.arn}"
    type = "AWS_PROXY"
    request_templates = { "application/json" = "{ \"statusCode\": 200 }" }
}

# Generating base path mapping for component
# ----------------------------------------------
resource "aws_api_gateway_base_path_mapping" "discovery_deployment-base-path-mapping" {
    stage_name           = "sandbox1"
    depends_on           = [ "aws_api_gateway_deployment.discovery_deployment" ]
    domain_name          = "api.sandbox1.cloudplatform.accenture.com"
    api_id               = "${aws_api_gateway_rest_api.discovery.id}"
    base_path            = "discovery"
}

# ----------------------------------------------
resource "aws_api_gateway_deployment" "discovery_deployment" {
    stage_name           = "sandbox1"
    rest_api_id          = "${aws_api_gateway_rest_api.discovery.id}"
    depends_on           = [ "aws_api_gateway_integration.discovery_integration_discovery_deployment-consistency-checker_resource_ANY_int","aws_api_gateway_integration.discovery_integration_discovery_deployment-provider-consistency-checker_resource_ANY_int","aws_api_gateway_integration.discovery_integration_discovery_deployment-provider-consistency-scheduler_resource_ANY_int","aws_api_gateway_integration.discovery_integration_discovery_deployment-tenants_resource_ANY_int","aws_api_gateway_integration.discovery_integration_discovery_deployment-failures_resource_ANY_int","aws_api_gateway_integration.discovery_integration_discovery_deployment-suspendedAccounts_resource_ANY_int" ]
}


# ==============================================
# aws_cloudwatch_metric_alarm : ../service-discovery//infrastructure/aws_cloudwatch_metric_alarm.yaml

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_collector-sqs-age" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors the discovery collector queue to alert when messages are close to reaching the timeout retention"
    namespace            = "AWS/SQS"
    period               = 60
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_collector-sqs-age"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      QueueName          = "discovery_collector-queue"
    }
    statistic            = "Maximum"
    threshold            = 900
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_collector-sqs-age"
    metric_name          = "ApproximateAgeOfOldestMessage"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_collector-sqs-deadletter-depth" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors the discovery collector deadletter queue to alert when messages fail to be processed and end up in the dead letter queue"
    namespace            = "AWS/SQS"
    period               = 60
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_collector-sqs-deadletter-depth"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      QueueName          = "discovery_collector-deadletter-queue"
    }
    statistic            = "Sum"
    threshold            = 0
    treat_missing_data   = "ignore"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_collector-sqs-deadletter-depth"
    metric_name          = "ApproximateNumberOfMessagesVisible"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_collector-messages-sent-low" {
    evaluation_periods   = 5
    alarm_description    = "This alarm monitors the discovery collector queue to alert when messages sent is less or equal to the number expected."
    namespace            = "AWS/SQS"
    period               = 300
    datapoints_to_alarm  = 5
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_collector-messages-sent-low"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      QueueName          = "discovery_collector-queue"
    }
    statistic            = "Sum"
    threshold            = "-1"
    comparison_operator  = "LessThanOrEqualToThreshold"
    alarm_name           = "discovery_collector-messages-sent-low"
    metric_name          = "NumberOfMessagesSent"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_diff-engine-sqs-age" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors the discovery diff-engine queue to alert when messages are close to reaching the 1 hour timeout retention"
    namespace            = "AWS/SQS"
    period               = 60
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_diff-engine-sqs-age"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      QueueName          = "discovery_diff-engine-queue"
    }
    statistic            = "Maximum"
    threshold            = 3000
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_diff-engine-sqs-age"
    metric_name          = "ApproximateAgeOfOldestMessage"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_diff-engine-sqs-deadletter-depth" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors the discovery diff-engine queue to alert when messages fail to be processed and end up in the dead letter queue"
    namespace            = "AWS/SQS"
    period               = 60
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_diff-engine-sqs-deadletter-depth"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      QueueName          = "discovery_diff-engine-deadletter-queue"
    }
    statistic            = "Sum"
    threshold            = 0
    treat_missing_data   = "ignore"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_diff-engine-sqs-deadletter-depth"
    metric_name          = "ApproximateNumberOfMessagesVisible"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_publisher-sqs-age" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors the discovery publisher queue to alert when messages are close to reaching the 1 hour timeout retention"
    namespace            = "AWS/SQS"
    period               = 60
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_publisher-sqs-age"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      QueueName          = "discovery_publisher-queue"
    }
    statistic            = "Maximum"
    threshold            = 3000
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_publisher-sqs-age"
    metric_name          = "ApproximateAgeOfOldestMessage"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_publisher-sqs-deadletter-depth" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors the discovery publisher queue to alert when messages fail to be processed and end up in the dead letter queue"
    namespace            = "AWS/SQS"
    period               = 60
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_publisher-sqs-deadletter-depth"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      QueueName          = "discovery_publisher-deadletter-queue"
    }
    statistic            = "Sum"
    threshold            = 0
    treat_missing_data   = "ignore"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_publisher-sqs-deadletter-depth"
    metric_name          = "ApproximateNumberOfMessagesVisible"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_diff-tagging-iterator-age" {
    evaluation_periods   = 2
    alarm_description    = "This will fire if the lambda iterator age is more than 30 minutes old"
    namespace            = "AWS/Lambda"
    period               = 300
    datapoints_to_alarm  = 2
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_diff-tagging-iterator-age"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      FunctionName       = "discovery_diff-tagging"
    }
    statistic            = "Maximum"
    threshold            = 1800000
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_diff-tagging-iterator-age"
    metric_name          = "IteratorAge"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_diff-tagging-failed-event-error" {
    evaluation_periods   = 1
    alarm_description    = "discovery_diff-tagging failed to process a kinesis event"
    namespace            = "diff_tagging_log_metrics"
    period               = 300
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_diff-tagging-failed-event-error"
      CreatedBy          = "Platform.S create-infra.py"
    }
    alarm_name           = "discovery_diff-tagging-failed-event-error"
    statistic            = "Sum"
    threshold            = 1
    comparison_operator  = "GreaterThanThreshold"
    metric_name          = "diff_tagging_failed_event"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_diff-engine-schema-validation-failures" {
    evaluation_periods   = 1
    alarm_description    = "Schema Validation failed for a set of resources"
    namespace            = "schema_validation_metrics"
    period               = 300
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_diff-engine-schema-validation-failures"
      CreatedBy          = "Platform.S create-infra.py"
    }
    alarm_name           = "discovery_diff-engine-schema-validation-failures"
    statistic            = "Sum"
    threshold            = 1
    comparison_operator  = "GreaterThanThreshold"
    metric_name          = "schema-validation-failures"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_decommission-failures" {
    evaluation_periods   = 1
    alarm_description    = "Account decommissioning failed for an account"
    namespace            = "AWS/Lambda"
    period               = 300
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_decommission-failures"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      FunctionName       = "discovery_decommission"
    }
    statistic            = "Sum"
    threshold            = 0
    treat_missing_data   = "ignore"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_decommission-failures"
    metric_name          = "Errors"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_decommission-sqs-deadletter-depth" {
    evaluation_periods   = 1
    alarm_description    = "This metric monitors the discovery decommission deadletter queue to alert when messages fail to be processed and end up in the dead letter queue"
    namespace            = "AWS/SQS"
    period               = 60
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_decommission-sqs-deadletter-depth"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      QueueName          = "discovery_decommission-deadletter-queue"
    }
    statistic            = "Sum"
    threshold            = 0
    treat_missing_data   = "ignore"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_decommission-sqs-deadletter-depth"
    metric_name          = "ApproximateNumberOfMessagesVisible"
}


# ==============================================
# aws_elasticache_replication_group : ../service-discovery//infrastructure/aws_elasticache_replication_group.yaml

# ----------------------------------------------
resource "aws_elasticache_replication_group" "discovery_cache-replication-group1" {
    engine               = "redis"
    replication_group_id = "discovery-cache"
    depends_on           = ["aws_elasticache_subnet_group.discovery_cache-subnet-group1","aws_security_group.discovery_cache-security-group1"]
    subnet_group_name    = "discovery-cache-subnet-group1"
    replication_group_description = "discovery cache used by Platform.S"
    parameter_group_name = "default.redis4.0"
    node_type            = "cache.t2.micro"
    security_group_ids   = ["${aws_security_group.discovery_cache-security-group1.id}"]
    port                 = 6379
    apply_immediately    = true
    transit_encryption_enabled = true
    engine_version       = "4.0.10"
    at_rest_encryption_enabled = true
    automatic_failover_enabled = false
    number_cache_clusters = 1
}

# ----------------------------------------------
# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_cache-replication-group1_elasticache-cpu-utilization-exceeded" {
    evaluation_periods   = 25
    depends_on           = [ "aws_elasticache_replication_group.discovery_cache-replication-group1" ]
    alarm_description    = "This will fire if the CPU utilization exceeds 10 percent at the instance level 5 times within 2 hours"
    period               = 300
    datapoints_to_alarm  = 5
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_cache-replication-group1_elasticache-cpu-utilization-exceeded"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      StreamName         = "discovery_cache-replication-group1"
    }
    statistic            = "Maximum"
    threshold            = 10
    metric_name          = "CPUUtilization"
    namespace            = "AWS/ElastiCache"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_cache-replication-group1_elasticache-cpu-utilization-exceeded"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_cache-replication-group1_elasticache-engine-cpu-utilization-exceeded" {
    evaluation_periods   = 25
    depends_on           = [ "aws_elasticache_replication_group.discovery_cache-replication-group1" ]
    alarm_description    = "This will fire if the CPU utilization exceeds 30 percent at the Redis process level 5 times within 2 hours"
    period               = 300
    datapoints_to_alarm  = 5
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_cache-replication-group1_elasticache-engine-cpu-utilization-exceeded"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      StreamName         = "discovery_cache-replication-group1"
    }
    statistic            = "Maximum"
    threshold            = 30
    metric_name          = "EngineCPUUtilization"
    namespace            = "AWS/ElastiCache"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_cache-replication-group1_elasticache-engine-cpu-utilization-exceeded"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_cache-replication-group1_elasticache-swap-usage" {
    evaluation_periods   = 1
    depends_on           = [ "aws_elasticache_replication_group.discovery_cache-replication-group1" ]
    alarm_description    = "This will fire if the amount swap used on the host exceeds 50MB at any point in time"
    period               = 300
    datapoints_to_alarm  = 1
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_cache-replication-group1_elasticache-swap-usage"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      StreamName         = "discovery_cache-replication-group1"
    }
    statistic            = "Maximum"
    threshold            = 50000000
    metric_name          = "SwapUsage"
    namespace            = "AWS/ElastiCache"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_cache-replication-group1_elasticache-swap-usage"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_cache-replication-group1_elasticache-evictions" {
    evaluation_periods   = 1
    depends_on           = [ "aws_elasticache_replication_group.discovery_cache-replication-group1" ]
    alarm_description    = "This will fire if any keys have been evicted due to having no memory left on the cache"
    period               = 300
    datapoints_to_alarm  = 1
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_cache-replication-group1_elasticache-evictions"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      StreamName         = "discovery_cache-replication-group1"
    }
    statistic            = "Sum"
    threshold            = 1
    metric_name          = "Evictions"
    namespace            = "AWS/ElastiCache"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_cache-replication-group1_elasticache-evictions"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_cache-replication-group1_elasticache-curr-connections" {
    evaluation_periods   = 1
    depends_on           = [ "aws_elasticache_replication_group.discovery_cache-replication-group1" ]
    alarm_description    = "This will fire if the number of client connections exceeds 300 within 5 minutes"
    period               = 300
    datapoints_to_alarm  = 1
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_cache-replication-group1_elasticache-curr-connections"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      StreamName         = "discovery_cache-replication-group1"
    }
    statistic            = "Sum"
    threshold            = 300
    metric_name          = "CurrConnections"
    namespace            = "AWS/ElastiCache"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_cache-replication-group1_elasticache-curr-connections"
}


# ==============================================
# aws_kms_key : ../service-discovery//infrastructure/aws_kms_key.yaml

# Generating aws_kms_alias for aws_kms_key
# ----------------------------------------------
resource "aws_kms_alias" "discovery_master-key-alias" {
    target_key_id        = "${aws_kms_key.discovery_master-key.id}"
    name_prefix          = "alias/discovery_master-key"
}

# ----------------------------------------------
resource "aws_kms_key" "discovery_master-key" {
    enable_key_rotation  = true
    description          = "Master key used for encrypting infrastructure in discovery"
    policy               = "{\"Version\": \"2012-10-17\", \"Statement\": [{\"Action\": [\"kms:GenerateDataKey*\", \"kms:Decrypt\"], \"Resource\": \"*\", \"Effect\": \"Allow\", \"Principal\": {\"Service\": \"sns.amazonaws.com\"}}, {\"Action\": [\"kms:GenerateDataKey\", \"kms:Decrypt\"], \"Resource\": \"*\", \"Effect\": \"Allow\", \"Principal\": {\"AWS\": [\"arn:aws:iam::309983114184:root\"]}}, {\"Action\": \"kms:*\", \"Principal\": {\"AWS\": [\"arn:aws:iam::309983114184:user/deployer\", \"arn:aws:iam::309983114184:role/Admin\", \"arn:aws:iam::309983114184:user/acpapi\"]}, \"Resource\": \"*\", \"Effect\": \"Allow\", \"Sid\": \"Enable Deployment Permissions\"}]}"
    lifecycle {
      prevent_destroy    = true
    }
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      description        = "Master key used for encrypting sqs and other infra items"
      CreatedBy          = "Platform.S create-infra.py"
      Name               = "discoveryMasterKey"
    }
}


# ==============================================
# aws_cloudwatch_log_group : ../service-discovery//infrastructure/aws_cloudwatch_log_group.yaml

# ----------------------------------------------
resource "aws_cloudwatch_log_group" "discovery_agents" {
    name                 = "discovery_agents"
}


# ==============================================
# aws_s3_bucket_notification : ../service-discovery//infrastructure/aws_s3_bucket_notification.yaml

# Generating aws_lambda_permission for S3 bucket acp-platform-s-discovery-sandbox1 and lambda discovery_event-adapter
# ----------------------------------------------
resource "aws_lambda_permission" "acp-platform-s-discovery-sandbox1-discovery_event-adapter_permission" {
    statement_id         = "acp-platform-s-discovery-sandbox1-discovery_event-adapter_permission"
    action               = "lambda:InvokeFunction"
    source_arn           = "arn:aws:s3:::acp-platform-s-discovery-sandbox1"
    function_name        = "${aws_lambda_function.discovery_event-adapter.arn}"
    principal            = "s3.amazonaws.com"
}

# ----------------------------------------------
resource "aws_s3_bucket_notification" "discovery_bucket-notification" {

    lambda_function {
        lambda_function_arn = "${aws_lambda_function.discovery_event-adapter.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "publisher/"
        filter_suffix       = ".json"
    }

    lambda_function {
        lambda_function_arn = "${aws_lambda_function.discovery_event-adapter.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "publisher/"
        filter_suffix       = ".json.gz"
    }

    lambda_function {
        lambda_function_arn = "${aws_lambda_function.discovery_event-adapter.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "throttled-collector-publisher/"
        filter_suffix       = ".json"
    }

    lambda_function {
        lambda_function_arn = "${aws_lambda_function.discovery_event-adapter.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "throttled-collector-publisher/"
        filter_suffix       = ".json.gz"
    }

    depends_on           = [ "aws_sns_topic.discovery_s3-notification-topic","aws_sns_topic.discovery_s3-notification-topic","aws_sns_topic.discovery_diff-engine-topic","aws_sns_topic.discovery_diff-engine-topic","aws_sns_topic.discovery_diff-engine-topic","aws_sns_topic.discovery_diff-engine-topic","aws_sns_topic.discovery_publisher-topic","aws_sns_topic.discovery_publisher-topic","aws_sns_topic.discovery_publisher-topic","aws_sns_topic.discovery_publisher-topic","aws_lambda_function.discovery_event-adapter","aws_lambda_function.discovery_event-adapter","aws_lambda_function.discovery_event-adapter","aws_lambda_function.discovery_event-adapter" ]
    bucket               = "acp-platform-s-discovery-sandbox1"

    topic {
        topic_arn = "${aws_sns_topic.discovery_s3-notification-topic.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "acp3/analytics_collector/"
        filter_suffix       = "_initial.csv.gz"
    }

    topic {
        topic_arn = "${aws_sns_topic.discovery_s3-notification-topic.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "acp3/analytics_collector/"
        filter_suffix       = "_delta.csv.gz"
    }

    topic {
        topic_arn = "${aws_sns_topic.discovery_diff-engine-topic.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "discovered-resources/"
        filter_suffix       = ".json"
    }

    topic {
        topic_arn = "${aws_sns_topic.discovery_diff-engine-topic.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "discovered-resources/"
        filter_suffix       = ".json.gz"
    }

    topic {
        topic_arn = "${aws_sns_topic.discovery_diff-engine-topic.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "throttled-collector-discovered-results/"
        filter_suffix       = ".json"
    }

    topic {
        topic_arn = "${aws_sns_topic.discovery_diff-engine-topic.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "throttled-collector-discovered-results/"
        filter_suffix       = ".json.gz"
    }

    topic {
        topic_arn = "${aws_sns_topic.discovery_publisher-topic.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "diff-engine/"
        filter_suffix       = ".json"
    }

    topic {
        topic_arn = "${aws_sns_topic.discovery_publisher-topic.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "diff-engine/"
        filter_suffix       = ".json.gz"
    }

    topic {
        topic_arn = "${aws_sns_topic.discovery_publisher-topic.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "throttled-collector-diff-engine/"
        filter_suffix       = ".json"
    }

    topic {
        topic_arn = "${aws_sns_topic.discovery_publisher-topic.arn}"
        events              = ["s3:ObjectCreated:*"]
        filter_prefix       = "throttled-collector-diff-engine/"
        filter_suffix       = ".json.gz"
    }

}


# ==============================================
# aws_kinesis_stream : ../service-discovery//infrastructure/aws_kinesis_stream.yaml

# ----------------------------------------------
resource "aws_kinesis_stream" "discovery_event-bus" {
    name                 = "discovery_event-bus"
    encryption_type      = "KMS"
    kms_key_id           = "alias/aws/kinesis"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_event-bus"
      CreatedBy          = "platform.s deployer"
      Description        = "Stream Discovery events to subscribers"
    }
    retention_period     = 168
    shard_count          = 1
}

# ----------------------------------------------
# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_event-bus_kinesis-readexceeded" {
    evaluation_periods   = 1
    depends_on           = [ "aws_kinesis_stream.discovery_event-bus" ]
    alarm_description    = "This will fire if the Read throughput has exceeded on the Kinesis Stream"
    period               = 300
    datapoints_to_alarm  = 1
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_event-bus_kinesis-readexceeded"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      StreamName         = "discovery_event-bus"
    }
    statistic            = "Average"
    threshold            = 1
    metric_name          = "ReadProvisionedThroughputExceeded"
    namespace            = "AWS/Kinesis"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_event-bus_kinesis-readexceeded"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_event-bus_kinesis-writeexceeded" {
    evaluation_periods   = 1
    depends_on           = [ "aws_kinesis_stream.discovery_event-bus" ]
    alarm_description    = "This will fire if the Write throughput has exceeded on the Kinesis Stream"
    period               = 300
    datapoints_to_alarm  = 1
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_event-bus_kinesis-writeexceeded"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      StreamName         = "discovery_event-bus"
    }
    statistic            = "Average"
    threshold            = 1
    metric_name          = "WriteProvisionedThroughputExceeded"
    namespace            = "AWS/Kinesis"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_event-bus_kinesis-writeexceeded"
}

# ----------------------------------------------
resource "aws_cloudwatch_metric_alarm" "discovery_event-bus_kinesis-iteratoragemilliseconds" {
    evaluation_periods   = 2
    depends_on           = [ "aws_kinesis_stream.discovery_event-bus" ]
    alarm_description    = "This will fire if the record throughput age is more than 30 minutes old"
    period               = 300
    datapoints_to_alarm  = 2
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_event-bus_kinesis-iteratoragemilliseconds"
      CreatedBy          = "Platform.S create-infra.py"
    }
    dimensions {
      StreamName         = "discovery_event-bus"
    }
    statistic            = "Maximum"
    threshold            = 1800000
    metric_name          = "GetRecords.IteratorAgeMilliseconds"
    namespace            = "AWS/Kinesis"
    treat_missing_data   = "notBreaching"
    comparison_operator  = "GreaterThanThreshold"
    alarm_name           = "discovery_event-bus_kinesis-iteratoragemilliseconds"
}


# ==============================================
# aws_cloudwatch_event_rule : ../service-discovery//infrastructure/aws_cloudwatch_event_rule.yaml

# Generating aws_cloudwatch_event_target for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_cloudwatch_event_target" "discovery_scheduler-rule_target" {
    depends_on           = [ "aws_cloudwatch_event_rule.discovery_scheduler-rule","aws_lambda_function.discovery_scheduler" ]
    target_id            = "discovery_scheduler-rule_target"
    arn                  = "${aws_lambda_function.discovery_scheduler.arn}"
    rule                 = "discovery_scheduler-rule"
}

# ----------------------------------------------
resource "aws_cloudwatch_event_rule" "discovery_scheduler-rule" {
    is_enabled           = false
    name                 = "discovery_scheduler-rule"
    description          = "Schedule invocation of the scheduler lambda"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_scheduler-rule"
      CreatedBy          = "Platform.S create-infra.py"
    }
    schedule_expression  = "rate(5 minutes)"
}

# Generating aws_lambda_permission for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_lambda_permission" "discovery_scheduler-rule_invoke" {
    statement_id         = "discovery_scheduler-rule_invoke"
    action               = "lambda:InvokeFunction"
    source_arn           = "${aws_cloudwatch_event_rule.discovery_scheduler-rule.arn}"
    function_name        = "${aws_lambda_function.discovery_scheduler.arn}"
    principal            = "events.amazonaws.com"
}

# Generating aws_cloudwatch_event_target for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_cloudwatch_event_target" "discovery_legacy-scheduler-rule_target" {
    depends_on           = [ "aws_cloudwatch_event_rule.discovery_legacy-scheduler-rule","aws_lambda_function.discovery_legacy-scheduler" ]
    target_id            = "discovery_legacy-scheduler-rule_target"
    arn                  = "${aws_lambda_function.discovery_legacy-scheduler.arn}"
    rule                 = "discovery_legacy-scheduler-rule"
}

# ----------------------------------------------
resource "aws_cloudwatch_event_rule" "discovery_legacy-scheduler-rule" {
    is_enabled           = false
    name                 = "discovery_legacy-scheduler-rule"
    description          = "Schedule invocation of the legacy scheduler lambda"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_legacy-scheduler-rule"
      CreatedBy          = "Platform.S create-infra.py"
    }
    schedule_expression  = "rate(1 minute)"
}

# Generating aws_lambda_permission for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_lambda_permission" "discovery_legacy-scheduler-rule_invoke" {
    statement_id         = "discovery_legacy-scheduler-rule_invoke"
    action               = "lambda:InvokeFunction"
    source_arn           = "${aws_cloudwatch_event_rule.discovery_legacy-scheduler-rule.arn}"
    function_name        = "${aws_lambda_function.discovery_legacy-scheduler.arn}"
    principal            = "events.amazonaws.com"
}

# Generating aws_cloudwatch_event_target for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_cloudwatch_event_target" "discovery_machine-types-sync-rule_target" {
    depends_on           = [ "aws_cloudwatch_event_rule.discovery_machine-types-sync-rule","aws_lambda_function.discovery_machine-types-sync" ]
    target_id            = "discovery_machine-types-sync-rule_target"
    arn                  = "${aws_lambda_function.discovery_machine-types-sync.arn}"
    rule                 = "discovery_machine-types-sync-rule"
}

# ----------------------------------------------
resource "aws_cloudwatch_event_rule" "discovery_machine-types-sync-rule" {
    description          = "Schedule regular invocation of machine-types-sync"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_machine-types-sync-rule"
      CreatedBy          = "Platform.S create-infra.py"
    }
    schedule_expression  = "cron(0 0 * * ? *)"
    name                 = "discovery_machine-types-sync-rule"
}

# Generating aws_lambda_permission for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_lambda_permission" "discovery_machine-types-sync-rule_invoke" {
    statement_id         = "discovery_machine-types-sync-rule_invoke"
    action               = "lambda:InvokeFunction"
    source_arn           = "${aws_cloudwatch_event_rule.discovery_machine-types-sync-rule.arn}"
    function_name        = "${aws_lambda_function.discovery_machine-types-sync.arn}"
    principal            = "events.amazonaws.com"
}

# Generating aws_cloudwatch_event_target for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_cloudwatch_event_target" "discovery_consistency-checker-scheduler-rule_target" {
    depends_on           = [ "aws_cloudwatch_event_rule.discovery_consistency-checker-scheduler-rule","aws_lambda_function.discovery_consistency-checker" ]
    target_id            = "discovery_consistency-checker-scheduler-rule_target"
    arn                  = "${aws_lambda_function.discovery_consistency-checker.arn}"
    rule                 = "discovery_consistency-checker-scheduler-rule"
}

# ----------------------------------------------
resource "aws_cloudwatch_event_rule" "discovery_consistency-checker-scheduler-rule" {
    description          = "Schedule regular invocation discovery-consistency-checker api"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_consistency-checker-scheduler-rule"
      CreatedBy          = "Platform.S create-infra.py"
    }
    schedule_expression  = "cron(0 * * * ? *)"
    name                 = "discovery_consistency-checker-scheduler-rule"
}

# Generating aws_lambda_permission for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_lambda_permission" "discovery_consistency-checker-scheduler-rule_invoke" {
    statement_id         = "discovery_consistency-checker-scheduler-rule_invoke"
    action               = "lambda:InvokeFunction"
    source_arn           = "${aws_cloudwatch_event_rule.discovery_consistency-checker-scheduler-rule.arn}"
    function_name        = "${aws_lambda_function.discovery_consistency-checker.arn}"
    principal            = "events.amazonaws.com"
}

# Generating aws_cloudwatch_event_target for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_cloudwatch_event_target" "discovery_provider-consistency-scheduler-rule_target" {
    depends_on           = [ "aws_cloudwatch_event_rule.discovery_provider-consistency-scheduler-rule","aws_lambda_function.discovery_provider-consistency-scheduler" ]
    target_id            = "discovery_provider-consistency-scheduler-rule_target"
    arn                  = "${aws_lambda_function.discovery_provider-consistency-scheduler.arn}"
    rule                 = "discovery_provider-consistency-scheduler-rule"
}

# ----------------------------------------------
resource "aws_cloudwatch_event_rule" "discovery_provider-consistency-scheduler-rule" {
    description          = "Schedule regular invocation discovery_provider-consistency-scheduler api"
    tags {
      Environment        = "sandbox1"
      Component          = "discovery"
      Name               = "discovery_provider-consistency-scheduler-rule"
      CreatedBy          = "Platform.S create-infra.py"
    }
    schedule_expression  = "cron(0 * * * ? *)"
    name                 = "discovery_provider-consistency-scheduler-rule"
}

# Generating aws_lambda_permission for aws_cloudwatch_event_rule
# ----------------------------------------------
resource "aws_lambda_permission" "discovery_provider-consistency-scheduler-rule_invoke" {
    statement_id         = "discovery_provider-consistency-scheduler-rule_invoke"
    action               = "lambda:InvokeFunction"
    source_arn           = "${aws_cloudwatch_event_rule.discovery_provider-consistency-scheduler-rule.arn}"
    function_name        = "${aws_lambda_function.discovery_provider-consistency-scheduler.arn}"
    principal            = "events.amazonaws.com"
}


# ==============================================
# aws_cloudwatch_log_metric_filter : ../service-discovery//infrastructure/aws_cloudwatch_log_metric_filter.yaml

# ----------------------------------------------
resource "aws_cloudwatch_log_metric_filter" "discovery_diff-engine-schema-validation-fails" {
    pattern              = "WARNING Schema validation failed"
    name                 = "discovery_diff-engine-schema-validation-fails"
    log_group_name       = "/aws/fargate/discovery_diff-engine"
    metric_transformation {
      name               = "schema-validation-failures"
      namespace          = "schema_validation_metrics"
      value              = "1"
    }
}


# ==============================================
# aws_s3_bucket_object : ../service-discovery//infrastructure/aws_s3_bucket_object.yaml

# ----------------------------------------------
resource "aws_s3_bucket_object" "discovery_cpsc-vmware-config" {
    bucket               = "acp-platform-s-discovery-sandbox1"
    source               = "/Users/james.n.wilson/code/work/repos/cd-pipeline/../service-discovery//infrastructure/default-config/cpsc-vmware-config.json"
    etag                 = "${md5(file("/Users/james.n.wilson/code/work/repos/cd-pipeline/../service-discovery//infrastructure/default-config/cpsc-vmware-config.json"))}"
    key                  = "default-config/cpsc-vmware-config.json"
}

# ----------------------------------------------
resource "aws_s3_bucket_object" "discovery_cpsc-resource-group-config" {
    bucket               = "acp-platform-s-discovery-sandbox1"
    source               = "/Users/james.n.wilson/code/work/repos/cd-pipeline/../service-discovery//infrastructure/default-config/cpsc-resource-group-config.json"
    etag                 = "${md5(file("/Users/james.n.wilson/code/work/repos/cd-pipeline/../service-discovery//infrastructure/default-config/cpsc-resource-group-config.json"))}"
    key                  = "default-config/cpsc-resource-group-config.json"
}

# ----------------------------------------------
resource "aws_s3_bucket_object" "discovery_cpsc-resource-tag-config" {
    bucket               = "acp-platform-s-discovery-sandbox1"
    source               = "/Users/james.n.wilson/code/work/repos/cd-pipeline/../service-discovery//infrastructure/default-config/cpsc-resource-tag-config.json"
    etag                 = "${md5(file("/Users/james.n.wilson/code/work/repos/cd-pipeline/../service-discovery//infrastructure/default-config/cpsc-resource-tag-config.json"))}"
    key                  = "default-config/cpsc-resource-tag-config.json"
}


# ==============================================
# Summary: 
# 1/15]  ../service-discovery//infrastructure/aws_iam_role.yaml 2 resources
# 2/15]  ../service-discovery//infrastructure/aws_sqs_queue.yaml 13 resources
# 3/15]  ../service-discovery//infrastructure/aws_sns_topic.yaml 6 resources
# 4/15]  ../service-discovery//infrastructure/aws_dynamodb_table.yaml 5 resources
# 5/15]  ../service-discovery//infrastructure/aws_lambda_function.yaml 15 resources
# 6/15]  ../service-discovery//infrastructure/aws_api_gateway_deployment.yaml 1 resources
# 7/15]  ../service-discovery//infrastructure/aws_cloudwatch_metric_alarm.yaml 12 resources
# 8/15]  ../service-discovery//infrastructure/aws_elasticache_replication_group.yaml 1 resources
# 9/15]  ../service-discovery//infrastructure/aws_kms_key.yaml 1 resources
# 10/15]  ../service-discovery//infrastructure/aws_cloudwatch_log_group.yaml 1 resources
# 11/15]  ../service-discovery//infrastructure/aws_s3_bucket_notification.yaml 1 resources
# 12/15]  ../service-discovery//infrastructure/aws_kinesis_stream.yaml 1 resources
# 13/15]  ../service-discovery//infrastructure/aws_cloudwatch_event_rule.yaml 5 resources
# 14/15]  ../service-discovery//infrastructure/aws_cloudwatch_log_metric_filter.yaml 1 resources
# 15/15]  ../service-discovery//infrastructure/aws_s3_bucket_object.yaml 3 resources
# total resources: 68

# Resources:
# 1] aws_api_gateway_base_path_mapping.discovery_deployment-base-path-mapping
# 2] aws_api_gateway_deployment.discovery_deployment
# 3] aws_cloudwatch_event_rule.discovery_consistency-checker-scheduler-rule
# 4] aws_cloudwatch_event_rule.discovery_legacy-scheduler-rule
# 5] aws_cloudwatch_event_rule.discovery_machine-types-sync-rule
# 6] aws_cloudwatch_event_rule.discovery_provider-consistency-scheduler-rule
# 7] aws_cloudwatch_event_rule.discovery_scheduler-rule
# 8] aws_cloudwatch_event_target.discovery_consistency-checker-scheduler-rule_target
# 9] aws_cloudwatch_event_target.discovery_legacy-scheduler-rule_target
# 10] aws_cloudwatch_event_target.discovery_machine-types-sync-rule_target
# 11] aws_cloudwatch_event_target.discovery_provider-consistency-scheduler-rule_target
# 12] aws_cloudwatch_event_target.discovery_scheduler-rule_target
# 13] aws_cloudwatch_log_group.discovery_agents
# 14] aws_cloudwatch_log_metric_filter.discovery_diff-engine-schema-validation-fails
# 15] aws_cloudwatch_metric_alarm.discovery_agent-status_ReadThrottleEvents_capacityAlarm
# 16] aws_cloudwatch_metric_alarm.discovery_agent-status_WriteThrottleEvents_capacityAlarm
# 17] aws_cloudwatch_metric_alarm.discovery_api_lambda-errors
# 18] aws_cloudwatch_metric_alarm.discovery_api_runaway_alarm
# 19] aws_cloudwatch_metric_alarm.discovery_cache-replication-group1_elasticache-cpu-utilization-exceeded
# 20] aws_cloudwatch_metric_alarm.discovery_cache-replication-group1_elasticache-curr-connections
# 21] aws_cloudwatch_metric_alarm.discovery_cache-replication-group1_elasticache-engine-cpu-utilization-exceeded
# 22] aws_cloudwatch_metric_alarm.discovery_cache-replication-group1_elasticache-evictions
# 23] aws_cloudwatch_metric_alarm.discovery_cache-replication-group1_elasticache-swap-usage
# 24] aws_cloudwatch_metric_alarm.discovery_collector-config_ReadThrottleEvents_capacityAlarm
# 25] aws_cloudwatch_metric_alarm.discovery_collector-config_WriteThrottleEvents_capacityAlarm
# 26] aws_cloudwatch_metric_alarm.discovery_collector-messages-sent-low
# 27] aws_cloudwatch_metric_alarm.discovery_collector-sqs-age
# 28] aws_cloudwatch_metric_alarm.discovery_collector-sqs-deadletter-depth
# 29] aws_cloudwatch_metric_alarm.discovery_consistency-checker_lambda-errors
# 30] aws_cloudwatch_metric_alarm.discovery_consistency-checker_runaway_alarm
# 31] aws_cloudwatch_metric_alarm.discovery_consistency-data_ReadThrottleEvents_capacityAlarm
# 32] aws_cloudwatch_metric_alarm.discovery_consistency-data_WriteThrottleEvents_capacityAlarm
# 33] aws_cloudwatch_metric_alarm.discovery_container-config_lambda-errors
# 34] aws_cloudwatch_metric_alarm.discovery_container-config_runaway_alarm
# 35] aws_cloudwatch_metric_alarm.discovery_decommission-failures
# 36] aws_cloudwatch_metric_alarm.discovery_decommission-sqs-deadletter-depth
# 37] aws_cloudwatch_metric_alarm.discovery_decommission_lambda-errors
# 38] aws_cloudwatch_metric_alarm.discovery_decommission_runaway_alarm
# 39] aws_cloudwatch_metric_alarm.discovery_default-config_lambda-errors
# 40] aws_cloudwatch_metric_alarm.discovery_default-config_runaway_alarm
# 41] aws_cloudwatch_metric_alarm.discovery_diff-engine-schema-validation-failures
# 42] aws_cloudwatch_metric_alarm.discovery_diff-engine-sqs-age
# 43] aws_cloudwatch_metric_alarm.discovery_diff-engine-sqs-deadletter-depth
# 44] aws_cloudwatch_metric_alarm.discovery_diff-tagging-failed-event-error
# 45] aws_cloudwatch_metric_alarm.discovery_diff-tagging-iterator-age
# 46] aws_cloudwatch_metric_alarm.discovery_diff-tagging_lambda-errors
# 47] aws_cloudwatch_metric_alarm.discovery_diff-tagging_runaway_alarm
# 48] aws_cloudwatch_metric_alarm.discovery_event-adapter_lambda-errors
# 49] aws_cloudwatch_metric_alarm.discovery_event-adapter_runaway_alarm
# 50] aws_cloudwatch_metric_alarm.discovery_event-bus_kinesis-iteratoragemilliseconds
# 51] aws_cloudwatch_metric_alarm.discovery_event-bus_kinesis-readexceeded
# 52] aws_cloudwatch_metric_alarm.discovery_event-bus_kinesis-writeexceeded
# 53] aws_cloudwatch_metric_alarm.discovery_legacy-scheduler_lambda-errors
# 54] aws_cloudwatch_metric_alarm.discovery_legacy-scheduler_runaway_alarm
# 55] aws_cloudwatch_metric_alarm.discovery_machine-types-sync_lambda-errors
# 56] aws_cloudwatch_metric_alarm.discovery_machine-types-sync_runaway_alarm
# 57] aws_cloudwatch_metric_alarm.discovery_provider-consistency-checker_lambda-errors
# 58] aws_cloudwatch_metric_alarm.discovery_provider-consistency-checker_runaway_alarm
# 59] aws_cloudwatch_metric_alarm.discovery_provider-consistency-scheduler_lambda-errors
# 60] aws_cloudwatch_metric_alarm.discovery_provider-consistency-scheduler_runaway_alarm
# 61] aws_cloudwatch_metric_alarm.discovery_provider-consistency_ReadThrottleEvents_capacityAlarm
# 62] aws_cloudwatch_metric_alarm.discovery_provider-consistency_WriteThrottleEvents_capacityAlarm
# 63] aws_cloudwatch_metric_alarm.discovery_publisher-sqs-age
# 64] aws_cloudwatch_metric_alarm.discovery_publisher-sqs-deadletter-depth
# 65] aws_cloudwatch_metric_alarm.discovery_publisher_lambda-errors
# 66] aws_cloudwatch_metric_alarm.discovery_publisher_runaway_alarm
# 67] aws_cloudwatch_metric_alarm.discovery_remediate-missing-resources_lambda-errors
# 68] aws_cloudwatch_metric_alarm.discovery_remediate-missing-resources_runaway_alarm
# 69] aws_cloudwatch_metric_alarm.discovery_scheduler_lambda-errors
# 70] aws_cloudwatch_metric_alarm.discovery_scheduler_runaway_alarm
# 71] aws_cloudwatch_metric_alarm.discovery_sqs-replayer_lambda-errors
# 72] aws_cloudwatch_metric_alarm.discovery_sqs-replayer_runaway_alarm
# 73] aws_cloudwatch_metric_alarm.discovery_tenant-config_ReadThrottleEvents_capacityAlarm
# 74] aws_cloudwatch_metric_alarm.discovery_tenant-config_WriteThrottleEvents_capacityAlarm
# 75] aws_dynamodb_table.discovery_agent-status
# 76] aws_dynamodb_table.discovery_collector-config
# 77] aws_dynamodb_table.discovery_consistency-data
# 78] aws_dynamodb_table.discovery_provider-consistency
# 79] aws_dynamodb_table.discovery_tenant-config
# 80] aws_elasticache_replication_group.discovery_cache-replication-group1
# 81] aws_iam_role.discovery_api_role
# 82] aws_iam_role.discovery_consistency-checker_role
# 83] aws_iam_role.discovery_container-config_role
# 84] aws_iam_role.discovery_decommission_role
# 85] aws_iam_role.discovery_default-config_role
# 86] aws_iam_role.discovery_diff-tagging_role
# 87] aws_iam_role.discovery_ecs-collector-role
# 88] aws_iam_role.discovery_ecs-diff-engine-role
# 89] aws_iam_role.discovery_event-adapter_role
# 90] aws_iam_role.discovery_gateway-invoke-lambda
# 91] aws_iam_role.discovery_legacy-scheduler_role
# 92] aws_iam_role.discovery_machine-types-sync_role
# 93] aws_iam_role.discovery_provider-consistency-checker_role
# 94] aws_iam_role.discovery_provider-consistency-scheduler_role
# 95] aws_iam_role.discovery_publisher_role
# 96] aws_iam_role.discovery_remediate-missing-resources_role
# 97] aws_iam_role.discovery_scheduler_role
# 98] aws_iam_role.discovery_sqs-replayer_role
# 99] aws_iam_role_policy.discovery_api_role_policy
# 100] aws_iam_role_policy.discovery_consistency-checker_role_policy
# 101] aws_iam_role_policy.discovery_container-config_role_policy
# 102] aws_iam_role_policy.discovery_decommission_role_policy
# 103] aws_iam_role_policy.discovery_default-config_role_policy
# 104] aws_iam_role_policy.discovery_diff-tagging_role_policy
# 105] aws_iam_role_policy.discovery_ecs-collector-role_role_policy
# 106] aws_iam_role_policy.discovery_ecs-diff-engine-role_role_policy
# 107] aws_iam_role_policy.discovery_event-adapter_role_policy
# 108] aws_iam_role_policy.discovery_gateway-invoke-lambda_role_policy
# 109] aws_iam_role_policy.discovery_legacy-scheduler_role_policy
# 110] aws_iam_role_policy.discovery_machine-types-sync_role_policy
# 111] aws_iam_role_policy.discovery_provider-consistency-checker_role_policy
# 112] aws_iam_role_policy.discovery_provider-consistency-scheduler_role_policy
# 113] aws_iam_role_policy.discovery_publisher_role_policy
# 114] aws_iam_role_policy.discovery_remediate-missing-resources_role_policy
# 115] aws_iam_role_policy.discovery_scheduler_role_policy
# 116] aws_iam_role_policy.discovery_sqs-replayer_role_policy
# 117] aws_kinesis_stream.discovery_event-bus
# 118] aws_kms_alias.discovery_master-key-alias
# 119] aws_kms_key.discovery_master-key
# 120] aws_lambda_event_source_mapping.discovery_decommission_EvtMap_discovery_decommission-queue
# 121] aws_lambda_event_source_mapping.discovery_diff-tagging_EvtMap_discovery_event-bus
# 122] aws_lambda_event_source_mapping.discovery_provider-consistency-checker_EvtMap_discovery_provider-consistency-checker
# 123] aws_lambda_function.discovery_api
# 124] aws_lambda_function.discovery_consistency-checker
# 125] aws_lambda_function.discovery_container-config
# 126] aws_lambda_function.discovery_decommission
# 127] aws_lambda_function.discovery_default-config
# 128] aws_lambda_function.discovery_diff-tagging
# 129] aws_lambda_function.discovery_event-adapter
# 130] aws_lambda_function.discovery_legacy-scheduler
# 131] aws_lambda_function.discovery_machine-types-sync
# 132] aws_lambda_function.discovery_provider-consistency-checker
# 133] aws_lambda_function.discovery_provider-consistency-scheduler
# 134] aws_lambda_function.discovery_publisher
# 135] aws_lambda_function.discovery_remediate-missing-resources
# 136] aws_lambda_function.discovery_scheduler
# 137] aws_lambda_function.discovery_sqs-replayer
# 138] aws_lambda_permission.acp-platform-s-discovery-sandbox1-discovery_event-adapter_permission
# 139] aws_lambda_permission.discovery_consistency-checker-scheduler-rule_invoke
# 140] aws_lambda_permission.discovery_decommission_account_account-topic_sns_invoke_lambda_permission
# 141] aws_lambda_permission.discovery_default-config_account_account-topic_sns_invoke_lambda_permission
# 142] aws_lambda_permission.discovery_legacy-scheduler-rule_invoke
# 143] aws_lambda_permission.discovery_machine-types-sync-rule_invoke
# 144] aws_lambda_permission.discovery_provider-consistency-scheduler-rule_invoke
# 145] aws_lambda_permission.discovery_remediate-missing-resources__provider-inconsistency-topic_sns_invoke_lambda_permission
# 146] aws_lambda_permission.discovery_scheduler-rule_invoke
# 147] aws_s3_bucket_notification.discovery_bucket-notification
# 148] aws_s3_bucket_object.discovery_cpsc-resource-group-config
# 149] aws_s3_bucket_object.discovery_cpsc-resource-tag-config
# 150] aws_s3_bucket_object.discovery_cpsc-vmware-config
# 151] aws_sns_topic.discovery_diff-engine-topic
# 152] aws_sns_topic.discovery_events-topic
# 153] aws_sns_topic.discovery_provider-inconsistency-topic
# 154] aws_sns_topic.discovery_publisher-topic
# 155] aws_sns_topic.discovery_s3-notification-topic
# 156] aws_sns_topic.discovery_scheduled-discovery-topic
# 157] aws_sns_topic_subscription.discovery_decommission_Sub_account_account-topic
# 158] aws_sns_topic_subscription.discovery_default-config_Sub_account_account-topic
# 159] aws_sns_topic_subscription.discovery_diff-engine-topic_Sub_sqs_discovery_diff-engine-queue
# 160] aws_sns_topic_subscription.discovery_publisher-topic_Sub_sqs_discovery_consistency-checker-queue
# 161] aws_sns_topic_subscription.discovery_publisher-topic_Sub_sqs_discovery_publisher-queue
# 162] aws_sns_topic_subscription.discovery_remediate-missing-resources_Sub_discovery_provider-inconsistency-topic
# 163] aws_sns_topic_subscription.discovery_scheduled-discovery-topic_Sub_sqs_discovery_collector-queue
# 164] aws_sqs_queue.discovery_aws-discovery-queue
# 165] aws_sqs_queue.discovery_collector-deadletter-queue
# 166] aws_sqs_queue.discovery_collector-queue
# 167] aws_sqs_queue.discovery_consistency-checker-deadletter-queue
# 168] aws_sqs_queue.discovery_consistency-checker-queue
# 169] aws_sqs_queue.discovery_decommission-deadletter-queue
# 170] aws_sqs_queue.discovery_decommission-queue
# 171] aws_sqs_queue.discovery_diff-engine-deadletter-queue
# 172] aws_sqs_queue.discovery_diff-engine-queue
# 173] aws_sqs_queue.discovery_provider-consistency-deadletter-queue
# 174] aws_sqs_queue.discovery_provider-consistency-queue
# 175] aws_sqs_queue.discovery_publisher-deadletter-queue
# 176] aws_sqs_queue.discovery_publisher-queue
# 177] terraform_remote_state.acp-platform-s-discovery-sandbox1_remote_state
# Resources generated: 109